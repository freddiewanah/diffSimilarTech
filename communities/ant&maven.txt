Cluster 1
can maven examine and resolve internal dependencies of non-mavenized jar library defined earlier by ant
ant is more likely to be used in their future employment;you may consider maven if you want to go through the problem of complex and or remote dependency in projects
as you ve already said ant is more a replacement for gnu make while maven is primary a buildout dependency-management application
so people have to judge between how easy they can adjust their builds for how maven works and how long they can wait for a bug fix and how hard it will become to maintain a complex ant build script;the problem with maven is not when it works it s when it breaks
learning ant as a build system may be a better first step as it will help you understand the requirements and difficulties in a build;also if maven is not acting the way you want you can always revert to ant and then integrate in the maven bigger picture
ant is simpler and older and the default just called a java project maven is newer more powerful and flexible
ant uses build.xml files to define where to find the source code and which steps to take to build your project;maven is more than just a build tool it is a project management tool
if you are running the maven build from the command line or in eclipse but using an alternate jre in the jre tab of the run configuration ant will not recognize the property;if you try to run the maven build using the workspace jre however it may recognize it because the property is defined in the eclipse workspace configuration
this question is similar in nature to whether ant is better than maven or c# better than java
a hood technique is to tag milestone releases of your projects giving then a version number and then manage dependencies with maven or a similar tool a bit more sophisticated than ant
really you can do almost anything you wish to put time into using ant;maven is a little more strucutred and newer and you can see a discussion of the differences here
since ant is more of a scripting tool and doesn t impose structure or lifecycle like maven and gradle you simply manually invoke ant when you want to use it
so i suggest you build a p2 repository can be done in ant but seems simpler in maven tycho and split the projects to several repositories
all of this is well-intentioned but can make it hard to figure out someone s ant scripts;maven is far more fully features
with ant you can do exactly what you want;maven is the more up-to-date way to build and package jars and do much more other stuff
first maven is a much younger tool than ant or make so you have to expect that its going to take time to get to the maturity level of those applications
since ant is more of a scripting tool and doesn t impose structure or lifecycle like maven and gradlew you simply manually invoke ant when you want to use it
in my opinion ant is a little easier to work with when you have to make custom builds;the problem with ant is that it is more difficult to make into a sharable module that you can share and configure like you can with a maven plugin
trust me i did this before for another job where the system architect decided that maven was better than ant and all of our projects must be converted from ant to maven
ant pre-dates more modern tools like maven and gradle that have this feature baked in
maven is higher level than make makefile the classic c c++ build tool or ant build.xml
ant build.xml;for maven it is much more complex
you may have more luck with maven projects but the ant infrastructure re not directly supported by liferay ide however you can use the ant infrastructure with plain eclipse
you already know the answer to the very oriented body of your question there is no ant equivalent to this minimal pom.xml because unlike maven ant does not define a set of standards patterns conventions in other words a lingua franca or shared language for project management that would make it possible so ant can t beat maven on this sample;somehow yes and i believe that most complains about maven s complexity are due to ignorance i know ant well i know how to do things in ant ant is simple i don t know maven i don t get it i don t know how to do things i feel lost i feel constrained i don t want to learn it maven is complex. and fud
maven knows how to fetch the libraries and where to find the source classes on it s own;while ant gives you more flexibility it also forces you to constantly reinvent the wheel
also maven projects come with a different directory structure and seems to be doing much more than what ant does in the spring source tutorial
in jacoco 0.7.9 there are jacoco ant tasks and in 0.8.0 there will be jacoco command line interface - both provide more freedom than jacoco maven plugin in specification of what should be included into report in particular can be used for arbitrary third-party jar files
alternate build tools ant lots of configuration gradle conventions again less verbose than maven
eventually ant was looking for just 1 content;but maven did not know anything about project.properties which was the problem
having said all of that i do think that maven is a very interesting and useful system i m not calling a while a tool like ant is maven is broader than that for software development configuration and build management
ant is older and while it is still used in a number of projects it is rapidly losing ground to maven
maven and gradle have support for dependency management but ant does not;your project should switch to maven gradle introduce a dependency manager such as ivy or hand-roll a half-baked custom solution you can call whatever ant target you want
maven is more of a meta-program that can use ant scripts and run your junit tests
also note that while maven is no slower than ant for multi-module projects of this sort importing your maven project into an ide will generally result in far faster builds than maven can perform itself
i then constructed an ant build file with the characteristics that you describe and got exactly the same result that you did;i noticed that the maven version contains many more dependent libraries
troubleshooting the build maven is less reliable than ant especially the non-core plugins
edit an important aspect of the ant-maven comparison is that maven has a convention describing where the files should lie where the dependencies are found where to put the resulting artifact while ant does not;so you can think of using maven like riding a bus - you select the stop where you enter and the one where you leave
1 - why ant script generates more .class files than maven

Cluster 2
does this make ant more complex than maven
the size of maven jar is bigger then ant jar i don t know why help me please
first of all ant is older than maven and therefore does not include core support for dependency management
maven can t be compared with ant as in maven vs ant maven is more than a build script than ant is
did maven has achieved more then ant or ant is still alive
the quotation you brought up just claim that maven does more than ant so that it s not fair to compare the two
but maven and ant are so different that there is no real point at comparing them and maven is still much more than ant + dependency management
i guess that the maven version contains much more than the ant version
but maven and ant are so different that there is no real point at comparing maven and ant and maven is still much more than ant + dependency management
i find the ant one much clearer than the maven one
i know maven is more powerful than ant

Cluster 3
maven is more like a replacement for ant
maven is more or less an update concept of ant

Cluster 4
maven usage is lower compared to ant but just how much lower is not really known
if you want to stick to lower level basic file operations ant is better bet than maven

Cluster 5
maven gradle ant jenkins are few others;which means maven is not dependent on sonarscanner and you can simply use maven instead of sonarscanner

Cluster 6
but as i checked-out some example apps from spring source repo and it seems that maven is more preferred and powerful than ant
ant is much more powerful than maven in many respects but maven excels in dependency management and ease of deployment
maven definitely has better integration with flex than ant
the flex-mojos maven plugins do a great job for we and i would highly recommend using maven over ant
while you can munge together a solution with ant maven is a better solution for managing dependencies than ant
maven is better for managing dependencies but ant is ok with them too if you use ant+ivy and build artefacts
maven is better for managing dependencies but ant is ok with maven and ant too if you use ant+ivy and build artefacts
maven does address some things that aren t addressed implicitly by ant but with some up front planning ant is the much more flexible better documented and the less buggy tool
i d definitely use ant or maven - my preference is ant because it s more flexible and i think it would suit your development style more than maven as well
i also find ant with ivy to be better documented than maven although that s not too difficult
however some things ant handles better than maven and if there s not a maven plugin for it it may be difficult to handle in maven
you can take a look on gradle which for me could provide more freedom than maven but is easier to use than ant
i think updating dependencies with maven is pretty easier than dealing with ant but of course you could select the other way if you feel more conifrtable
maven is definitely better than ant and well used for big projects
and it turns out maven really does a better job of managing dependencies for ant build.xml files than does ivy
while i personally think maven is a better tool than ant in the long run our experience will make maven3 a better tool than maven2
maven is a better alternative as build system compared to ant

