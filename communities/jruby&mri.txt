Cluster 1 performance
with these options jruby on rails gives about the same or better performance than mri
once the jvm has warmed up rails requests under jruby are usually significantly more performant than under mri both in terms of raw execution speed and garbage collection
i ve noticed however that jruby is more sensitive to memory leaks than mri
the jruby runtime alone is already pretty heavy much heavier than mri
for longer-running applications like a web application rubinius or jruby will generally perform better than mri
i know that rails jruby handles concurrency better than mri but i don t know how to do it
lastly if you are frequently finding yourself running long running process i advice you to try jruby which is works much better with long running processes due to jvm lot faster than mri
only choice not that that s a bad one jruby is actually faster
sometimes mri is faster but with the right parameters and warmup jruby was 3 to 3.5 times as fast on my system for this particular

Cluster 2 faster
jvm hosted languages are generally going to be faster than traditional mri ruby and both java and scala are generally faster than jruby when it comes to raw cpu capabilities
for example jruby is faster than mri jruby 1.7 is faster than jruby 1.6 jruby 1.7 running on hotspot is faster than jruby 1.7 running on j9 jruby 1.7 running on hotspot 1.7 is faster than jruby 1.7 running on hotspot 1.6 jruby 1.7 running on hotspot 1.7 with the c2 compiler is faster than jruby 1.7 running on hotspot 1.7 with the c1 compiler and so on
jruby is faster than 1.9 mri matz ruby interpreter the standard in certain areas
alter your command path so that jruby s version of the ruby command has a higher priority than the mri one
 m fuzzy on a lot of the finer details between jruby and mri ruby but here s what i know based off of what i ve learned using jruby;jruby is faster because jruby s multi-threaded
jvm hosted languages are generally going to be faster than traditional mri ruby and both java and java scala are generally faster than jruby when it comes to raw cpu capabilities
and it sounds strange but jruby scales very well and it s faster than mri with java 7
in fact on windows jruby passes more rubyspec tests than ruby meaning mri or yarv itself

Cluster 3 
mri has pretty lousy threading concurrency support so if that s what your aiming for jruby is probably a better place to go
mri is faster than jruby
does this mean that the old adagio about jruby being faster than mri ruby is gone
this really surprised me because i expected mri to be slower than jruby
the difference really is that mri cannot execute code in parallel and jruby can;you might be tempted to say why i answer no if the experiment shows that mri is faster
so it seems like the opposite - mri 2.3 gets 2-5x slower than jruby 9.1
mri has a gil so why is it faster than jruby in handling requests

