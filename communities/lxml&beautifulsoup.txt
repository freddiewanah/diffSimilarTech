Cluster 1
note that lxml is probably a better option than beautifulsoup for this kind of task nowadays for the reasons given by beautifulsoup s author
lxml will let you use xpath here which i think will be less painful than beautifulsoup s interface
i prefer the beautifulsoup syntax as i find the beautifulsoup syntax more natural but i find that lxml is better when i m trying to parse unknown quantities on the fly based on variables-- generating xpath strings that include variable values which i will then use to extract specific elements from varying pages
the reason for using lxml for such a task is that it cleans html files better than beautifulsoup do
you ll probably find that lxml runs faster than beautifulsoup but in my uses beautifulsoup was very easy to learn and use and handled typical crappy html as found in the wild well enough that i don t have need for anything else
lxml is the faster parser and can handle broken html quite well html5lib comes closest to how your browser would parse broken html but is a lot slower;also see installing a parser in the beautifulsoup documentation as well as the differences between parsers section
lxml is more strict and simply raises an exception if the html is malformed;in contrast to the multitude of functions provided by the beautifulsoup api lxml mainly uses the xpath mini-language for navigation
i ve found that even if lxml is faster than beautifulsoup for documents that size it s usually best to try to reduce the size to a few kb via regex or direct stripping and load that into bs as you are doing now
although the hood beautifulsoup s not needed here you might want to use lxml directly since the hood beautifulsoup gives you more succinct ways to navigate through xml using xpath
regarding beautifulsoup lxml is more efficient and in my experience can handle broken html better than beautifulsoup
i would recommend lxml for html parsing it s simple and considerably faster than beautifulsoup can be as much as two orders of magnitude
lxml is much faster than beautifulsoup and probably the fastest parser available for python
beautifulsoup is more suitable for html parsing than lxml
i found a solution to this problem using beautifulsoup at beautifulsoup-where-are-you-putting-my-html because i think it is easier than lxml
for xml documents it may be that the elementtree offered by lxml is more productive;it supports xpath queries for example while beautifulsoup does not
lxml enables you to search for elements using xpath which i think is easier than using beautifulsoup s api
one of the things that makes lxml better than beautifulsoup is support for proper css-like class selection or even supports full css selectors if you want to use them
edit don t use this for html work use the lxml library it s python based and much faster than beautifulsoup
note that using the beautifulsoup parser is a lot slower than lxml s default parser

Cluster 2
i prefer to use beautifulsoup better than lxml
lxml is significantly more powerful and robust than beautifulsoup in my experienced opinion
i do understand that traditionally they are saying that lxml are stricter than beautifulsoup however what i do not get is the following
how can i find all div and span tags with order preserved.with beautifulsoup it is very simple but i switched recently to lxml since it is much faster than beautifulsoup
lxml is supposed to be much faster and efficient and can do much more than beautifulsoup
aside from that improvement lxml would do the job faster;beautifulsoup cannot give you just a count number of tags it found
speed isn t important here but in other applications it is good to know that regexes are very fast 100 times faster than lxml and 1000 faster than beautifulsoup
lxml is faster than beautifulsoup i think and has much better functionality while remaining relatively easy to use
pyquery is based on lxml so it s also much faster than beautifulsoup
since you re using lxml why not use it in a more direct manner lxml is believed to be faster than beautifulsoup
lxml is also much much faster than beautifulsoup
alternatively you can use lxml module which is lot faster than beautifulsoup
it uses lxml underneath and is much faster than beautifulsoup
it s generally accepted that lxml is faster than beautifulsoup ref
i prefere lxml it s a harder to understand but much faster than beautifulsoup
according to some benchmark tests lxml is nearly 100 times faster than beautifulsoup
according to the above posts and my own experience lxml is definitely faster than beautifulsoup

Cluster 3
lxml also has more features and offers beautifulsoup too

Cluster 4
for starters beautifulsoup is no longer actively maintained and the author even recommends alternatives such as lxml

