using * that is supposed ti be faster than * for depth i m seeing a slow performance

i found that * is too slow at least much slower than * even on relatively small 150k datasets when searching records by text pattern despite the presence of indices

* is much more similar to oracle than * is

the only reason i was considering * was that some research suggested * has much better support for changing schemas along the way than *

if i were able to upgrade the server s versioning of * to 5.5 would innodb be a safer bet than *

triggers in * have a syntax a bit more complex than * because they execute procedures as the action

all that said * is much more acid compliant than * it handles fks just as you re needing and i would generally recommend it based on what you ve expressed in your post

in your case * may be a better option than * because your query is going to likely be against secondary indexes

* is more compliant but if you re comfortable with * and you re using an orm you should probably use that

if you are looking for location based queries in relational databases * is more matured compared to *

* is probably more often offered by shared hosting providers * is probably a little more powerful

in general * knows more tricks for how to optimize complicated queries than the * optimizer does but it also relies heavily on your having given the optimizer enough data to work with

i cannot propose any db not knowing your specific needs but if you want to use a free software which excludes oracle and you re not already experienced with * you should try * which is more powerful than *

this is a weak point that iirc * can handle better but with * you have to work around that by reverting the changes yourself in case of rollbacks

if you want open source * is much smarter than * as well

* is faster than * s innodb

an efficiently configured * is better than a badly configured * and vice-versa

is * a better option than * for partitioning tables by date

i suggest * it s more capable has more features and better support for complex queries and datatypes than * and has a lot of tuning options

* has better support but the support by * depends on the used storage engine

* is picky pickier than * -- all fields in the select list when using distinct must be present in the order_by and group_by clauses

* with the optional hstore module might be better than * at this.

since * is a lot more sane than * there are not that many tricks to report on

while * is more famous for serious enterprise-quality database where preserving your data is critical i recommend *

there is also * its a bit more robust than * and is free just the same

i would need a scalable database so probably * would be better than *

* is stricter about conversions than * is and generally will throw an error rather than try to convert a string to an integer if it doesn t look like one

but in * it is ok and in * it is wrong and ask for the other fields besides site_id either in a group by clause or in a aggregation function i know that * is stricter on sql than * so i must select the site_id in the query object of msg_published but in pure sqlalchemy i can do like this

also you might take the time to compare * and see if there is something about it that meets your needs as well or better than *

does that mean perhaps rails team favor * slightly more than *

