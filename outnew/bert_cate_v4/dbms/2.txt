* looks more fancy and advanced but not as popular as * and is not supported on heroku

* supports some more security features than * for example integration with gssapi or kerberos for logins last i checked * didn t have these

from how i understand it * is a more correct database implementation while * is less correct less compliant but faster

for example pyqt is already available for python 3 as well as 2 and you can use * a splendid open-source sql database engine much more standard than * via py-*

* i am told can be optimized to do faster reads than * but both are pretty ridiculously fast in terms of # transactions sec they support and it doesn t sound like that s your problem

in fact this presentation which still refers to an older incomplete version of * s opengis support suggests that with proper indexing some * geospatial actions may actually perform better than * postgis though i m sure that s up for debate

i am using * btw which can do more than * incase that changes things

it seems * is more forgiving with this than * but in every case you use a reserved word you should escape it

honestly though * scales much better than *

* specifically has gotten easier to manage while * has lost some of the simplicity that gave it an advantage without picking up enough features that really matter

traditionally * has had fewer security issues than * but they are both doing very well on that

i really like * s indexes which are far better than * s

some say * is much better for bigger projects while others think just go with *

i feel * is much more mature and robust than *

i had mentioned that in our rails application all select queries dropped below 100ms after switching to * whereas some of the complex joins generated by activerecord would occasionally take as much as 15s or more with * 5.1 because of nested loops with inner table scans even when indices were available

* is much more complete and solid and will much better support complex queries and their optimization while * may shine in terms of retrieval speed for extremely simple queries

if you need spatial data capabilities postgis with * is better than *

and * has fewer experienced administrators than the big databases and * which i believe contributes to the reputation

the query optimizer in * is more advanced than in * and copes with complicated statements much better especially when it comes to sub-selects

* mariadb is slightly worse than *

* license bsd is undoubtedly more simple than * s

poor performance from * has more to do with it not being smart and automatically creating an optimized plan like sql server * or oracle would

i was told that * is a better choice than * for displaying hierarchical data so i installed * and i m ready to go

i hear * is more robust and doesn t crash like * does in these situations

i d also recommend * over * if you are going to have nested comments as * does hierarchical querying better than *

i just checked the timings using * 5 and they are slightly worse than *

the other question is that what i am hearing from our group leader is that * is better than * when working with coordinates

i totally understand the error and assume that the * implementation is less sql conform than the * implementation

* is more widely supported and a little easier to use but * has some very cool features and functionality that s worth taking a gander at

looks like * is a little more compliant than * so try this instead

* run 4x faster than *

* is more sql compliant than *

* seem to better than * in terms of speed

* is worth learning and much more advanced than *

* is much better suited for data warehousing compared to *

some recent tests we did showed that * does perform faster than * and we believe the table partitioning feature in * will be very important with a table in our database we foresee to grow into 100 million rows and more in production

given * s reputation for doing things better than * or at least as good as i daresay that * would demonstrate similar performance if properly used

what i am hearing from our group leader is that * is better than * when working with coordinates

if you want to use sql i strongly reccommend * it seems to deal with large databases and frequent writes a lot better than *

* is not less complicated that * -- they re the same thing

i ve found that * is in my expirience is slower as *

i did some benchmarking 3 years ago may be stale... which showed that on large datasets basically * fulltext is 10-100x faster than * and xapian 10-100x faster than * but not integrated

ps you can also migrate to * it s smarter than * when choosing right indexes

is * better than * for such purpose

* s version is apparently marginally faster than * but lacks some of the more advanced spatial features therefore it s pretty much limited to finding records that match a certain range of coordinates

with correct locking for safety reasons and heavy concurrent use * performed better than *

with django it is easy to use * instead of * so i tried it with the same query and same data in db * is much faster that * x10 more faster while using inner join analyse shows it uses indexes unlike *

according to the * which i gather * is based on documentation for sequence manipulation functions it should return the value most recently returned by nextval in the current session.

* and other similar solutions should work a bit better than * depending on your data sets and use cases

