* is much more free and easy with types and compilation checks where * isn t

wouldn t * be slower than * in this case since it is layered on top of it

however when i switch to * 4.0 the methods declared in * is no longer visible in *

furthermore * is stricter than * when it comes to initialisers

* seems to be less dynamic than * in these stuffs

* is clearer on versions releases and i keep asking myself if i am missing something related to * since i can t find this information

the * runtime is smaller than the * runtime

i find that * is much nicer for working with core audio than *

i m learning * and much less familiar with * but for the life of me i can t figure out how they are trying to achieve the goal stated as build list of encodings sorted and including only those with human readable names.

better if you have a code * is better but is not problem *

i agree some mechanisms in * are slightly more verbose than * function definitions being my personal pet peeve and vice-versa

* has a steeper learning curve compared to *

* is quicker than * but for what you re going to do you re trading speed for convenience - * comes with all the different ui classes list scrollbars etc already there

i can see that my skeleton * module is slightly larger than my * module 66kb vs

but * will be more than * and i use * heavily to validate xml values and i should be able to produce html reports well

some background i m learning * now having earlier worked with * and cl and a little foray into clojure

my impression common * is more for getting stuff done * is more for education and fun

* is a better language than * use its com capabilities to save you from writing endless sketchy * code

but i read in this post that group by on union are not possible yet it mean that * is less powerful than *

* is no better nor worse than * ruby python or any other scripting language in this regard -- they all do basic file operations with equal aplomb

