* is more of a handshake done with the server while * is the actual stream coming in once the handshake is done and you start streaming

in short as an authentication protocol * is far more secure out of the box is de-centralized and will put less load on your directory authentication servers than * will

* is more pythonic than * or shudder soap

anything that you do with * is more or less equivalent with * and neither is really anything but an implementation detail of your soa work

but since * is less secure than * why isn t it the other way around

* is complex to set up and even though it generally is considered faster than * this is only true when you reach a certain limit of simultanious users on your site

* could be considered as a better option than *

for instance zeromq can leverage * multicast to run faster than any * protocol but the application programmer doesn t need to learn a new api

instead of implementing all these over * it is much better just to switch to *

* has bigger overhead than * because it needs to add more data to your payload but you are guaranteed that your data will be received in it s destination in the order you sent it and not corrupted

that among other things is why * is considered more reliable but slower than *

c++ is not my first language and this is small part of code i can t figure out i ve chosen * because it is always much simpler than *

you ve struck lucky with the requirements - because you re going from * - * it s actually a lot simpler than doing * - *

a heartbeat is by nature a connectionless contrivance so it goes that * connectionless is more relevant here than * connection-oriented

* communication requires much less overhead than * due to the number of messages exchanged

the reason * is faster than * is because there is no form of flow control or error correction

btw i concur that * is far more appropriate than * in this case

* just has a smaller overhead than * but that comes at the cost of reliability

this is the reason why * is much faster than *

* is not always faster than *

normally a server wouldn t need to know the client s address beforehand but * s knottier than * the more usual stream-oriented approach to socket communication in many ways

a * stack is considerably simpler than a * stack

i think * will perform better than * gcdasyncsocket in your case video transfer

the key question was related to what kind of situations would * be the better choice over *

i was going through internet and so and understood that web sockets are encapsulations to * which by itself is slower than * ofcourse at the cost of reliability but i couldnt find much info if websockets or * would be ideal to implement such a server

because of * requires connection and provides security it is slower than * and therefore it should not be preffered during a video streaming

instead you can use * and implement your own scheme for verification of data that is less stringent than *

the reason i asking this is because i read * is slower than * because * ensures order of packets

the problem with using * is obviously that it is a lot slower than *

i know * is a safer choice but let s assume i can only use * and i need to ensure i can send packets over at a high rate with no missing packets what should i do

* is significantly faster than * and is why it is or was used for video and various things back in the day

this was surprising for me as i expected * to perform better than *

-- in which scenario configuration would i get * to perform better than *

also see this other so answer about the misconception that * is always faster than *

if you were attempting to beat the performance of * by shifting to * keep in mind that part of the reason you get lower performance with * is because * tracks and redelivers the lost packets for you

getting much more information is needed in the packet header for connection less like * but why the header size of * is less than *

* is faster than * and the simple reason is because its nonexistent acknowledge packet ack that permits a continuous packet stream instead of * that acknowledges a set of packets calculated by using the * window size and round-trip time rtt

* has a much lower overhead than *

from experience i can tell you * is about 10-15 faster than * on dedicated and *-tuned networks

the downsides are that it is unreliable messages can be dropped or corrupted therefore you may want to add some safety and that some isp may restrict * more than * test yourself to be sure but usually there is no problems

in a native application i would use * for the most data player position ... because it s way faster than * and it s uncritical when it is lost

* scales better than * because of reduced states that need to be maintained in the operating system

note that * is more difficult to work with than * because packets are not always guaranteed to be delivered

* is way lighter and faster but somewhat less reliable than *

i know * is faster than * for various reason

i read in a case where a stream of 300 byte packets was being sent over ethernet 1500 byte mtu and * was 50 faster than *

for some requirements * is better for some *

i did some research and found that * may be more suitable in this case because * hole punching works much better than * hole punching

but it sounds like you want to do nat traversal over * which is a harder problem than *

http is an application layer protocol which could be encapsulated with a protocol that uses * providing arguably faster reliable communication than *

i know that in practice this would only happen with a great amount of connection given that processing time of an * connection is faster than * but it could potentially happen

what is that key feature in * that makes it have much much higher throughput than *

also sending receiving data over * is much simpler than over * and it does not require any connections

alternatively it can be used over * which is less hungry than *

first of * s datagram is simpler than * s one

why the header size of * is less than *

it seems like * will more efficient than *

-- does * always perform better than *

what i have thought of so far is that * is going to be more reliable than * and in rmi corba we want network reliability

* protocol is unreliable but much much faster than * which is most commonly used for communication

generally speaking * has less overhead than * allowing you to receive more data but this is not a strict rule and is almost negligible in this context

* is reliable but slower than * while * is not safe and i have to implement my own fault-handling codes

actually we could say that * is a higher level protocol compared to * because * includes some advanced features which might be useful .

in a congested network yes * will send its packets faster than * this is because * takes then congestion into account using a mechanism called congestion control

the package is bigger than * s package but smaller than * s package

but when i used iperf on two linux machines to send data using both * and * i found that * performs better than * for 10mb of data

one often finds the argument that * is faster then *

we propose to use * over * since * is faster than *

short answer if you can tolerance with any packet loss * is better otherwise *

in that sense reliable * cannot be faster than *

also note that it is easy to implement your own stack on top of * that performs worse than *

* sockets have much lower overhead than * because packets are not acknowledged by the recipient

with * its slightly slower than * and has more features

i suppose this is one of the reasons for the misconception that * is slower than *

* is quicker than * but if you re using quickfix you ll be using *

if you can do everything with * it is lighter than *

* is far better at transferring large quantities of data but when the network fails it s more likely that * will get through

* packets greater than the * size of the network that carries them will be automatically split up into multiple packets and then reassembled by the recipient

to send large blocks of data via * you need to chop them up into pieces smaller than the * for the network segment across which you re transmitting them

what would happen if my * package is larger than *

if * payload size is bigger than * size * will silently segment the packet

if there is network congestion rate limiting or traffic profiling or if the * message size is larger than the *

ever since i did sockets programming on a pdp 11 it s been the case that ip fragmentation will take care of the case where an ip datagram such as a * datagram is larger than the * for the segment allows

my lwip can send * packets to pc but my pc would fail to reassemble when the * packets are larger than *

ideally your * frames are smaller than the * for your architecture say 1500 bytes so the messages won t get chopped up in transit

regardless the * protocol is more simplistic in nature can handle orders of magnitude more client connections than * for the same memory utilization uses less bandwidth on the wire doesn t require authentication although you can add this feature etc

you are right that using * is probably better to use for something like this or even an existing protocol like *

* is more flexible than * an application can configure the level of security it needs

there is a limitation on creating virtual hosts for name based virtual host while using * 443 port so if you want to have more than one * port enabled you will need ip based virtual hosting

you could always use * that will work both on http and * websites but loading a * resource is slower than loading a http resource because of the encryption and * handshakes

