first easy one B becomes tedious multiple B mention windows likely create object target B finished copying compressing files potentially 10 gb solution work
regex B slower B hand-written parser
use B follow threading rules hardly likely onerous B enjoy
edit recent B better job always padding powers 2 length closer output B
one good programmer productive two average programmers vaguely remember old ibm study concluding someone top B 27x productive B useful see programmers ways
need draw simple objects poBs lines especially rectangles B float decimal precision matter precision B windows form using visual studio find
typically B use memory B one use largest possible datatype
exact rare platforms range B wider range B exactly representable whole numbers
instead using B instance perhaps might consider using B - built like describe B
element dropped B method never returns 1 always considered B probably screwing treeset
plus overhead extremely costly- B queries hbase cluster least order magnitude slower plain B files
B perform better overhead B lists long
calculate actual minimum B continue sorted maximum B B greater minimum B found far
one B plug one B examine handle requests
know B buggy heck run bugs everyday ill bet B even worse started benefits hindsight couple years B equal greater B keeping basic simplicity well
assume applying B faster B forget able use B entities without issues
simple words operations B causes simple iteratation well lazy B really slower B
especially B green painting B
B slower B 2 slightly slower 1
memory optimizations - phusion B uses memory B unicorn
experience B better performance B
wonder benchmark also influenced installed extensions B really higher B performance
tested B bit slower B usable
pd note B developer tools better complete B developer tools essence purpose
sporadic see happening time B 4.0.1 5.0 lesser extent B
based provided cannot tell B actually load faster B
B like 40px width B columns causing problems
ie8 B better migrated away B would like stick one browser possible
usually use B developer mode already gives even details B
tried comparing two B bug seems suggest multiprocessing B slower B
said date class better php5.3 -- even B subtract functions would also solve better B .
addition need polyfills B complicates matters may handle interaction differently seen using button load B
view B seems lighter B never used either one judge
B sort effective B
noted average performance B faster B
B better well suited different kind application B
B better locality reference B means accesses performed B usually faster corresponding accesses B
taught B almost always quicker B understand debate topic least expected closer
would like calendar display min B date B date date thing greater B min greyed
since container sorted use std B_element B ending first element greater B use std find_if lambda std lower_bound get B
want validate number decimal two decimal minimum B greater 0.00 B B 99.99
think method manipulating dom B easier using regex B
focussing pure client find B excellent html ide - even better B
specification atom B offers value B one internationalization content types things every modern B reader supports
gain compatibility durability B defined things change B include need help
prefer command line shell window open source anyway run builds tests along file name completion using B faster using B
side effect B routines B - B actually faster B
official tutorial bitwise B operators information related operators B left shift right shift
oo class B abstract features B B
B looks fancy advanced popular B supported heroku
- also consider using webm free alternative B better support platforms fragmented B
practical matter B simpler get value straight B rather conceptually complex cadr car B
easiest solution replace B B even features latest B
reimplemented mouse B press release events inner widget order able B inside bigger parent B drop
B higher level also inherited form B const effect meaning effect immutable object
wel used B B say B least 10 faster B project replacement
crypt B simply expensive B
sha-256 uses 64 characters database index column proven B reliable B sha-1
working simple .php files B complex long period loading show B nothing found site loaded
B slower draw B
instead knowing want B columns make application simpler B fields
commits B issue simpler B git B
linux chosen blas B repo likely slower B
B easier implement B
B know memory B earlier allocated B calloc
presumably mac B aligns bigger boundaries spotting pointer passing B correct since wrong alignment
want accept number rather digit number B works better B allows check failures
B components lack combobox available B
observe 7 nodes 1 2 3 5 6 8 9 getting 1 B 7 9-2 score 2 4 7 getting closer 1 B 2
using multiprocessing probably going speed reading data B since B access slower B access calculations
needed lookup repetitions B files larger available B
find working B easier intuitive B
following first answer appears B compliant sql standard B needs group clause selected column want display aggregated function
b use indexes - B bigger repertoar indexes B use - gist gin indexes
traditionally B fewer security issues B well
wiki B better B
want open source B smarter B well
separate x axis distance comparison distance smaller B x distance smaller B collision
approach work B container larger B child overflows parent demonstrated following snippet
screen layout changed landscape know B smaller B longer landscape mode
B greater B simply rows used columns must always used
somethinghere solution bad screen B greater B image leave 20 white space top bottom
specifically image B greater B generated B resulting .png B generated B slightly smaller
managing content via B better approach really need know B
idea B 3 larger B thinking achieve overflow-x auto overflow-y hidden shown example second row 6-th column website
next tried look actual screen size assuming B greater B landscape mode
long ratio window B B greater image B B issues window ratio smaller image ratio see whitespace
implement getscrollabletracksviewportB B return B B parent B B false otherwise
portrait view B smaller B
photo vertical orientation please notice B higher 6000 pixels B 4000 pixels definitely vertical photo
diameter dot shall exceed half B aggregation diamond shall larger B line
current rotate crop edges B larger B
thought use another image source slider B window greater B
shrink B image B gets wider shrink B image gets shorter
B B leaves B 4 units scales B maintain correct aspect ratio
basically small medium sizes vertical layout B bigger B
image B greater 250px resize B 250px B auto
found comments references seem indicate setting B greater B cause browser change orientation automatically testing works used work anymore
according experience B easy use pros cons every framework used B projects think B better B
performance B field constant better B
B B load button B .thanks
framespace B becomes smaller B manipulates view adding uinavigationbar 44.0f size
B faster B + memset B knows mmap pages pre-zeroed memset forces allocation physical ram
would better use B B unless want zero-initialization B faster B
actually calling memset B closer calling B suggest
B safer handle soap request B data returned may longer 32767 bytes
think B equal better B
mind customizing css B significantly easier B simple control markup
going high gives error B constant larger largest B B type
far compiler concerned conversion B 0 B int better conversion B 0 pointer
object B type int signed int whose B rank equal rank int B int bit field type _bool int signed int B int
also look B safer version B
B display fonts without specified size significantly smaller B
however B landscape mode listview taller B
B supports 100 levels nesting B documents
B supports 100 levels nesting B document.
non-unit testing B might better B
B gives smaller latency issues discuss course B gives bigger latency
directly say B faster comparatively B used applications
know B faster B various
decision B protocol used connection oriented network secure B
example big phone small Bh B B centimeter pone B
viewed B wider B responsive according smaller B size like
B powers two bitshifting usually little clearer B though choose whatever works
also try sklearn.linear_model.logisticregression sklearn.svm.linearsvc implemented using B scalable B albeit memory efficients linear models scikit-learn
though unrelated actual B generally slower B least unless really need keep small B almost certainly better
B indeed yield considerably faster result B
either example numeric expression would multiplying 3 first B higher precedence B subtraction
lone exception B older mysql storage engine support transactions prone corruption generally tends perform worse B
pure speed always B faster B experience tends faster pure read working environments factor 2.0-2.5
edited add B faster B simpler
also use compression tables keep smaller B vastly better B data integrity
thread came know B faster reads B faster writes
oracle B better removed B 8.0
iterate B already found B p
B maximum value 32 bits mine 5 B
however B long 1.21x faster B short
tried getsubstring long B works strings smaller 4000 B
multi-character-constant literal B uses character-literal-syntax one B implementation-defined value
allowing instance enum smaller takes space like B may smaller B usual
B become arbitrarily large clojure resulting number becomes bigger every B thanks
firs one common works systems size B greater size B
see absolutely write like since B main shorter 9 non white-space B vs 15 concise perfectly valid
value8 promoted B assuming conversion rank unsigned B lower conversion rank B usually platforms
B signed B unsigned B narrower B 1 2 almost always promoted B
longer string B larger otherwise compare B order
putting B Bo B - B B wider range B fit
let assume minute using unsigned B applies larger B course
means num B better num B first overload better match selected
still iâ facing issue inputs given showing #### B exceeds 4 B
first B array greater 8 bytes use directly 64-bit B
B flexible treated entire object responds B methods plus
B selective actually writes writes new functionality especially light B promises nothing
watch query B 1 B like jql
one camp notably linux kernel thinks B clearer B
- B seeing one object greater B another
note use std B safer convenient std B B
article sounds like B database B database
B really better B
B claimed faster B although modern versions B also fast enough
B 1.6.0 B maximum 1.0.0 inclusion
first run query find min B security id find difference min B finally find value 10 B like
understand B popular B among users 18-bit architectures since word would exactly 6 B digits
apparently B format popular B format
said B like almost always faster B like
makes B generally slower B due overhead running
#footer B 800px #container lose top B value touching #footer continue scrolling page without floating div
keith pointed B powerful type system also said B powerful module system B
lwip send B packets pc pc would fail reassemble B packets larger B
prefer using B instead foreach B B preferably faster foreach B element solve using index follows
reverse B generally faster B well
think best use B gives little bit control B
specific situation B better B
came across situation need implement B one B control variable
said really getting unexpected behavior ran eclipse intellij ide always got B approach faster B
B operation uses clock cycles B processors
would like B pow evaluator higher precedence B divide
B sub cheaper B better throughput lower latency
know B faster B functionality add border writer update already existing spreadsheet
pattern scanner supposed regular expression describes characters want included token repeated one last part words may B one B punctuation etc.
awk uses comma surrounded 0 B field B
B faster -- outputted file sizes significantly higher B
B approach seems efficient far amount simplicity understanding makes wonder B would use promises simple fast
data disk B faster B cause better disk representation
get similar highlightings B B ubuntu
stackoverflow search indicates turned setting setopt nonomatch B behaves like B glob pattern pass program match found
B programming always simpler B programming
know general set range B Bs B Bes intersect circular nature degrees makes bit complicated
likely tm2 value larger B int32 value lower B int32 value...i would add check like.
total number odd B heap one element B heap
inclusive false B B
2 also notice inverse Bimum value double precision type bigger B value inverse B value inf bigger B value
note let B B value lett B B
B zero one B value first possition 0 second 1 last one B
say model B B properties want ensure B B
thought recursive cte first query pulling B date patient union table date least 30 days greater B patients cte date B join statement
would like column extrema dataframe beeing B2015 B215 bigger B smaller B2015 B2015 smaller B
two dropdownlist supposed age want make cant make B age higher B age
B verbose express B number
B looks really good works almost 2x faster B data.
B behavior need B
B performs better nashorn performs better B
said think B better every respect probably start new project B
B stores binaries efficient B info see B-faq
little B aspect treated worse B
without parentheses math.exp b executed first B higher precedence B -
B better binary search B searching
B one number operations far computational complexity theory concerned expensive B
need use tolist convert B B interface supports functionality B interface
old thread experience writing server-side B somewhat easier trying use B - B really B application sitting lync s4b server rest wrapper
think a.__init__ B x better B .__init__ x supports multiple inheritance find B
believe B smaller B wheezy smaller still even alpine tiny start point
B nicer frontend could suitable windows emigrants B backend guys
well B right B weblogic business-bean-classes ejb-local-interface
finally done animation think entirely correct - B provides animation support B especially animated transitions
came B B little bit bigger documentation easier understood far found programmers say B alot better B
servers like lighthttp B handle large amounts traffic memory B sacrifice B power flexibility need things often
B simpler faster B used
B secure B showing information anywhere
try B categories ones 1 B
answer part second .net B larger maxrequestlength part .net configuration smaller maxallowedcontentlength part iis configuration create custom http module B portion B came
another rather minor one B easier exploit B ways trigger B request trigger B request
said B lower initial learning curve B specifically designed learning tool
2 readability content passable slower average B faster B
unfortunately dont understand mean stating B smaller B
B better B easy resize
B introsort comparison-based sorting algorithm common B
keep mind B color palette smaller B
might help reduce B file sizes smaller oh believe -depth 8 used B images
like asking whether B faster B
right would say B method better since works could B webservice work
count B number sequence 2 B different series add series dataframe
joe duffy blog implies using B efficient B
B really seems faster B json
default psycopg2 uses B libssl seemed keep dependency old B longer existed B
B rule detects older B shows custom dialog
B probably better B
since B better use B counter variable starts 1
B adequate simply iterating B string
need perform several device.touch events fast possible however B seems achieve significantly slower B
far know B complex slower operations like B incorrect
personal benchmarks B undeniably faster B due lazy loading
still B get range though ought faster B least
almost fail B considerably slower B since end selecting thousands
lines shorter output B frequency lower used B line print deliberate help message
would like able let B one B
words B row one B sending fields child B data duplicated B
B already 1 B
actual size B B B expected number B originally read file push B back onto stack
B belong one B
thought using pairing function makes B exponentially bigger B splits integer overflow
secondary sorting orders id B id happens higher B B may show top B
one B resource one B one attrbiute one B attribute
exactly drawing conclusion B faster B
last resort resolution suggest security issues using B always safer switch registry use http instead B
today B comes full-fledged dependency management implementation longer builds upon B except traces removed yet backwards compatibility
confirmed debug mode B version slower 130 âµs vs 60 âµs B version
building simple demo rendering mechanism B better B takes care details B would otherwise require
however developing serious application B likely tool need use B abstracts real application would normally want
server side using B nothing socket B factory
compute length string unrelated length string resources unclear whether B better worse B
even underlying implementation different B faster check copying B stop copy end string character null
batch file needs run windows vista later use B instead even powerful tool B built operating system
rm -rf B also works faster billion files one B
B containing 1000 B
functionality B advanced better features B
2 location + reverse B - seems reliable requests location services device work wifi tablets enabled requires time fetch location b server call reverse B
platforms B larger B obviously false
contrast void doitagain B specific void doitagain B B subtype B according jls
note B trickier B
also use math.floor B get closest B B
B contain larger numbers B long
since B precise B thought needed cast parsing Bo method
B higher maximum presumably lower minimum B conversion necessary experience side effects assigning B B need error
largest B value also larger largest B would long
systems B smaller B likely cause crash
B 1 typically larger B 2 Bernal structure
vararg functions prBf B smaller B promoted B floats smaller B promoted B
versions using diff especially impacted ave_diff B constants 2.5 faster B contants version
second thoughts B surely better candidate B
B better B
one B plug one B examine handle requests
seen B uses static method dispatch B unless class dervices foundation nsobject prevents style swizzling based remapping method implementations runtime
multiple B slower B
B print readable compared B
making B one B mind
make happen minimal project B nothing call super B
B side linq works in-memory objects already heap almost certainly perform better B side exists translated native query like sql
although B better browser developers B cause gives tools work
B bit forgiving B
also B map function 2x slower B machine
ellipsis still wraps B user friendly B adding .
B console gives information B console
though design perspective may easier simply add extra 5px width designing worst browser prevent wrapping B worse extra space B ie
suspect may ie B need know content div earlier B
learned partly trawling site B security fussier loads correctly without errors B ie find resources loaded non https source
since logic thought evaluating B objects takes time B equivalence 1 false 0 therefore came following benchmark turns correct
found B 2 features like B also tm v2 beta
site claim B 6.3 faster B
B simpler B implemented even efficiently places strings known properly aligned
issue drawing big B B B 65536 vertices B uint maximum 65536
quite work B works even worse B
radical concept know B slower B shortcuts
short authentication protocol B far secure box de-centralized put load directory authentication servers B
know B faster B fetching keys single server
need cryptographic properties non-cryptographic B B cryptographically secure B broken prevent good B still strong enough uses likely performant
got work using child process B flexible B
tried B B smarter B aspect
another B like even B - dry
kind processing easily done B expressive B
already said B replacement gnu make B primary buildout dependency-management application
working simple B project get acquainted B hit small road
edit file B larger B in-memory representation easily become larger available B
one B read - since B slower B -
B means B access
B io - even ssd - orders magnitude slower B hashing going though
remember tuples saved B vastly slower access things B
lob-storage B time query execution need read B course slower B
enthought-dev B faster B
measure properly see essentially difference B microscopically faster B example well within noise
B also appropriate B
use B need transactional access one B session
B bit taller B add padding margins bottom B get align look like B B horizontal centers aligned
B bigger B want center B top B vertically horizontally
button bottom constrained bottom B however top constrained bottom subtitle B subtitleB taller B
B text longer cardview length shows B want
also B bit robust B free
considering B research suggested B better support changing schemas along B
simple performance test noticed B slower B
need spatial data capabilities postgis B better B
one colour want selecting use radio B instead would better idea B
want users select one perhaps dropdown radio B suitable rather B
image shows want make next B enabled one B get checked
recently got error tomcat 7.0.21 windows 7 B contained Bs duplicate class definitions class defined 1 B within B web-inf lib directory
equal B bigger set 100 set B auto whereas B greater value set 100 B auto
i.e max-B kicks image B greater B B calculated proportionally
need display photo fill full B image higher imageview B scroll
landscape B bigger B
think situation like map widget get added panel B B greater B B map widget
best could come would scale line fit inside paper based B path assuming B B
top image 100 B browser shorter 100 B browser content peeks little bit tops two images showing
B greater B set B 100 css B greater B set B 100
issue image B greater B white space left right image see attached however B fine
however image B far smaller B image centered crops top
playback first check orientation measuring B B B longer B rotate textureview 90 degrees
div B B greater img B B.
B greater B landscape orientation converts values landscape column json
landscape B bigger B set top bottom 0 ratio 1 1 center horizontally container
create new transparent png white 200 200 place newly generated image apprioriately i.e B place vertically centered B place horizontally centered save file
would like somehow fit image scale normally without setting fixed values B B B bigger - scale B B bigger - scale B
particular thumbnail like B greater B want go new layout
crystal report set user defined size 4ã 6 sets page landscape B B due printer prints page landscape mode want portrait
struggling sometimes B bigger B sometimes B bigger B
application rectangle google map certain point rotate rectangle along vertices well editable B rectangle always greater B
may want check B greater B
fullscreen image standard 16 9 scales proportionally unless users B larger B
ios emulator works right B screen greater B views frames bounds shown
create new class last image called landscape2 jsfiddle last image one B value higher B value
currently using element padding-top 56.25 works respect B outer div overflows outer div B larger B
768 1024 B longer B
image restriction documented least found aspect ratio limit 1 3 B bigger B image
stretch B larger B crops image even switch object-fit contain
B greater B landscape
images B side larger B resize image B matches divs B hide B overflow vertically centering
recently found applies image whose B larger B
want array contain books id B greater equal B
whenever resize image desired size whe B greater B proportions get screwed
window B 1280 would like value B 515 1280 would like B 615 B 480 make B 715
idea B 3 larger B thinking achieve overflow-x auto overflow-y hidden shown example second row 6-th column website
- B portable B
wish program B B faster B
B operator occurs within second brackets higher precedence B
edit expert think members new array initialized 0 null B correct B
meant ask argued B wider user base B even argue stop using B altogether like
mercurial significantly faster B slower B though smaller difference
total width button B web inspector 6px larger B web inspector
also found B ides user-friendly B plt B good one
know achieved B experience easier B
B easier B
experience tell B 10-15 faster B dedicated B-tuned networks
B popular nat punching provides better results B
4 B slower B
B - reliable B comes overhead distinct connection better match games require frequent data transmission turn based games game
B 8 larger B
needless say B product one B kept producthas table
2 used link1 link2 B duplicate users existing one B
edit 3B better B sense significantly secure still secure B performance necessity significantly worse B B twofish essentially applying B three
B faster B
B supports longer rows B
learned B uses memory at-least reading B engine trying change default engine mysql use B
B perfect since database almost used reading B significantly faster B
B uses memory B actual data files often quite bit larger B
mostly B better B
using B suggested documentation B lighter B hundreds
want add B inside B B smaller B
B fancy wrapper B bringing uiresponder events animation conveniences among things
never performs arithmetic computations withing domain B short type smaller B
instance architecture B 4 bytes must 4 byte aligned B poBer could two bits smaller B void poBer
use B x x 4 B shorter B one
B smaller string even string empty B smaller reference B plus B offset length hash
multiplication part variables operands get promoted B conversion rank unsigned B conversion rank B end equivalent
B value one digit never expect single B hold
cast value B one terser four B
tried getsubstring long B works strings smaller 4000 B
data setter script generated automatically chose B B take space B B .c file
B comparisons efficient simpler unicode B comparisons
copy B larger B like short long make correct byte order depending cpu architecture
B one B
guessing happens size B larger B memory controller thing controls memory -i know technical term move larger distance
B execution faster direct execution statements B three four statement compiled statements B directly compiled time B
however B specific functions data members accomplish specific task B
B better B
also noted B work somewhat differently usually better B
B community smaller provide tools B
B became slower B uses proxy os widgets
want graphic user interface use B B B better B
particular set hyperparameters B closer B response maximum
B common use B already mentioned jeff foster
shows B faster B
B generic B preferred
treating floated ul position absolute B equal negative top B containing parent
threads B granular B B+
bad use B little tamed B like B end loop
B strict B learning
worst B actually worse B mergesort B faster average
experience B slower mongrel slower B
also B readable B puts B variable manipulation one place
incrementor B 1 endless B
nested B version slower two due extra overhead B
therefore parfor B simply must slower B transmit data workers operate
style B better fit B used earlier
B still somewhat expensive B modern computers compilers go effort replace one two shifts+B instructions
want allow integers B one B indentation depending want handle tabs non-newline whitespace use complex B
B also seems faster B using better multitasking
make B accept one B div
seems like B element including margin bigger B element therefore dropped status set although element seems touch upper B yet
B div 3 bigger one B
big surprise B better B
B work incorrectly greater zero B - zero
events start landing table1 confirm B created_at table1 B created_at table2
B greater B alert message.
keep Bd new B value larger either current slider value B value render remaining two updated accordingly
find interval find lowest number higher equal B using map.lower_bound find first number higher B using map.upper_bound
could iterate objects find current limits 9B B could even calculate measures time sth smaller B happens store new B
B value set B value + 100 happen B B B B like said
- preceeding symbol template expected appear exactly Bimum B B
also record edge function produces value greater B B you.will.know.about.it
notice B smaller B due nature formula
enable user download B patch smaller B package entire product
mean think B smarter even need B
similarly B gains methods B superclass order named precede
B behavior need B
finally consider one B well one B running B
obvious B would efficient B
remains b changing say loop clear change two iterations instance const variable original version execute faster B cheaper B assuming compiler moves computation 1 .
B faster B accurate
therefore conclude B faster B
floating point B faster B speed relevant
B often slower B performance critical might keep table powers ten reciprocals
recent benchmark B 2.5.2 running 7 B slower B faster cpython
B might better B B since reportedly faster 2009 stats still correct
read B control plays nicer B
however could find documentation may B B
key-stretching algorithm like B applies quicker B like sha512 thousands typically causing B generation take 1 5 second
B bells whistles B
work specifically B specialized B
another suggestion change keep extension method collections B abstract B
override B level lower B level either private set internal set
B far conservative B get closer bleeding edge
also requirements B suitable B
B better handling requests since spawn new process every request unlike B
also makes B better B
unless know exactly use B one B
done go security details B slightly secure B - see comments details.
example shows B secure B think would good idea choose B B attack
B little complex B though
asked apply actions one mvc project security says B secure B disagree
maybe would mostly always choose B B tidy refreshing going back issues B method thing past major browser ask want resend data
however comparative table linked B listed secure B
B bit quicker B ajax
effect B secure B
another rather minor one B easier exploit B ways trigger B request trigger B request
answer part second .net B larger maxrequestlength part .net configuration smaller maxallowedcontentlength part iis configuration create custom http module B portion B came
considerably facebook states documentation least looking date however count seems B 50 B
answer klochner seems quite popular familiar B seems heavy complex B
think bignum B little slower bignum B
sriwantha B simpler framework B
afaik B slower B
B least experience general B hmisc
noticed however B sensitive memory leaks B
general B achieves better compression B plus things like download size bandwidth resource usage
immutable B implementation faster pure usage B implementation
performance B better B
run 5.2+ use current phpunit B definitely concern first general recommendation find issues 5 B might bring
may help confused B hdf5 familiar B like
running application B 7 B 12 make soap call B restrictive B
think use B better B ubuntu
simplified version actual B larger use B get every index
try catch inside B probably closer long mind unassigned values left B
looping B nothing basic iteration B using B
iterating pair-wise normally like iterating B faster using c-style B
ie B slower browser B
yet figured whether writing sloppy B perhaps forgiving B B
B section create 1 B
using B 3 better B 3 things like strlcpy 3 better still
general B safer alternative B
going use B use B bother - B better B B
since package B accessible B reducing accessibility foo method
oh see need constructor access B B
B 8 well B cs3 windows pc familiar B
B height greater B container
unfortunately work B one B
check divs B 3 B
individuals subject crossover B likely worse either B
also removing B directory trickier might seem need make move bottom tree files first rename directories till done B
B z-index lower mask B always behind mask
heap data structure maintains property B B B greater B
understand B cannot higher opacity B possible workaround
B greater B
course two B generate two B
B lower z-index B
inheritance father access methods B better inherit implement new methods nothing B child class
almost working B divs bit wider B getting wrong value offsetwidth
B also -webkit-filter npx filter gets applied twice child B
simple asuming B always higher id B
collapsible panel designed B green wider B red
B equal smaller B
also B recognized slower B
know sinatra B footprint speed really better B
since B newer B one would naturally assume powerful
vB reg virtual B registers exist processors things like multiple cores B features enable higher layers believe one B present -- today x86s
