{"software": ["* has clearly cheaper tco and technologically superior platform * is a bit more polished hortonworks for pure open source don t read this as free or cheap as most companies end up spending more money on hw to get any value\n", "alternatively * looks simpler than * but without some of the flexibility\n", "from my experience * 5 is faster than * 4.2 rc3 and has better smp performance\n", "* has more features but costs 80 * on the other hand is more basic but is free for most users see * licensing faq for details\n", "i am not sure if * server will be much better than *\n", "* is slower than *\n", "im trying very hard to like * but so far i find it so much worse than * in so many ways\n", "even though * has been faster for me i still use * because it s good enough and is free and im cheap\n", "however i found that * is much more stable full screen resolution much much better to handle the iphone connection via usb and i didn t have yet any crash when on * it s quite often\n", "* free but less powerfull than *\n", "i really miss this feature on * because i find * to be bloated and it slows the host system down much more than * does\n", "fwiw i have never gotten freebsd to work properly under * perhaps if you need that you would be better off with * which does\n", "in my experience i ve found that * seems to be faster than * although i don t have any hard data to back it up\n", "however i wonder if this is the best way of doing this if you want to observe specific behaviour you might be better off isolating a specific input file and debugging against a local pseudo-cluster and if you want system * you could do worse than give * a lookm as it is pretty mauch already built into hadoop\n", "i think that s why i can t use to launch my project this way works but * way is better because everything including the main_class is described in *\n", "yes some functionality possible only on device but you can try also * app player which has more possibilities than *\n", "2 if your host machine laptop doesn t have more ram then you might want to find alternative * like genymotion * which takes less memory than *\n", "in xda-forums i read about memu - most powerful * for pc better than *\n", "this * works better than *\n", "we started with ehcache * server array cause it s well-known backed by * and has bigger community support than *\n", "i mostly work with esri software though i ve had a little bit of work with * mostly for clients whose engineering departments are using cad more than *\n", "i think the preview function in * is more well than *\n", "* is definitely more advanced in this because with its web interface you can customise almost everything but * has other advantages\n", "i ve found that * was slightly faster than * non * image but i still use * the majority of the time because i like using the host os for things like mail chat browsing\n", "many other * software that works just as well if not better than * like avg avast and others do allow you to uninstall from the add remove\n", "conceptually it seems like a type of central authentication system * but is more similar to * also a federated identity management system\n", "the * one has less queries used only 14 on average but it runs slower than * with more queries used average on 20\n", "the * which has less queries runs slower than * with more queries\n", "either way * is easier to maintain and more up-to-date than * see how do programs like * work\n", "i know * better than *\n", "* which is no longer in active development and you should be using * but this answer applies to both of them stores each user s public keys in in your case * .ssh authorized_keys\n", "* is maintained has a dozen features more than * and the author actually responds to emails\n", "* is far more advanced than * and is quite easy to install directly from your workstation based on ssh communication with your git repository server\n", "that being said i find * much more complete than * like all those recent blog posts illustrate\n", "for this the best option is * better than *\n", "microsoft has the microsoft speech api sapi however if you want simple * it is better not to reinvent the wheel and customize an * implementation which i guess falls under the great * library for c++ category it s c not c++ but if you know c++ you should be able to understand the c . using *now you may not even need to write any custom code it may do what you want already\n", "can a * section create more than 1 *\n"], "algorithm": ["furthermore * is much slower than *\n", "* is more expensive than * for example\n", "des is the least secure * is better but i d go for the *\n", "should be as fast as * * turned out to be much faster than * in software typically 5 to 10 times faster\n", "* uses about 30 less comparisons than *\n", "why is * better than *\n", "the biggest difference that can be produced between the two of them will always be to * s detriment and it involves lists that are already largely sorted or contain a large number of ties when * does better than * the difference will not be nearly so great\n", "when comparing my * implementation with std sort on my compiler and my implementation of * i noticed an odd pattern on large data sets when operating on 64 bit integers * is consistently faster than *\n", "to be specific the * runs faster than * in the first test case and loses badly in the following 9 tests\n", "also note that * is generally more optimal than * see this as well which explains why it s taken advantage of when sorting primitives\n", "i do know though that * has more compares but less swaps than * which i learned from another stackoverflow discussion * vs merge sort\n", "is * always better than *\n", "this means that while the two underlying sorts it uses * and insertion sort are both worse than * for many kinds of data timsort only uses them when it is advantageous to do so\n", "normally * is faster than * which is faster than heapsort\n", "* is not better than *\n", "* is more sensitive to input sortedness in a positive way than *\n", "for example locality of references has influence on cache hits or misses which is the reason why * performs better than *\n", "* is worse complexity than * in the worst case.\n", "* consistently has less recursive calls than *\n", "it might be helpful to see why * is usually faster than * since if you understand the reasons you can pretty quickly find some cases where * is a clear winner\n", "* is also more complicated than * especially if you want to write a really solid implementation and so if you re aiming for simplicity and maintainability merge sort becomes a promising alternative with very little performance loss\n", "you can also see that for smaller collections * is faster but then * takes the lead but all of this is case specific so take your time to study all 4 algorithms\n", "* may use more space than * i m not entirely sure and merge may be better for linkedlists\n", "an interesting answer about this can be found at why is * better than *\n", "purely in terms of the number of comparisons performed is * always more efficient than *\n", "* usually is better than * for two reasons\n", "* is not better it is well suited for a different kind of application than *\n", "when comparison function is a callback function like in * libc implementation * is slower than * by 15 on random input and 30 for already sorted array for 64 bit integers\n", "* is more natural to implement for linked lists but you can do * very nicely\n", "previously discussed on so why is * better than *\n", "* has better locality of reference than * which means that the accesses performed in * are usually faster than the corresponding accesses in *\n", "however on smaller int sizes * gets slower and * gets faster\n", "from what i ve read i was expecting * to be faster than * but on my code it is not so i assume there must be a problem with my * algorithm\n", "the * algorithm is faster than * which is what sorted will get you when called on a sequence of objects via java.util.arrays.sort\n", "* is usually faster than * just because it s easier to code a tight implementation and the operations it does can go faster\n", "for instance * can outperform * although * is provably better than * in the worst case\n", "technically * has a better time-behavior \u00ee nlogn worst and average cases than * \u00ee n 2 worst case \u00ee nlogn average case\n", "* - in general * is consistently faster than * however * is done in place and doesn t require allocating memory unlike *\n", "* is implemented well it is typically 2-3 times faster than * or\n", "given that it is possible to vastly reduce the likelihood of the worst case of * s time complexity via random selection of the pivot for example i think one could argue that * is worse in all but the pathological case of *\n", "i have read that * is much faster than * in practise and the reason for this is the hidden constant\n", "i know * is better since it is stable and doesn t have n 2 as worst case but i required to implement *\n", "as many people have noted the average case performance for * is faster than *\n", "scenarios when * is worse than *\n", "that way * can reach recursive base case more quicker than *\n", "* generally runs faster than * but under some circumstances it can degrade to quadratic running time\n", "* is approximately 40 faster than * on random data because of fewer data movements\n", "that s hard to say.the worst of * is n log2n -n+1 which is accurate if n equals 2 k i have already proved this .and for any n it s between n lg n - n + 1 and n lg n + n + o lg n .but for * its best is nlog2n also n equals 2 k .if you divide * by * it equals one when n is infinite.so it s as if the worst case of * is better than the best case of * why do we use *\n", "* is slightly slower than * but it does not have * s susceptibility to pathological cases\n", "i ve looked at the question at why is * better than *\n", "i have been testing the practicality of openmp gnu parallel sort algorithms in the c++ standard library and have found the parallel * algorithm to be significantly slower than the * algorithm\n", "it s because that * is generally faster that people use it instead of *\n", "depending on where i look people say * is faster than * due to its locality of reference cache hits etc\n", "i had been taught that * is almost always quicker than * and i understand that there is some debate on this topic but i at least expected it to be closer than this\n", "interestingly * performs more comparisons on average than * - 1.44 n lg n expected for * versus n lg n for *\n", "parallelizing * is simpler than * in-place\n", "i would say that the * is simpler for parallelizing than the *\n", "for the 10 tests on the same list the results should be quite the same at least all showing that * is faster than * or vice vesa\n", "in most cases * will run faster than * even though the worst-case execution time is longer\n", "i personally would use * for my encryption as it is lighter and more secure than * in fact i think it is the de facto algorithm at the moment\n", "but * is older and weaker than *\n", "the only issue with applying that technique for the single source shortest path problem is that reweighting with * takes o mn time which is slower than * s o m log n\n", "after a lot of googling i ve found that most sources say that the * algorithm is more efficient than the * algorithm\n", "since a proper implementation of * is faster than * use * unless there are negative weight edges in the graph\n", "* as suggested in your question tends to be slower than either * s or a - it is primarily used when there are negative edge-weights which there are not here\n", "but under what circumstances is the * algorithm better than the * algorithm\n", "in fact i think it is fair to say that * is more similar to * because of its use of iterative relaxation\n", "however if g is guaranteed to have only non-negative weights g is non-positive weights then * s algorithm could be better choice over *\n", "surely there is some situation in which the * approach is better than the * approach\n", "* has signature that is independent of key strength and is much smaller than * signature for equivalent security * 1024 1568 vs * 192\n", "a * signature generation could be somewhat faster than a * signature generation maybe up to twice faster\n", "however * verification expect verification calls to be 100x issue is about 10x slower than * verification\n", "that continued usage of 1024-bit prime field elgamal or * keys is much riskier than it is for 1024-bit * all are still commonly used because once a successful attack has been conducted against a single well-chosen prime field all users of that prime field may be affected at little additional effort.\n", "i guess * is older and * is newer\n", "however in this case * key size is less than * key size\n", "use * it tends to be more compact than *\n", "* is also a better choice than * because it has much better breadth of support for signatures still considered secure by nist\n", "* signatures are signficantly shorter than * ones\n", "i have made some testing and it came out that * is lot slower than *\n", "this is why * is much slower than *\n", "but * is assumed to be on average somewhat slower than standard * quicksort\n", "then you use it as seed in * which is less good that one is a non-cryptographic * and its output may exhibit some structure which will not register in a statistical measurement tool but might be exploited by an intelligent attacker\n", "but a large period * takes up more memory for maintaining the internal state and also takes more time for generating a * number due to complex transitions and post processing\n", "the non-* * behaviour is more a reflection on the quality of the rand * \u00e2 it is often not very good\n", "* tends to be slower than * for the same reason.\n", "what baffles me is that my * seems to be slower than * in both of the languages\n", "normally quicksort is faster than * which is faster than *\n", "typically * is slower than * and quicksort but that s usually under the assumption that comparisons are fast\n", "if you use * no extra memory is needed at all though * will be much slower than *\n", "* code is 8 times larger than *\n", "by comparison * see section 3.2 and other block ciphers are much faster than the * algorithm\n", "i ve read that * encryption is more secure than the triple * encryption ms is using in their example above\n", "according to this analysis * rijndael-128 is more than twice as fast as * 3* with a bigger key size more secure\n", "which steps of * encryption makes it less vulnerable than *\n", "* can be even much faster than * or 3* when the cpu supports *-ni\n", "turns out this was a hardware failure the * commands need more power than the * crypto1 ones 50 more which the antenna failed to deliver at the reading range i was testing with\n", "if you used * then you might see a better speedup over the * 3* observations\n", "edit 3* is better than * in the sense that it s significantly more secure but still less secure than * but its performance is of necessity significantly worse than * * or twofish because you re essentially applying * three times\n", "using * assuming it s a little faster than * and requires a smaller key and\n", "if * is negotiated it s faster than * and 3* used by default by older applications\n", "this shows that the timings are sensitive to buffering and that * is faster than *\n", "* is usually substantially slower than * on modern hardware and has keys that are far too short for modern use\n", "note that the effective key size of * is larger than triple *\n", "also see why * is more secure than *\n", "* will indeed yield a considerably faster result than *\n", "though it s unrelated to your actual question * is generally slower than * at least in software so unless you really need to keep the key small * is almost certainly a better choice\n", "* turned out to be even slower than * but for my current requirements a much simpler algorythm rc4 is sufficient\n", "because * runs in time o mn the overall asymptotic runtime is still o mn + n 2 log n so if m o n 2 note that this is little-o of n this approach is asymptotically faster than using *\n", "the capturing group 1 in the first pattern is * it first matches everything and takes as less as it *\n", "since the next is not far the number of * steps is much fewer than with * matching\n", "asymmetric encryption ex * is no more secure than symmetric encryption ex *\n", "asymmetric key encryption ex * is no more secure than symmetric key encryption ex *\n", "that is actually not the case with * which is --- more so than * --- just a math equation\n", "there are two reasons for that performance * is faster then * and resources * is less resource hungry than *\n", "execution of * is more faster than * for same key sizes\n", "the whole purpose of using * to secure the communication or any symmetric key encryption is that it s a lot faster than * or any public key encryption\n", "so the 115 seconds will be reduced to 3-4 secs plus the encryption decryption time used for * which is much faster than *\n", "one of the reasons to do so is that * is much slower than for example *\n", "* is much slower than *\n", "note however that doing so means that each encrypted chunk has its own padding and that * is much more computationally expensive than *\n", "considering most * moduli are at least 1024 bit this will be much larger than an * key\n", "in your particular case an * key of 2048 bits has a lot less strenght than an * key of 256 bits\n", "and regarding your first question it is definitely possible to encrypt decrypt messages directly using * there are only technical and performance reasons * is much faster than * why * is used only to encrypt a session key and * is used to encrypt decrypt the messages themselves\n", "the * key is encrypting much more data but is much faster than * encryption\n", "like you heard asymmetric cryptography like * is much slower than symmetric cryptography * but it does have it s advantages simpler key management a single private key to protect\n", "but if you use public key encryption to encrypt messages you are a limited to small messages -- a 1024 bit * key encrypts less than 128 bytes and b going to pay in performance because public key encryption is much more costly than symmetric key encryption such as * encryption\n", "algorithms like * are much less user-friendly than *\n", "block crypto algorithms like * do suffer from this problem too but without a pki * is no less safe than *\n", "as far as efficiency * is going to be orders of magnitudes slower than * so the trade-off you make is that you give up simplicity you give up the simplicity of using * in favor of some * chunking in return for poor performance you get the slower performance of *.\n", "while 256-bit * might sound less secure than 4096-bit * they might actually be quite similar from the offered protection\n", "it shows that * encrypt is faster then * encrypt\n", "how is * less secure than * in this scenario\n", "1 * merge sort is used when you want to sort a list in o nlogn time while using less space than standard *\n", "* is more difficult to implement * but the out-of-place version is very cache-friendly - i suspect real-world implementations accept the o n space overhead - ram is cheap but memory bandwidth is a major bottleneck so trading memory for cache-efficiency and speed is often a good deal\n", "another reason is that * needs more memory because it s hard to implement it as an * sort\n", "each iteration in * is a lot simpler than *\n", "however * is somewhat slower in practice on most machines than a well-implemented *\n", "i was just going to say radix sort however that could be a bit above what you were looking to implement introsort is generally the accepted sorting solution for data it s a variation of * that switches to * when it reaches smaller sets as it s faster on smaller sets than *\n", "because * is actually slower than * for each n\n", "if i do * i can create the stack while i m sorting but would this be faster than a * and then build the stack afterwords\n", "for example * is faster than * in general although their time complexity are the same\n", "after several tests i found out that my * is way quicker than * i think it should be the other way around my selection sort is also faster than insertion sort\n", "so for even small inputs * does less work than * and is physically faster for every n\n", "why it is said * has better constant factor than * and therefore * is better than * in average\n", "it is a variant of * which is particularly suitable for the sorting of very large amounts of data if a relatively high cost per compare operation is needed and on average better than *\n", "* also has a better cache access behavior than *\n", "for example * average cost t n.log n and * average cost t n.log n are both sorting algorithms with the same average cost - yet * is typically much faster than *\n", "however * s worst-case performance is significantly worse than * s is\n", "so for instance * is faster than * in the worst case but slower in the average case\n", "however * is slower than * in the average case in the sense that * performs c n log n whereas * has d n log n performance with d being significantly smaller than c the numbers c and d are constants\n", "but there are many citations of real world tests which show that * is significantly slower than * on average\n", "in other words the per-comparison-overhead of * is higher than the one of *\n", "what makes * faster than * in practice is its constant that was ignored by big o analysis\n", "this is because * is generally faster than * unless the call depth becomes to deep\n", "average asymptotic order of * is o nlogn and it s usually more efficient than * due to smaller constants tighter loops\n", "* has higher overhead than * but its worst case is o n log n vs\n", "you can indeed show that on average * will do more comparisons than * roughly 1.44 n log 2 n for * versus n log 2 n versus *\n", "* has a better big-o than say * yet * performs much better in practice\n", "the difference is large enough that the constant factor in front of the n log n term in * is lower than the constant factor in front of the n log n term in * which is one reason why * is much faster than *\n", "in short - if all we care about are comparisons * is a better choice than *\n", "in fact the * algorithm works this way first arrange a random order into heap order and then obtain a sorted order somewhat less efficient than * on average\n", "can anyone explain why * performs better and under what circumstances quichesort would be better than both * and *\n", "in practice however * is usually faster then *\n", "for 5 000 000 ints still stored in memory * becomes suddenly worse then * and mergesort\n", "* time complexity is typically o n log n but it s worst case is o n 2 which is avoided with the switch to * since * is always o n log n but slower than * so it s only used to avoid o n 2\n", "worst case for * is actually worse than * and mergesort but * is faster on average\n", "in theory * is worse than *\n", "in theory insertion sort and * are worse than *\n", "the reason * is slower in practice than * is due to the better locality of reference in * where data elements are within relatively close storage locations\n", "from what i heard * should have better average case performance but from my tests it performs 4 times worse than * for array of random integers\n", "in their respective worst cases * is faster than *\n", "when you say something like * should be faster than * what makes you say that\n", "asymptotic analysis reveals order of growth of * in the worst case is big-o n logn which is better than * s big-o n 2 as a worst case\n", "in the event that the * starts to degenerate it uses * which is o n log n worst-case but slightly slower than * on average to guarantee o n log n worst-case runtimes\n", "in my tests * performs better than * by the way\n", "* is also significantly faster than * for decompression\n", "these formats allow various data compression codecs note that * is now much more popular than * and can also provide other benefits such as fast serializable deserialization column pruning and bundled metadata\n", "* also consistently decompresses 20 + faster than * which is a pretty big win if you want it for files you re reading a lot over hadoop\n", "java s array .sort is from about java 6 actually * the fastest general purpose #sort out there much better than * in many situations\n", "you can take a look at * which for non completely random data performs better than * they have the same asymptotic complexity but * has lower constants\n", "i ve read that * is better than * both in the best and the worst case although it uses a bit more memory\n", "if that is so you might find that * runs faster than *\n", "if it is true then * will always take less comparison than * because on real life data there is some pattern except data is truly random\n", "* is used by python and java for their sort methods and is rather supernaturally fast but it s a more complex algorithm than * which matters if you re working in something like c - so if you just need something that works pretty well and is simple go with *\n", "which of the two consumes more memory is not defined and depends on the input sequence to be sorted as well as on algorithm tuning parameters see the comments to one of the answers to why * is more popular than *\n", "why * or introsort or any comparison-based sorting algorithm is more common than *\n", "* is much faster then * at verification\n", "* is much faster than * for private key operations so it should definitely be preferred over * when high efficiency is required unless * is still fast enough something that may very well be the case\n", "if you re interesting in reducing the size of the resulting cookies you should consider using * rather than * to produce the signatures - * signatures are considerably smaller than * signatures of an equivalent security factor\n", "* is probably better though * was developed by google with protobufs in mind so you might want to test both on your data set.\n", "in cs * is less commonly used because we have much better algorithms * and merge-sort come to mind\n", "short answer * is more efficient in this case than naive application of * s\n", "no practically * is faster than * s for all pair shortest path generally\n", "indeed * s algorithm is better than * s in this case the complexity for * is o m n 2 and in this problem m is much much higher than n so the o n 3 time complexity of * is better\n"], "library": ["i found * easier to use with more options and better documentation than * or graphael\n", "by looking at the google groups for qjplot and * the support for * is better lot s of unanswered questions at the * group\n", "* is free in my opinion has better chart than * it doesn\u00e2 t have events\n", "also linearsvc class from * performs even better than * whch is also surprising considering that it s a wrapper of *\n", "edit more recent * does a better job of not always padding to powers of 2 length so is closer in output to the * case\n", "i ve used both * is more robust but * is easier on the eyes\n", "usr local lib python2.7 dist-packages * sandbox cuda init .py 600 userwarning your * version is more recent than the one * officially supports\n", "userwarning your * version is more recent than the one *\n", "you should be able to do this in * which has a better license than * by just throwing what they showed in this blog post on its side\n", "* is slightly more difficult to setup but is much faster than *\n", "anyway if you re willing to do advanced 3d stuff * is way better than *\n", "personally i ve used * in the past and found the performance much better than * for 3d scatter plotting though the python bindings are somewhat in question moving forward i think\n", "* has more options for moving the camera than * but it doesn t seem to have a way to rotate around the y axis so i m guessing i ll need to perform some complex calculations on the azimuth and elevation to achieve the same result - but i m at a loss as to where to start i m new to working in 3d space and my brain doesn t think that way yet\n", "* makes it easier to visualize the data but * looks more professional\n", "as a result of this comparison i see that * is performing so much worse than * that i m starting to doubt about my code\n", "if everything is correct why * perform so much better than *\n", "i haven t played around with it recently but i think * is more flexible here in terms of mixing dtypes but doesn t give you all the * dataframe conveniences obviously\n", "the * docs explain how to use drawees and you can see right from their xml definition that they are much more customizable than *\n", "i also kind of get the impression that * drag and drop is better than * ui drag and drop based on the online demos\n", "i ended up using * for most of my animations simply because it provides smoother animations and more configurable than what * ui provides\n", "for more complex xml reading writing you better check * which is heavier than *\n", "* is more forgiving in terms of well-formed xml structure see i had to edit the xml a bit to make things work for * and it s actually much easier to work with\n", "should i be surprised that the * * backend is about 18x - 19x slower than the * tensorflow backend\n", "the * results seems much more stable but * results have some drastic fluctuation\n", "but this popular wsgi benchmark says * is way slower than *\n", "the use of * is also a performant option but slightly lower than *\n", "* routine *_gemm has higher performance than * in some cases\n", "because * is updated more frequently than * a * * build is provided to ensure compatibility with the latest stable version of *\n", "if you re open to using * which is a better version of * imo this can be expressed fairly simply using flattendeep on each element of your multi-dimensional array\n", "the solution from charliefl is approximately 100x faster than * depending on browser in this case and * being up to 2x faster than *\n", "* is another faster implementation of * that will provide a lot of utility methods for working wit arrays objects functions etc\n", "i believe * is a better choice over * more details in this blog post\n", "* is definitely not slower than *\n", "the easiest solution is to just replace * with * which has even more features than the latest *\n", "basically collections are things that implement some kind of iterable interface and they internally use the same iteration method though * source is a bit more convoluted than *\n", "if i remember correctly * argued they were faster than * because the use non-native functions for key operations\n", "given that this is 4 years old and * has more or less taken the place of * i thought i would share this solution using *\n", "i am stunned right now seeing a * performing 100-150 faster than * in even simple native functions such as array.every in chrome\n", "* is more modular than * * around 5kb * around 17kb but is generally lighter because you only include the specific modules you need\n", "edit as pointed out in the comment * is likely to be a better solution than *\n", "other useful pieces would be * for database access much simpler than * or other full orms async-httpclient for doing calls to other web services\n", "for similar functionality that speaks * but has more flexible features you could use the facetgrid object from *\n", "i also think working with * is much easier using * dataframes and not numpy arrays\n", "they do this using a jquery plugin called * which is a more complete version of * you pay for\n", "in its stead you can use * - which does filtering a lot easier than *\n", "according to this answer the * plugin might work better than * for media-queried resizes\n", "they merged with * which in my opinion is a better choice than *\n", "i have tried * too but * is smarter than * on this aspect\n", "the * has a more involved setup than the * but it does allow for more customization of what and where it displays\n", "i ve found * which is more like the * but it lacks a lot of * libraries\n", "if you definitely need svg and want to only use existing elements you may want to look at * which is raphaels younger sister and shares a lot of the same codebase or another like *\n", "* intrusive_ptr performs better than shared_ptr because it doesn t need a second * to hold the reference count\n", "the latter doesn t do any dynamic memory * and is more than 10 times faster than std to_string on * karma benchmarks\n", "just to goof off a version using * string_ref is much faster still due the reduced *\n", "to be able to use std allocate_shared with * fast_pool_* as the * method using g++ 4.8 or higher with * 1.56.0\n", "* has more components but lack combobox available in *\n", "* is more developed and tested generally since * came out later than rf\n", "i haven t tried any of these in a jsf 2 application but i would recommend using the * one at least the documentation is better than *\n", "i m using the module * in my python script and many more such as * and numpy etc * module only works on python2 not for python3\n", "start with * as it s text extraction abilities are better than * s\n", "on the downside * is less mature than * so it has less features and documentation available\n", "i have noticed that content extraction is faster in * but searching words using regex in the content extracted by * takes longer time than *\n", "enthought-dev is * faster than *\n", "* libraries are generally less mature and less standard than *\n", "as for not reinventing the wheel like many have said already make sure to first explore the possibilities in the standard template library * which is much richer than you might think and then look at * www.*.org which has libraries for a lot of diverse purposes and they are extremely high quality and some are just works of art like spirit proto lambda and mpl\n", "c++ s * is getting better and better yet it s not nearly as huge as * and is not intended to\n", "while * is more modern c++ it also harder to use for non trivial tasks - and without a modern c++ experience and deep * knowledge it is difficult to use correctly\n", "once you re past the basics with c++ learning how to use parts of * and then how it works will be better than tackling *\n", "* s io stream might be a better solution than * s own stream\n", "i ve used both for the same project * is better integrated with the * and especially c++ exceptions\n", "i don t want to use * because that s a library i haven t used extensively yet and i m doing this partly as an exercise to gain greater mastery over the *\n", "* has far more capabilities than *\n", "not to be confused * is more recent and * was used in some distributions of linux\n", "ubuntu 12.04 ships with the * fork * in version 0.8 which is more compatible with * 1.0+ or even later * versions iirc\n", "also if this controller is an hid the * library might be a better fit than *\n", "you can have a look at this speed performance benchmark from * which suggests that * is about 3-4 times slower than * 3\n", "i wish program with * and * is faster than with only *\n", "to allow you to scale down the data away from endpoints 0 and 1 i had to do this when combining * in * single pcolormesh with more than one * using * so you can likely see how the code works but basically say you have values -5 1 10 in a sample but want to normalize based on a range of -7 to 7 so anything above 7 our 10 is treated as a 7 effectively with a midpoint of 2 but shrink it to fit a 256 rgb *\n", "to allow you to scale down the data away from 0 and 1 i had to do this when combining * in * single pcolormesh with more than one * using * so you can likely see how the code works but basically say you have values -5 1 10 in a sample but want to normalize based on a range of -7 to 7 so anything above 7 our 10 is treated as a 7 effectively with a midpoint of 2 but shrink it to fit a 256 rgb *\n", "i have made an app similar to yours for android we use * whose surf is much faster than *\n", "unless you re doing very heavy processing working with a single frame is probably faster than transferring it to the server as far as i know * in c# isn t considerably slower than * in c c++\n", "the results end up very close but the * image comes out a little bit blurrier than the * image\n", "customization and variety of animations * has more customizable animations when compared to * javascript charts\n", "* is a newer gem than * and it looks a lot more flexible\n", "* seems to be gaining more popularity than * but most people seem to be on *\n", "seems like * is more file oriented and * is more object oriented\n", "new to * already loving it so much better than *\n", "the downside is that you are losing the big part of the * s appeal in its simplicity and technically could be better off by using * s dsl\n", "if you re using retrofit and okhttp to perform the network calls i suggest you use * as it s also from square and claimed to work faster and better than *\n", "this should be possible maybe be aware snap.svg isn t so compatible with older browsers in which case you could look at * which is snaps older brother * is very well established as well\n", "* is much harder to learn than * but in both cases you will also have to learn svg to be able to create better animations\n", "* supports older versions of ie whereas * is based on current web standards\n", "as it stands * is not just better than * and processing in many cases but is also a viable replacement for jquery underscore.js and other frameworks\n", "the only place where * defeats * is fallback * supports older versions of ie where as * is based on current web standards ie 9\n", "but adding a class to * package seems harder first because there is different jars depending on the operating system used org.eclipse.*.cocoa org.eclipse.*.gtk .... and also because copy pasting the code of * is not that easy since there is call to external methods waiting for a strict *\n", "my speed test claims that svg is significantly faster than canvas at least * seems to be significantly faster than *\n", "* is svg and as such it is much more dynamic than * you can restyle graphs with css attach events perform animations etc..\n", "quick takeaway of the benchmark jackson performs 5 to 6 times better than * and more than twice better than *\n", "or switch from * to something that performs better such as * or jackson\n", "i am working on a code which needs to be time efficient and thus using * for this purpose but when i try to compute fft of a very large data in parallel it is slower than cpu * and the reason i find after finding the time for every line of code using high precision timing code is that cudamalloc taking around 0.983 sec while the time for rest of the lines of code is around 0.00xx sec which is expected ..\n", "however for a variety of fft problem sizes i ve found that * is slower than * with openmp\n", "in the experiments and discussion below i find that * is slower than * for batched 2d ffts\n", "i think * looks so much better than * but for quick zooming panning functionality my first question is is this better off in * or can * handle slick zoom pan even though it s not tile-based\n", "there s a known bug that when you install the googleads library using pip it will install a newer version of the * library which will break my google analytics api scripts because the * uses an older version of *\n", "* uses an older version of * which i believe was the latest free * version\n", "* parser does a better job than * or html.parser handling the debate element in this case\n", "* is the faster parser and can handle broken html quite well * comes closest to how your browser would parse broken html but is a lot slower\n", "the standard html.parser option handles broken html less well than other options while the * option is closest to how a modern browser would handle broken html albeit at a slower rate than * would handle html parsing\n", "* parser is generally faster * is the most lenient one - this kind of difference would be relevant if you have a broken or non-well-formed html to parse\n", "* is considered faster than linear * and often used for large scale data set\n", "and how do the differences make * faster than *\n", "you can also try sklearn.linear_model.logisticregression and sklearn.svm.linearsvc both implemented using * that is more scalable than * albeit less memory efficients than other linear models in scikit-learn\n", "and i ve read that using * is far faster more memory efficient for such tasks as such i ve ported my * classifier to accord net like so\n", "when i evaluated * it was less mature than *\n", "this is done on an extremely large image and i feel * might do a better job than * on this\n", "at least for .executemany * seems to be more proficient than * as the sql statement is only prepared once for all submitted values\n", "i hear * is nicer the *\n", "* s api is also a bit richer than * s api\n", "the situation is critical if on some platform * provides a narrower functionality and does not link to * which will not be available on that platform at all so the above command for linking will fail due to unsatisfied library dependency\n", "first of all if it was not for the relative complexity of the expressions here * would have been definitely the better option over *\n", "* seems more flexible but i am unclear about what the most direct way of using it to save a full * dataframe with multiindex and all\n", "if you are dealing with docx document * is more convenient than *\n", "* provides a simpler quicker way to build and train models in * at no performance cost since the models are still being run by the same * engine\n", "is * consumes more gpu memory than equivalent * model training\n", "is * faster slower than * during training\n", "more than this methodology i would suggest to you to do the training directly in * as it claimed that * optimizers are 5-10 times faster than * s optimizers\n", "i found another approach using the * context passed to the handler of draw events but it resulted in capturing a region of the parent window that was larger than the *\n", "inspecting the assembly shows that in the sequential access case * is faster because the sum becomes vectorized while it does not when using raw * multi_array\n", "you may also use * which is a simpler encoder than *\n", "* is still faster than * in many respects and supports a wider range of operations\n", "in my testing the slow-down from using * ranges from about 1.5-3.0 times slower than using * but its performance will depend on your application\n", "it * runs much faster than *\n", "* is better at marketing itself than long-time players of the open-source market like torch and *\n", "* has better computational graph visualizations than * and torch\n", "it is similar in spirit to keras which is built as a high-level api on top of * tensorflow cntk although the main difference is that * implements only one backend allowing it to integrate more deeply with * features\n", "and using keras or * is way simpler to develop nns then pure * which was just side research project in montreal to support development of pylearn\n", "i know another plugin named * corner is available however it s file size being massively bigger than * i decided to with *\n", "regarding skinning i feel * default skinning to be more basic than * one but i think both have ways to make them as beautiful as your css skills allow you\n", "i think * has a more mature ajax integration and their ajax components and events are more easy to use for me than * ones\n", "to draw you can use either plain * which is more basic or use * which is more flexible drawing library nb\n", "you should try * i think its much better than *\n", "i m not too eager for using * though since i m more familiar with *\n", "it can be hard to get the layuots exact the way you want in * it s usually easier in *\n", "so in my view using * is simply easier unless you have more experience in *\n", "even though i liked many design aspects of * and it is simpler than * imo * is the one to learn because imo it has far far better documentation examples etc\n", "* is more simple to use than * especially if this is your first ui\n", "* is claimed to be faster than * although in modern versions * is also fast enough\n", "in java if you want a graphic user interface you can use * or * and * is better than *\n", "* became slower than * because it uses proxy to os widgets\n", "* community is smaller and it doesn t provide that many tools as * does\n", "give * a go the api is a lot simpler than *\n", "is * faster than *\n", "* is the weaker of the gui technologies relating to accessibility in java compared to * at any rate\n", "* has a more platform-specific look about it but java ships with * built-in there s no messing about with external libraries as with * although the use of eclipse may make that much easier i still develop quite a bit of my stuff from the command line unfortunately\n", "also * is actually newer and more actively maintained than *\n", "fixing bugs in * is much harder than in * most classes in * are final or contain hostile checks in the constructor to make sure no one extends them the package is signed so you can t simply replace classes and so far i tried several times to compile * from sources - and failed\n", "in my opinion * is easier to learn and to use but the results of * are often nicer - you can often feel that a * application behaves not completely right\n", "i find * to be an uglier api than * in general though but not really a deal breaker\n", "the * library is much more popular than * and does allow you to avoid for while loops by using preficates and filter methods\n", "i also recommend * it s much easier to use than * and have builtin sqlalchemy extensions\n", "* has no any other unnecessary things so it is better than * or qprogressbar\n", "as a note * is way better than other libraries as * for real time applications\n", "the problem is that the canvas drawn by * is larger than the area of * s scrolled_window\n", "with * it s more common to use * already mentioned by jeff foster\n", "the * library for example can be easily inserted into an application to evaluate performance gains in heavily threaded applications where * tends to perform a lot better than * s malloc implementation\n", "i d say that * is actually more evolved than *\n", "* is more strict the * so i m now learning it\n", "there exists a simd fork of * which claims to have much better performance than * or plain * but there are no comparisons to opencv\n", "the origin server would get the images from s3 process them using * since it s much faster than * then serve them\n", "mmmm * is somewhat less developed than * in many respects\n", "* provides more extensive api documentation than *\n", "* also seems to be faster than * using better multitasking\n", "i thought * was supposed to be leaner meaner than *\n", "* converted much faster than * although i did not test conversion with cuda processing\n", "i do know * better than *\n", "for me * is performing far better than *\n", "i successfully compiled * with q8 but after all it seems about 30 slower than * 0.3 secs\n", "* is not that much faster -- and the outputted file sizes are significantly higher than *\n", "while * aims to be more lightweight than * * is by far the more mature proj\n", "android plot and other free chart solutions mentioned here doesn t support annotations the only one is afreechart which is a port of * for android i am currently using it and it is awesome and has much more features than *\n", "instead doing it with * which i found to be the fastest somehow even faster than *\n", "as a side-effect of implementing proper parent traversal * is a bit slower than * for parsing\n", "currently * supports the older * v.5.1 while there is a newer * 6.0 available on nvidia site\n", "the * library includes a confusion matrix that is simple to use and produces a nicer output than *\n", "what you re looking for is linear regression and * is much better than * for this see\n", "or * directly .for more details * 3.0 documentation\n", "if you are worried about memory then do look into * since equivalent models can use significantly less memory than *\n", "* is better than * because while in offline mode no internet connectivity * tries to fetch record form server whereas * maintains its cache form where it fetched the images\n", "if * doesn t satisfy you for any reason you can also try * which does much more than * it s not only for images but the same rules apply\n", "several things i found in the cocos2d forums lead me to believe it s an issue with the * implementation on ios but i ve tried using both stb_image and lodepng to avoid * and those libraries actually performed even worse than *\n", "i have an app that uses the public part of the twitter api the on who not requires to login but with the update the login is required so i need to implement oauth i ve seen there are libraries like * who makes this easier but my app has a lot of code and i don t wanna rewrite it not now so i ve think to use * or oauth-signpost but i dont realy know how to\n", "in this case * performs better than nashorn which performs much better than *\n", "quick takeaway of the benchmark * performs 5 to 6 times better than * and more than twice better than gson\n", "p.s. my recommendation would be to remove jsonobject conversion and instead return an object of actual class as internally spring uses * which is more powerful json framework then *\n", "it seems that the idea of * it to be more declarative than * so you just have pure\n", "looking briefly at the list-like combinators for * i m more familiar with * i think you can solve this by folding over the result of the psome combinator\n", "i would also recommend you to check * as its way much better than *\n", "but if convenience is more important than efficiency yes you probably should consider a tree model not dom necessarily * is better for example or data binding jaxb or *\n", "* is faster than the * 2.3 malloc available as a separate library called ptmalloc2 and other malloc s that i have tested\n", "* is faster than the * 2.3 malloc.\n", "jemalloc and * with some setting changes can be more aggressive than * to release memory to the os - but again it depends on the allocation patterns\n", "then we found * also have same issue but increase rate is less than *\n", "the cons of * is that you get more than just * - you also get gulp-utils and other things - which is a problem if you are not using gulp in the first place\n", "as noted in the comment by quandary the * library offers a more relaxed license mit compared to the commercial or agpl license offered by *\n", "for semantic zooming you ll notice that * is significantly faster than *\n", "the team behind * has since created * so this is likely a better option than *\n", "finally i haven t done much with animation but i think you re entirely correct - * provides more animation support than * especially in terms of animated transitions\n", "from my own experience mtl4 is much faster than * and it is also faster than *\n", "* runs in less than one minute and * takes 4 hours\n", "you could use * it is way easier to use and works with *\n", "* is made to work with * 2 * 3 however is way newer than * and therefore * does not support using * 3\n", "i think * will make this easier but with raw * this would look something like\n", "i ve created an application with this library instead of * because i thought that * is easier to learn than * for newbies even if it provide less features\n", "if you don t plan to move to mobiles later tkinter or * may be a better choice than *\n", "2 readability library content is passable slower on average than * but faster than *\n", "have a look at sift and surf and at * which has a good sift implementation and also implements mser and hog and is much smaller than *\n", "regarding * * is more efficient and in my experience can handle broken html better than *\n", "note that * is probably a better option than * for this kind of task nowadays for the reasons given by * s author\n", "for starters * is no longer actively maintained and the author even recommends alternatives such as *\n", "i do understand that traditionally they are saying that * are stricter than * however what i do not get is the following\n", "note that using the * parser is a lot slower than * s default parser\n", "* is significantly more powerful and robust than * in my experienced opinion\n", "* is more suitable for html parsing than *\n", "* is much faster than * and probably the fastest parser available for python\n", "it uses * underneath and is much faster than *\n", "according to the above posts and my own experience * is definitely faster than *\n", "i prefere * it s a harder to understand but much faster than *\n", "* is faster than * i think and has much better functionality while remaining relatively easy to use\n", "the reason for using * for such a task is that it cleans html files better than * do\n", "* is supposed to be much faster and efficient and can do much more than *\n", "i found a solution to this problem using * at *-where-are-you-putting-my-html because i think it is easier than *\n", "i would recommend * for html parsing it s simple and considerably faster than * can be as much as two orders of magnitude\n", "how can i find all div and span tags with order preserved.with * it is very simple but i switched recently to * since it is much faster than *\n", "i prefer to use * better than *\n", "* will let you use xpath here which i think will be less painful than * s interface\n", "edit don t use this for html work use the * library it s python based and much faster than *\n", "according to some benchmark tests * is nearly 100 times faster than *\n", "pyquery is based on * so it s also much faster than *\n", "* is also much much faster than *\n", "i ve found that even if * is faster than * for documents that size it s usually best to try to reduce the size to a few kb via regex or direct stripping and load that into bs as you are doing now\n", "* also has more features and offers * too\n", "you ll probably find that * runs faster than * but in my uses * was very easy to learn and use and handled typical crappy html as found in the wild well enough that i don t have need for anything else\n", "* enables you to search for elements using xpath which i think is easier than using * s api\n", "since you re using * why not use it in a more direct manner * is believed to be faster than *\n", "one of the things that makes * better than * is support for proper css-like class selection or even supports full css selectors if you want to use them\n", "speed isn t important here but in other applications it is good to know that regexes are very fast 100 times faster than * and 1000 faster than *\n", "it s generally accepted that * is faster than * ref\n", "alternatively you can use * module which is lot faster than *\n", "* is said to be slower than * but i suggest you use a profiling tool here to find the best set of options here\n", "yes * is slower than *\n", "for those commenting that * is obsolete personally i like it more than *\n", "* is a higher level library above *\n", "in my experience * via mit-shm extension was significantly faster than * surfaces not sure i used * in the most optimal way though\n", "so i think * would a better choice than *\n", "* is much more aimed towards gaming with opengl where as * is more worried about complete and perfect bindings to opengl opencl\n", "* is more java-like whereas * provides more gaming functionality on top of opengl access\n", "if your company s concern is to avoid big unknown libraries which is prefectly understandable i d advise you to stick with * which is smaller that *\n", "* is more of creating charts using canvas element of html5 and * uses svg\n", "for my project * is better then * because * is filling up all gaps * is just looking for the first possible gap and doesn t fill empty gaps\n", "also it seems * lib has better performance than other packages such as * which i haven t tried personally\n", "it seems * is more faster than * the average time of * is about 2ms while * is about 16ms does i make mistake when using *\n", "* 1.6 now includes a low-level streaming api and a new parser which is actually faster than *\n", "since i am more familiar with * here are some aspects where i think * has more complete support than * apologies if i miss a * feature\n", "also i want to know if google * is better than * for json parsing\n", "i looked at * metrics and it seems slower than *\n", "we plan to use * extensively in the application as it seems safer and better than *\n", "try this lib that s a good one with the * we use only in the server side because * is more slow in the android than * at least in our test\n", "according to the performance results at for serialization with databind with strings *.tojson myobject * is over 10x slower than *\n", "code looks correct and even at its worst * should be no slower than *\n", "* is more suitable if you have a complex deep json tree because * creates a lot of temporary objects which leads to stop the world gcs\n", "keep in mind though that * is a larger library than * so depending on your case you might prefer * to avoid 65k methods limitation\n", "large objects google * performs faster than * and simple json\n", "further more * really seems to be faster than * json\n", "performance of * is better than *\n", "under some conditions * has proven to be a lot faster than * there also exists jsonp and json.simple\n", "very small object google * performs faster than * and simple json\n", "deserialization performance is similar with * over 9x slower than * and fastjson about 0.5 faster than *\n", "in my case i found * little faster than * i used default serialization because so far i don t have a need to customize serialization\n", "* is simpler * is faster\n", "going to go ahead and say that * is a lot more user friendly albeit less powerful than *\n", "note also that * comes with less features out of the box than genson or *\n", "* is faster but the api is 37x more complex than the * api\n", "* is not particularly fast but the * library can almost compete with most binary serializers * is 2-4x faster than * in most situations and 10-20x faster on utf-8 because it has special code for utf-8\n", "* is faster with smaller documents and * is faster with large documents\n", "after searched in google found that * has better performance than * i plan to replace * with * in my project but i got a diffrent result when run test code\n", "i ve seen questions like this come up before and the general consensus is that * is much faster than *\n", "take a look at the * json parser it s faster than the one in android and faster than * and supports streaming\n", "* type safety is way better than *\n", "i found * better than * performance project activity better docs ...\n", "personally i prefer * as according to test benchmarks it s faster than *\n", "i was also looking at * * sfml i didnt see much tutorials help on this but heard its better than *\n", "i d strongly recommend to go with * 5.1.x it s a little bit more difficult than sfml but very functional and easier than * it s got nice support and it s compatible with plenty of os\n", "finally if * just isn t working for you try * it s better documented than *\n", "* looks more good option to work than * bcoz it has inbuilt support its easy to learn its long time support guarantee for seam+* combination\n", "* has better ajax support than *\n", "there is * which provides more semantic support than * .also you can try nitobi suite which also provides similar kinda solution.if you are not satisfied with any of these i suggest try to write your own part extending the sun faces\n", "that said i found * to be a useful product and much better than * especially in terms of the quality of the documentation\n", "* provides more good looking components than *\n", "this may help those confused by * and hdf5 but more familiar with * like myself\n", "* is far more flexible for working with data so i often bring parts of * dataframes into memory manipulate columns and create new ones\n", "when hdf5 storage can be accessed fast than .csv and when * creates dataframes faster than * why is * from hdf5 slower than * from csv\n", "1 i guess * will be slower than * for smaller datasets\n", "* is a more full-featured touch library has many swipe commands than * most upvoted answer\n", "i find training in * much easier than in *\n", "but if you will look at the accuracy level * have more accurate detection than *\n", "i looking to use a suite of nlp tools for a personal project and i was wondering whether stanford s * is easier to use or *\n", "so * is just a library for creating windows in a better way than * did before\n", "edit 31 march 2014 for what it s worth i have found that * is much better at text extraction than itextsharp notwithstanding a bespoke strategy implementation and * tet is slightly better than * but it s quite expensive\n", "or if you re really focused on only doing opengl i may suggest using * which is the better * but you ll have to draw the menus yourself using opengl\n", "between these * is much closer to * in character -- a small toolkit for abstracting away most of the os-dependent parts so you can produce opengl programs with relatively little hassle\n", "edit 31 march 2014 for what it s worth i have found that * is much better at text extraction than * notwithstanding a bespoke strategy implementation and pdflib tet is slightly better than * but it s quite expensive\n", "* is more about json-based persistence in the vein of * which can do json too and sounds a bit too heavyweight for just an applet\n", "if i resize the window and a widget with a * is bigger than the window i want to resize it to make it smaller and * should recalculate the positions of the others\n", "basically * was only slightly slower than *\n", "somehow the layout algorithms in * seem to display a better layout than in * rendering is also better i think though most of the layout algorithms in * are based on * implementation\n", "the chapter starts with short course to xml general talk but with the atom syndication feed example then it continues with the standard xml.etree.elementtree and continues with third party * that implements more with the same interface full xpath 1.0 based on *\n", "i used it because it is small 6 kb compiled with just the extraction making it far smaller than * which is more than 150 kb and is more permissive than *\n", "* is much easier to use than * example of zipping all files in folder\n", "* offers native support and has a quite friendly api and is my opinion more flexible than *\n", "i have found though that since i started using the asset_sync gem which uses * instead of aws-s3 gem i don t have any more trouble with * and s3\n", "* is simpler to use has a better response to a multithread environment but lacks documentation while * is a more dated complex tool better documented and fully implemented\n", "* presents a more direct view of the protocol than * does so you often have to look at either the protocol specs or * source code to find out what the underlying protocol request is to find an equivalent\n", "* is lower level than * and allows you to minimise the number of round-trips to the x server leading to lower latency\n", "here in so i found a lot of questions asking something similar and the answers normally said you can use * or asm or * is better than * or bcel is old and is dying or asm is the best because it gives x and y\n", "note that * is significantly slower then for example * because it reads in class files directly instead of using reflective access in order to avoid class loading\n", "also * is recognized to be slower than *\n", "this makes for example * or proxetta significantly slower than * which simply reads the methods via the reflection api and overrides them\n", "the javadoc of * is way better than that of *\n", "* has a steeper learning curve than * but once you get the hang of it you can do pretty much anything graph related with it.official site is here\n", "* is easy to use * has more option but is less easy to use than *\n", "if you re building a simple demo of a rendering mechanism * is way better than * it takes care of a lot of the details that * would otherwise require\n", "however if you re developing a serious application * is more likely to be the tool you need to use as * abstracts more than a real application would normally want to\n", "* is much more easier while many of people use * or sfml they re more flexible and feature-full than *\n", "i am using a sparse format but suggestions are welcome on other formats too i am able to use the data with * in a dense format using the function names as variables and it works just muuch slower than with *\n", "since you tagged this with python you might find * more useful than * but the real question here should be about how to do the conversion not the library request since library requests are off topic for stack overflow\n", "but in general you will find that * is faster more effective and has an api which adheres closely to a python standard the * which comes with the python standard library\n", "note please do tell me if * is more easy or this *\n", "* -- 100x better than *\n", "* is faster than * but i ve never found an application where the speed boost paid for the hassles of distribution\n", "you should check out losswise it has a plugin for * that s easier to use than * and has some nice extra features\n", "* xml module faster than *\n"], "function": ["* is fast alloca is fast copying the string up to the first n is fast puts is faster than * but is is most likely far slower than all three operations mentioned before together\n", "i am getting a problem using * and * as in my code * is written earlier then fget but it does not run it runs after * runs\n", "that said the date class is much better in php5.3 -- it even has * subtract functions which would also solve your problem much better than * .\n", "* is simpler than * and can be implemented even more efficiently in places where the strings are known to be properly aligned\n", "rest assured though that * is better equipped in the general case for string comparisons than * is\n", "if you always keep track of the lengths of your strings you can compare lengths and use * which is faster than *\n", "* is rarely slower than * or strncpy and often significantly faster\n", "* is usually faster than * for longer strings\n", "if size is known normally a non-naive implementation of * is faster than * since it takes profit of the cpu s data bus size\n", "so i feel that on x86 * is faster than *\n", "the reason for not having * i m guessing is that * can be replaced more efficiently with * for constant strings and if the string is not constant * is a bit more complicated than * anyway so not as beneficial to make inline optimisations for\n", "we keep track of what cmd s length ought to be in a variable and copy the string with * which is slightly faster than * and does neither check string length nor copy the extra zero at end of string\n", "your macro with memset and * was not any safer than *\n", "* is faster than * and also enforces you to specify a buffer size\n", "* can be more efficient than * since rep movs is highly optimized on intel cpus esp\n", "but sometimes * performs faster than * because it moves blocks of memory at a time which allows it to perform some optimization i will not go into details here\n", "for example for small amounts of data an * optimised for large amounts of data may be significantly slower than a * that wasn t optimised for large amounts of data\n", "because of the above replace strdup with strlen malloc * * is slightly faster than *\n", "performance difference * is usually more efficient than * which must scan the data it copies\n", "is * usually faster than * on most real platforms\n", "* is not really any slower than *\n", "information - use * as it s faster than * and we know\n", "memset behaves like * but the difference is that * copied the data as it is byte but * copies the formatted string as well so takes more time than * to execute\n", "on almost any platform * is going to be faster than * when copying the same number of bytes\n", "notice that * is faster than * unless the source string is much smaller than the buffer s size which is rarely the case with ip addesses.\n", "the problem is that * is only slighly slower than * when i expect it to be about two times slower since it operations on twice the memory\n", "it is understandable that * is faster than *\n", "but as that reference points out * is way faster than * and sha functions although it doesn t do a direct comparison to the object.gethashcode method i mentioned above\n", "* has 64 and 128-bit versions so you can experiment between the two and it s faster than * largely owing to * being a cryptographic hash function whereas murmur doesn t have the added expense complexity of being cryptographically secure i m assuming that you re not concerned about anybody attempting to intentionally generate hash collisions or anything like that\n", "if you want longer * lets call more secure you should use something like sha512 * etc\n", "* of course does not process escape sequences any more than * would\n", "or is the * with by just typically much slower than *\n", "additionally if you have * then it is much more convenient than * + malloc + strcpy with identical result including the same obligation to free the allocated storage when you no longer need it\n", "as i noted in comments however if you re willing to rely on posix s * then that s cleaner than * + malloc + and has the same semantics you take responsibility for freeing the memory allocated for the copy\n", "so we can use * with sha512 to gain a very significant advantage over the phpass algorithm mainly because sha512 is a harder algorithm with more computation than *\n", "while * gives you automatic de-*tion on function exit the stack is usually a smaller resource than the * heap and if you exhaust the heap it gives you back null\n", "it is likely that you could do an sha * of 100kb in well less than 10 second though and though sha-1 is still theoretically flawed it is of higher strength than *\n", "the wrapper uses these in such a way that even the * implementation is significantly more secure than a simple *\n", "if you don t need the cryptographic properties then a non-cryptographic * or a * that is less cryptographically secure * being broken doesn t prevent it being a good * nor still strong enough for some uses is likely to be more performant\n", "because sha256 * are much longer than * * you can detect the * algorithm by looking at the length of the *\n", "crypt with * is simply more expensive than *\n", "the * cake generates are more complex than *\n", "with a salt * is much more secure than without but you re better off using one of the sha * such as sha256managed\n", "double * *ing is actually less secure than a single * with some attack vectors\n", "* is no longer secure and it can be broken with a good gpu no typo you can use your graphics card to break a *\n", "using a non-reversible * such as * is much more secure and you can store the * value as clear text\n", "it s like complaining that a sha256 * is bigger than an * * - yep it is but only one of them might slow the attacker down for a while\n", "obviously * is much more difficult to reverse even in this anything that will * to the right value sense then a simplistic algorithm like take the last two digits\n", "so i guess it s the * in the dump output cause the conflicts and the * value is longer than * outputs\n", "other * functions such as sha-1 also have * collisions although it is much less likely than *\n", "mac os x llvm gcc based crypt fuction is borked junk hardwired to only use des a proven breakable * worse than *\n", "in that case some * functions are somewhat faster than other * being one of the fast functions but md4 is faster and it is simple enough that its code can be included in any application without much hassle\n", "i would like to apply a * code solution on my webpage which is more compact than * and sha-1 because i want to use them as keys in a json * table\n", "if you want to compare you re better off putting your result through getstring and compare the much less secure * even less secure than * already is\n", "or you could employ a request signing scheme in which certain request fields are * together with the password of the user basically sending the password without sending the password similar to digest authentication but you can use something better than *\n", "valid choices for *ing include sha1 or * although sha1 is preferable because it produces a larger * and is considered cryptographically stronger than *\n", "*ing is one way you can prove this to yourself by taking an * or shasum of a large file since the file s size is larger than the * output by pigeonhole principle * can t be restored.\n", "the difference between crc32 and * is that * generates a larger * that s harder to predict\n", "if the * function is more complex and cryptographically strong * or sha1 then it is theoretically not possible\n", "all * functions have that problem but some are more robust than *\n", "of course any * algorithm is going to have some chance of collision but you have better options than * that would still satisfy the 1024-byte limit\n", "also the * algorithm itself is much slower than sha1 * sha1 * are made for speed - not a useful property when storing passwords\n", "the fact that bcrypt produces * slower than * because of security reasons is also clear for me\n", "but if you still wish to figure out the phpbb password encryption * it is no longer * in version 3.0 or higher and is a custom *\n", "use * and choose *ing algorithm that suits you well if possible something stronger than * but don t go all the way to sha512 either\n", "finally sha1 * are safer than * i tell you that because you used the * tag in your post\n", "any * function like * sha1 sha256 etc obviously cannot be 100 unique - because they have a fixed length and due to the there must necessarily be non-unique results for input content that is larger than the *\n", "you can for example store a * stored with something stronger than *\n", "this generally uses a * algorithm that is much faster than *\n", "sha-256 uses 64 characters in the database but with an index on the column that isn t a problem and it is a proven * and more reliable than * and sha-1\n", "however if you want to use the sha256 * alogorithm which is better than the * then here s a code sample\n", "malloc * is harder because there\u00e2 s also * and realloc\n", "as an example of the second option i ll use * here because it makes more sense than * for random data but * would have identical usage other than the interpolation option.\n", "marcus yes * is faster than * and faster than python but why\n", "actionlink * is more often used to generate url properly based on the * route values etc and anchor tag based on htmlattributes etc\n", "presumably the mac * aligns to bigger boundaries and so it s spotting the pointer you re passing to * can t be correct since it has the wrong alignment\n", "if your .so are statically linked to c++ runtimes - you should * objects in the same module where they were allocated since new delete is something more than * * and need some extra info to work properly\n", "here is a solution which encapsulates the call to * allocates a bigger buffer for alignment purpose and stores the original allocated address just before the aligned buffer for a later call to *\n", "* finds 10 more * bytes and marks them as used\n", "most likely * allocates more memory and puts so-called guard values that happen to contain null bytes or it puts some metadata to be used by * later and this metadata happens to contain a null byte right at that position\n", "how does * know how much memory to be * d which was earlier allocated by * or calloc\n", "one interesting experiment you can try is to try and * more memory after you * d that pointer\n", "in this context * store is different and incompatible with heap because the new delete * store library is simpler and quicker than the * * realloc calloc heap library and thus provides huge memory usage gains to the c++ embedded programmer in a context where you have only 512 bytes of ram\n", "in addition to the previous answers the strncpy char pointer which seems unsafe for my opinion and the * which is safer but you need to remember to * it outside of the function and its inconsistent with the hierarchy of the program you can do the following\n", "* is much easier to implement if there is no *\n", "suppose char p * n assigns more than n say n bytes of memory are allocated and * p is used to * the memory allocated to p\n", "now if you * some values on the heap and allocate more with * you may be given back some of that dirtied memory that you scribbed on earlier\n", "remember * is quite expensive action and * costs even much more than *\n", "besides * is a better option than * as * can handle failures better\n", "i understand that * and strtof are preferred to * atof since the former detect errors and also * is much more flexible than * when it comes to non-base-10\n", "for instance * is better than * and you should be checking each time whether strtok returns null\n", "you can also use * which is obviously better than *\n", "the c function * is much better make it a habit to prefer that one to *\n", "i would recommend * which provides better error handling than * or sscanf\n", "if you want to accept a number rather than a digit and only a number * works much better than * as it allows you to check for failures\n", "use * it does better error reporting than *\n", "* is better than * with better error handling\n", "you need to error check * and ensure there are as many passed before using them -- * is better than * as helps detect errors\n", "you can also look into * which is better than using * in terms of error checking\n", "i start off calling gets to fill the buffer then using * to convert the human-readable text in buffer to an actual computer int value - note that * is more powerful than * and uses long int instead of int as its declared type\n", "all have more or less cumbersome and non-obvious error checking involving errno * is way much better than * in any case so avoid using *\n", "i prefer using these short forms because to me year * is shorter to type and better to read than * yyyy *\n", "also * is a better alternative to *\n", "* is more pythonic but * is fine here too\n", "* is also more appropriate than *\n", "if you measure properly you ll see there s essentially no difference * is microscopically faster than * in this example but well within noise\n", "why is * slower than * + lst i\n", "the * loop variant was consistently 45x slower than the * loop\n", "doing things like 1000 successive * is much slower than doing one single * of 1000 bytes\n", "you might have even noticed the * version is simpler than the * version\n", "at best it is a computationally expensive hash function like * that for example is five times slower than * and thus allows only a fifth of the number of hash operations in opposite to *\n", "to prefer * over * when given the choice is that * tends to produce query plans that are more efficient than *\n", "you can also use * which is the more general form of * and is actually part of the sql standard\n", "in some circumstances * is faster than case or *\n", "* is better then * because of how datatypes are handled\n", "using * is better option than * or case..when for this problem since the input values for the * expression can be evaluated multiple times\n", "in most cases it has reviled indexes that needed to be add and in most cases the indexes improved the queries the most but after thet have been added the * and dynamic still perform better than the *\n", "i tend to use * only when i need to get the first non-null value from a set of 3 or more values as * only supports two parameters\n", "* will go through the listed values and choose the first one that isn t null it s more portable code than * or ivnl etc\n", "* is more correct of course you could just embed * over and over and over... but put that under a performance microscope and * may just win\n", "* is marginally faster than *\n", "i understand the difference between these functions but my question is when checking for a single null value would * be any quicker than using *\n", "you will find that * works better than * here\n", "on the subject of performance on sql server * often performs better than * but the latter is ansi compliant if that is important to you\n", "* will be faster i think because it has lesser function code implementation for itself making it faster than *\n", "is the performance of * field constant better than *\n", "but depending on the answers to those questions i m guessing that * might do the trick for you better than *\n", "- * should be more portable than *\n", "* can only have one input however it s been shown to be slightly faster than *\n", "you can use * also in place of * as * is comparatively faster than *\n", "* performs better than the generic * and better than having another and\n", "i ve been told that * is less costly than * but research doesn t indicate that\n", "this is pretty much the ifloop answer but * is slightly faster than *\n", "* is more cross-compatible than * or nvl it works on mssql oracle mysql derby et al.\n", "sql server is probably smart enough to translate * into the equivalent sarg expression but if you are bent on using a function then * is a better choice because it is part of the sql standard allows for multiple values instead of just two with * and avoids using quite possibly the most confusing function name microsoft ever devised in *\n", "* is the more standard alternative of *\n", "in this case i would use * which provides more levels than * rather than the case stement\n", "edit based on the tests done by multiple people and by theory * seems to be a better option over *\n", "* is faster than *\n", "an example of why * is better than *\n", "if i want to calculate a * and a * is it cheaper to calculate a * and a * or calculate a * then a sqrt 1-* 2 to get the *\n", "3.14 is pretty close but a little smaller than pi and * 3.14 is thus pretty close but a little bigger than 0 * 3.14 is thus pretty close but a little smaller in absolute terms than -1 so tan 3.14 is a little less than 0\n", "or maybe flip them on my machine * seems faster than *\n", "* itself seems to be consistently a tick 0 01 better than * but the case distinction to reconstruct the sign has an extra test\n", "after reading a question related with the performance of * * why is std * and std * slower than * and *\n", "so if we have a vector and want to calculate a component-wise function over it say * and * it is faster to use vv** from accelerate because it will pipeline the calculations of * and * for all the entries in the vector which is faster than u*g a for-loop over the vector\n", "my question is is fast implementation of * x 0.5f faster than fast * x\n", "and as tom karzes mentioned * is also better than using * for calculating square roots\n", "first of all * x should be faster and more accurate than * x 0.5 why do you think it s in the library\n", "* is faster than * + memset because * knows that the mmap d pages are pre-zeroed and memset forces the allocation of physical ram\n", "* does take longer than * because it has to zero out all the memory you asked for before giving it to you\n", "actually calling memset after * is closer to calling * than the option you suggest\n", "* is faster than * reason is that * processed single dimensional array to pointer format whereas * takes double dimensional array and before processed it converts to single dimensional array then to pointer format\n", "it would be better to use * over * unless we want the zero-initialization because * is faster than *\n", "if end up using the memory anyway * is still faster than * and memset but the difference is not quite so ridiculous\n", "g_new and g_new0 both take the same arguments unlike * that takes less arguments than *\n", "it takes a page off of the free_page_list updates mem_map zeroes the page and returns the physical address of the page. here s another post that explains it well and also explains why using * is better than * + memset\n", "those answers was that * can allocate larger blocks than * can and etc\n", "for this reason since * uses two arguments of type size_t it can allocate bigger blocks than * will ever be able to since * takes only one argument of type size_t\n", "this means * can potentially be faster than calling * followed by memset since it can skip the memset if it knows it will already by zeroed\n", "* is faster since * initializes the allocated memory to contain all zeros\n", "* is far more common in c code than *\n", "* itself is slower than * because you have to spend some time to clear the contents of allocated memory\n", "it s conceivable that * could return address of memory location that is already pre-initialized with zeros thus it may be faster than * + memset combo\n", "in terms of speed * is likely to be faster than * + memset if memory needs to be zeroed out\n", "i remember somewhere i have read that * is slower than * because * performs initialization to zero after performing memory allocation\n", "edit i m not a java expert but i think that in java members of new array are initialized to 0 or null so * is more correct than * in my code\n", "and is as far as i know faster than the combination of * and memset on the other hand * alone is faster than *\n", "as written * would be better than * but the question used * and it would not be hard to make it sensible for use with this code too for example a conditional assignment in set_matrix such as\n", "this is an enormous amount of extra work and explains why * is faster than * and memset\n", "also * is slower than * from operating system memory allocation perspective\n", "so here * is reading more than one integer at a time from file so * is not getting the integers in file too\n", "bcrypt is weaker than * although still three orders of magnitude stronger than * because it only requires 4 kb of memory\n", "* is arguably a better option than bcrypt * having been much more thoroughly studied and tested\n", "you may be interested in looking at the * keyword which i think is better than the * keyword when you can make use of it\n", "as you can see from the above tests * is consistently faster compared to memalloc * and free\n", "as we can see copying manually with * is always slower than * because in this scenario malloc is guaranteed to allocate new memory and you re forced to copy the data in every allocation which shows us that * is indeed reusing the same address and enlarging the block size in some cases\n", "the roundabout method i ve employed is to create additional columns with a regular * and counta formulae - in other words i count the number of countries a * has visited more than x times * and then use the counta to sum the number of * in that column who have visited x times\n", "with typical libraries on common modern hardware * is faster than *\n", "indeed * is better than * and 1 * is better than *\n", "finally i also made a benchmark test which shows that * operation is slightly better than sapply * and significantly better than vectorised * alone\n", "* is better than a plain * because it is not vulnerable to * length extension attacks\n", "the structure of the * algorithm makes it less susceptible to attacks on properties of the underlying * algorithm\n", "after looking it s seems that * is much faster and better in term of security even if the underlying * function sha1 is broken which is not the case when using rsa-sha1\n", "in some cases on embedded platforms where a fast * function may not be available these may be more efficient than *\n", "the only case where * would be safer than * is when you re comparing two character arrays as strings you re certain that both arrays are at least n bytes long the 3rd argument passed to * and you re not certain that both arrays contain strings contain a 0 null character terminator\n", "also have a look at * which is safer version of *\n", "note * is safer than *\n", "you should use * to compare your strings it s safer than *\n", "* is more secure than *\n", "in few words * is safer then * but it is slower too\n", "is * slower than * as one can give pre-calculated string length to it but * does not receive such information\n", "* is a little bit safer than * because you specify how many comparisons will be made at most\n", "using sha256 with a * will be much more secure than *\n", "decode the passwords yourself and re-encode them with a * i recommend something a little more fancy than *\n", "encrypt the passwords with one-way encryption algorithm with a random * like the common opinion\u00ef\u00bc\u0161 sha-256 is stronger than *\n", "bcrypt is considered the most secure way to implement password hashing with * because it is slow - much slower than an *\n", "needless to say * product has more than one * which is kept in the producthas table\n", "* also uses a more complex construction in particular * over direct digest to make recovering the input password from an output value more difficult\n", "on the other hand if what you want to do is not rounding but elimination of fractions into one direction then you have std * that goes always higher and std * that always goes lower\n", "so * idx is the lower element and * idx is the higher\n", "now if * is higher than 0 or * is lower than 0 on any axis it means that there just as many tiles outside of the camera scoop\n", "works because * a b is always one greater than * a b except when a b is a whole number\n", "the * times the * are greater than the * xy...that s very much possible\n", "* is more efficient than *. in general use * only if you have to\n", "std * may be very slightly slower than std * emphasis added because it has to first check whether the source and target ranges overlap\n", "as an aside my c c++ is rusty but is not * more efficient than * if you know you don t have overlapping memory\n", "as already pointed out in other answers * is more sophisticated than * such that it accounts for memory overlaps\n", "* on the laptop runs slower than * but oddly enough runs at the same speed as the * on the server\n", "so in what platform and how * can be significantly faster than * if there is none why providing two similiar functions instead of just * and lead to a lots of bug\n", "note that * has more overhead than * because it has to determine which direction of copying is safe\n", "this means that * might be very slightly slower than * as it cannot make the same assumptions\n", "in addition as mats petersson said * is cache friendlier than *\n", "and it said * might be very slightly slower than *\n", "from reading other so questions such as this or this gives the impression that * should work faster than * and intuitively this should be so\n", "edit * is 2x faster than * on the server\n", "while * will be only slightly slower than * due to the assumptions it needs to make about the source and destination in * they cannot overlap it should still be far superior to any standard loop\n", "* is still a little bit slower than *\n", "it is entirely possible that in most implementations the cost of a * function call will not be significantly greater than * in any scenario in which the behavior of both is defined\n", "why is * so much slower than * or hand rolled copy on the server\n", "bad news is that the asmlib version of * is slower than the glibc version it is now running at the 300ms mark on par with the glibc version of *\n", "if you know buffers cannot overlap * is fine and may in any given library use optimizations that allow it to be faster than *\n", "on some arm platform im working on * was 3 times faster than * for short unalligned load\n", "the question is about is there really any platform where * is faster than *\n", "why does * perform slower than * on my system\n", "i changed out total for * which is more consistent with other databases sqlite *\n", "as an added answer there is also the * which is more general than *\n", "* is more general version of *\n", "with a lower order * that works better but then you lose the advantage of cubic *\n", "note the use of std * is safer and more convenient than std * *\n", "at first glance it must be significantly faster because * must be significantly faster than *\n", "the various alternatives * * work roughly the same way * is easier to use when dealing with arrays and zero-fills the data while * is useful when you need to resize a block of memory\n", "from what i can gather * generates much better random numbers than rand does however i haven t seen a way to seed it and i would like to just like using *\n", "nonatomic properties don t use locks but direct * is faster because it skips the * call\n", "technically accessing the * directly is faster than using * but there are very few situations in which it will make a significant performance difference and would probably be a case of premature optimization\n", "i should also mention that * has this built-in and may be a better solution than *\n", "since i provided a * example above your read loop can be much better written with * as follows\n", "if you cannot tolerate that use * it s harder to use so use * if in doubt\n", "* is far more flexible handling the allocation of space for you with * it is up to you\n", "one more edit if you want to use * instead which you asked about in the comments - and it s even safer than * since it will increase the buffer size as needed you would change to change the code a little bit\n", "i m also looking for more examples and explanations of complex * more complex than * in common programming languages\n", "although you could tell dancer2 plugin passphrase to use a 4-byte * it s much easier to just use * *edhash everywhere\n", "* often gives you more memory that you ask and stores the actual value in a special location that * can access at a later time\n", "the justification of * is that it s faster than 2nd * manual copy free\n", "* is worse than * in that you will need to have the old and new pointers valid during the *\n", "i mean i think * is way smarter so why do we even need *\n", "but if it works with large datasets the users will notice that using the * -only program slows down other programs much more than the * -using program with the same data\n", "in the case of overflow a free * pair costs less than * because of its internal hidden memcpy\n", "that s why * can temporarily require more memory than a * free pair\n", "a * can occur significantly faster than a * memcpy and free\n", "in c memory most other things are managed by the programmer so * is no worse than forgetting to * malloc ed memory failing to null terminate a string using incorrect format string in scanf and invoking undefined behaviour accessing dangling pointer etc\n", "then for reading i find * to be more powerful than * fscanf the differences between them all are summarized here\n", "if for some strange reason you can do the obvious * would be more efficient than *\n", "see also why malloc + * is slower than *\n", "in other words * is no more type-wise than *\n", "malloc + * is slower than * under certain conditions\n", "my question is why is malloc + * so much slower than *\n", "key derivation algorithms such as bcrypt and * aka rfc2898derivebytes are much slower than standard * algorithms\n", "key strengthening techniques such as bcrypt or * are generally considered better than plain * since cracking them requires more resources\n", "* is more secure than a simple * or even a salt *\n", "a key-stretching algorithm like * applies a quicker * like sha512 thousands of times typically causing the * generation to take 1 5 of a second or so\n", "you ll probably need to get data anyway so the unique * is probably faster too because you won t need to calculate the * over username\n", "* sha-512 offers a higher level of security and implementing a scheme where you stretch the * is even better do some high number of iterations of sha-512 - starting with the password+* of course\n", "so when i see that the * is stored in the * password and that you use that * password as * i think crypt + * is not more secure against a brute force on output hackers who managed to steal * passwords\n", "however using a * offers more protection against rainbow tables precalculated * tables so they re still worth using\n", "the more randomness and more characters your * has the better for the * but anything that s several characters long and random works\n", "prepending a * is also more powerful than directly setting the seed values because in addition to changing the internal state of the * if the * is not a multiple of the digest block size then it can also perturb the alignment with which the input is fed into the * function\n", "you can safely store the * in the db because working out a string from its * is just as hard when you know some of the string as it is when you know none of it provided the password itself is longer than the * and long enough and strong enough to take a long time to crack by brute force at least 6 chars with at least one case change and a number or non-alphanumeric i d say\n", "likely not as cheap as xor against n values but seems like there s possibility for better quality results at a minimal extra cost especially if the data being * is much larger than the * value\n", "restructuring of the database to just add an * field is better option or the only one really if your going to do it properly but you could use your currant * field to store the * as other person posted\n", "i get the impression that most people think that *ing * passwords is the more secure way of handling passwords but i can t figure out a way to comply with current company operations when using * passwords\n", "this * is nothing more than a random arbitrary string that you concatenate to the passwords and it will make your * password unique\n", "i don t know how safe could it be and how difficult is for the hacker to determinate the technique i use the thing is that the result has the same length as the * and is harder to determinate a * so if for any reason in the history hacker uses a rainbow table and catches a probable result it will be the wrong\n", "in this situation storing password * and the * is more secure than storing the credentials encrypted or not because an attacker would have no way of getting the password back even if he manages to get his hands on both the * and the *\n", "the lack of * is harder to expoit here than with password * since the * is not directly known\n", "most attacks involve generating * for common passwords so for reasonably complicated passwords it becomes harder especially with * some people use usernames as * others use randomly generated numbers\n", "example the * field might only allow a 64 characters while the generated * might be longer therefore when you save the * it gets trimmed which ultimately changes the * password\n", "could i use * to do this more succinctly than running * and dcast separately for each of employed girls guys\n", "or indeed if your system has * or you re willing to write an implementation then * is much cleaner than * + strcpy\n", "you can use either to create a new memory block which is separate from the original but naturally * is simpler since it doesn t require a separate * strlen call\n", "you should know that * allocates more memory and returns its pointer which you then overwrite the original pointer returned by * so it will be impossible to free that memory since you no longer have the pointers\n", "however if * source is greater than n then * will simply copy the first n bytes and will not terminate the string dest with a null byte because there is no space for it\n", "this is the case here because * hello is greater than 3 your last * argument\n", "the other suggestion keep repeating until x stops changing does not work either because for non-perfect squares x will alternate between the * and the ceiling of the root \u00e2 because of integer mathematics the term n x will alternate when x is slightly smaller or slightly larger than * n\n", "* performs faster and more efficiently than * but * produces less no errors on the same data set\n", "for reading large csv files you should either use readr read_csv or data.table * as both are much faster than base *\n", "you might want to give the data.table package a try check out the * function which is much faster than *\n", "interestingly for 1 million rows per file the optimised version of read.csv and * take 422 and 430 more time than * whilst without optimisation this leaps to around 1500 and 1005 longer\n", "* ... is extremely fast 10 - 100 times faster than * ... or read.csv ... for large datasets\n", "i m pretty sure the linker will * equivalent strings so the total will be less than the * of the parts for these sections but i guess typically not by much\n", "if your compiler can do this then writing functions in a way that the compiler is able to * is better than manually * the calls yourself\n", "i m well aware that * is more of compiler decision than of user going so far as even to * non-specified *-functions so the user control is almost negligible\n", "callee is too large message is printed by c1 when the size in bytecodes of the method being * is larger than max*size 35 multiplied by nested*sizeratio 90 on each next level of *\n", "if a function is static thus not exported anyway and only called once within your code and you never use a pointer to the function chances are good that gcc will decide to * it automatically as it will have no negative impact the binary won t get bigger by * it only once\n", "a similar argument can be made for * functions * is generally faster but will remain in the same big-o complexity class although there is an additional size tradeoff * makes your compiled program larger if the code was being used in many places\n", "generally speaking the * keyword is used more now to allow you to violate the one definition rule when you define a function in a header than to give the compiler a hint about *\n", "the keyword * is more about telling the compiler that the symbol will be present in more than one object file without violating the one definition rule than about actual * which the compiler can decide to do or not to do\n", "but as the * code gets longer the savings for * become smaller so maybe you could just have a hard limit on the size of the code - any code to be * must be smaller than the limit\n", "templates will be * in the standard meaning of * which is more related to the one definition rule than to actual code *\n", "* * produces fatter code which is faster the * functions will not appear in the call stack\n", "in reality the * keyword has less to do with * code and more to do with allowing legal violation of the one definition rule\n", "this allows you to use the assignment operator instead of * and requires 1 less call to * - the one you make\n", "afaik * is not slower than *\n", "in term of speed square rooting is easy a few arithmetical operations for some newton-like method but it is not clear what asin does probably quite *tly * is likely to be one order of magnitude slower than * and thus one square root is likely to be quickier than those two transcendental function calls\n", "but when is * and clone better than *\n", "there is a nice comparison of threads and processes here when is clone and * better than *\n", "the features stemming from those discussions permit less extreme * than processes which is symmetrically like the provision of more extensive independence between *\n", "just wanted to add that using strrpos + * is slightly faster than * + end\n", "it s like asking whether * is faster than *\n", "* is more efficient than * as it only evaluates the second argument if the first is null whereas * evaluates both arguments every time\n", "the ansi standard function * is simpler than using * and decode which should be obsoleted anyway\n", "the * function is used here because it is more portable than * or ifnull\n", "2 however * requires all arguments to be of the same data type thus being stricter than * which will first attempt an implicit conversion\n", "joe duffy s blog implies using * is more efficient than *\n", "* is probably better than * in most cases\n", "dynamic memory management on an small embedded system is tricky to begin with but * is no more complicated than a * and malloc of course that s not what it does\n", "if you don t mind the libc allocation functions * is even more efficient it wont copy the data on a shrink just mark the extra memory as * and if you grow the memory and there is memory * after it will mark the needed memory as used and not copy either\n", "a malloc * pair can be better than a * if you don t need to keep around the original memory\n", "a fairer comparison would be comparing stringstream to the * sscanf line of functions which would be slower than * but still faster than stringstream\n", "a * is nothing more than syntactic shorthand for a get set *\n", "edit as willeke has pointed out accessing a * directly is technically faster than doing so via an * via self\n", "it means a declared * is more than a pair of * methods getter setter\n", "that suggests another aspect where a declared * is more than a pair of * methods that is more static type checking although it is undesirable here\n", "so i guess * should be much faster than *\n", "i probably feel * might be bit faster than * as * changes the pointer position to the new address space that you have mentioned and there is no date read is happening\n", "in general it is nicer in c to have the caller allocate memory not the callee - hence why * is a nicer function in my opinion than *\n", "the compiler is * to choose a method that is more efficient than *\n", "using * is considered safier than * because the second one can easily cause buffer overrun\n", "* is not safer than * it just trades one type of bugs with another\n", "so that the * is more secure than *\n", "* is not safer method to use as *\n", "the best solution is to write a custom version of * that is less weird or if you know the length of the input just use *\n", "i.e * is actually better than the simpler * if you are willing to improve the code\n", "myth 3 * is a safer version of *\n", "you should use * or * safer than * to copy the string stored in the array between arrays\n", "for instance * is mostly useless it gives you nothing more than *\n", "in general * is a safer alternative to *\n", "* is more recommended that * because protect your code against buffer overflow\n", "using * 3 is better than * 3 but things like strlcpy 3 are better still\n", "i was exploring around with c regarding * since most people says that it is safer than * additional parameter length to avoid buffer overflows\n", "* is safer than *\n", "* is notoriously unsafe as are it s cousins *_s and * although they are mildly safer than *\n", "* could be better replaced by * which does some bound checking\n", "if * is anything like * it will write one byte more than * returns to zero terminate the string\n", "* incoming connected will overwrite dataa and maybe datab if your first token pointed to by header is shorter than * connected\n", "the math.floor * method being marginally faster than * and mod\n", "doing a single * and * is faster and simpler than doing 2-3 * calls\n", "* is a function to read a single char simpler than using *\n", "if not multiple * calls will still be faster than multiple * calls because the overhead of the latter will be greater\n", "it requests memory from the os kernel but the request is not satisfied until the memory is written to with * . this allows for greater efficiency in the system s memory management but it can result in misleading * behaviour\n", "i confirmed that in debug mode the * version is slower about 130 \u00e2\u00b5s vs 60 \u00e2\u00b5s for the * version\n", "the fact that using * with iostreams is faster than * at least in release mode runs counter to the reasoning that copying all that data must be slower than not copying it so i m not sure what all optimization is able to avoid and i didn t really look to find any explanation but it d be interesting to understand what s being optimized away\n", "it should be in my opinion more strongly noted that password hashing with * is no longer secure and should not be used as others noted use * or bcrypt\n", "you d be better off using * for this as it s dumber than *\n", "* will always be faster than * for any real world situation even in the corner case i spoke before look page_copy_fwd_maybe\n", "the * version is not more complex or more dangerous than the * version\n", "which is more efficient is up for debate but based on cpu bulk instructions which can copy an entire block of memory in one instruction * is probably faster as * would check each copied byte for a nul character\n", "if you compute the length of the string for unrelated reasons or have the length of the string from other resources it s unclear to me whether * is better or worse than *\n", "even if underlying implementation is not so different * is much faster because it does not have to check what it s copying * will stop when it ll copy the end of string character null\n", "but for the example you give it doesn t matter - if it s going to fail it will be in the initial strlen so * doesn t buy you anything in terms of safety and presumbly * is slower as it has to both check bounds and for nul and any difference between * and strcpy isn t worth changing code for speculatively\n", "the second *ing function is * which supports many more algorithms and variants than * but does not support some algorithms that * does\n", "* is newer and seems to support more *ing alogrithms than *\n"], "method": ["if your array s * is greater than 1 at the start of * some other object is retaining it at least temporarily\n", "the * api works better than * normally but has usage limits and the implementation is bigger\n", "2 location + reverse * - seems more reliable but requests location services on the device does it work on wifi only tablets and for it to be enabled and requires time to a fetch location b server call to reverse *\n", "i had a similar problem using ggmap * for a batch of locations where roughly 20 of locations gave the over query limit error even though *querycheck would show more than enough * queries remaining and the errors were sporadically spread throughout the locations not just the last 20\n", "can the * gem support more than one * step\n", "we can call its * method to decide whether it is bigger than * to or less than any int\n", "is a generic type at compile time java will require that an instance provide an implementation of int * t o which from the javadoc returns a negative integer zero or a positive integer as this object is less than * to or greater than the specified object\n", "you should be using * method for less than or * or greater than\n", "i am using the * method in java to try and check if a certain date is greater than or * than 24 hours after another date\n", "* return a negative integer zero or a positive integer as this object is less than * to or greater than the specified object\n", "if this works it seems that u are still comparing the strings in your ordered list and u should now check if the return value of * is less grater * to 0\n", "* returns a number that is less than * to or greater than zero corresponding to the first string being before the same as or after the second string respectively\n", "note that in both cases you can take advantage of the fact that int also implements so you can use its * method to determine whether corresponding values in each instance of your class are less than * to or greater than each other\n", "i am using the min value because i read that the * method returns negative 0 or positive whether the first string is less than * to or greater than the second\n", "in the * method you can then write the code which will call the getters for the year month and so on until it figures out whether the current object is less than * to or greater than the object o being passed into the * method\n", "all i changed was the first * comparison to be less than instead of less than or * to\n", "* method returns a negative integer zero or a positive integer as this object is less than * to or greater than the specified object\n", "this interface defines the method * t which will return a negative number zero or a positive number if the first object is less than * to or greater than the other one respectively\n", "according to javadoc * needs to return a negative integer zero or a positive integer as this object is less than * to or greater than the specified object\n", "i know that in java there is a * method that you can write in a class that will compare two variables and return a value -1 1 or 0 signifing greater than less than and * to operations\n", "you need to call the * method which will indicate the result of the comparison by returning an integer less than greater than or * to 0\n", "most likely hashcode will be faster unless for whatever reason calling hashcode + * once is much slower than calling * log n times\n", "and my guess as to why an element is being dropped is your * method never returns a 1 in any case so elements are always considered to be less than or * to other elements which is probably screwing with the treeset\n", "the interface defines one method * that must return a negative integer zero or a positive integer if this object is less than * to or greater than the other object respectively\n", "in the * method you can decide which fields are used for the comparison greater less than or *\n", "with this rather than needing to implement a comparator all you need to implement is the int * class o method in the class which returns a negative integer zero or a positive integer as this object is less than * to or greater than the specified object.\n", "implement * in temporary temporary.* left such that it returns a negative integer zero or a positive integer as temporary is less than * to or greater than the left\n", "when one of the strings is a prefix of another the performance of * is worse as it still needs to determine the lexicographical ordering while * won t worry any more and return false immediately\n", "* compares values and returns an int which tells if the values compare less than * or greater than\n", "or is it * returns negative numbers 0 and positive numbers respectively indicating whether the calling object is less than * to or greater than the specified object\n", "* returns a negative integer zero or a positive integer as this object is less than * to or greater than the specified object\n", "the * method returns one of -1 0 1 depending on whether or not the argument is less than * to or greater than respectively\n", "the only significance of a * return value is if it is greater less than or * to zero\n", "* defines whether your base student is greater than less than or * to your studenttocompare and you can define these with any criteria you please\n", "icomparable declares the * method which returns an integer that specifies a less than * to or greater than relationship between two objects of the same type\n", "per the page i linked to * returns a negative integer zero or a positive integer as this object is less than * to or greater than the specified object.\n", "the * method returns 1 0 or -1 depending on whether value a is respectively greater than * to or lesser than value b\n", "i can make this happen with the minimal project where * does nothing more than call super and *\n", "as of right now * is much faster than *\n", "is * ... more performant than * ...\n", "right now * is much slower than * as you can see here\n", "i have seen that the * function is really faster than the *\n", "the only problem that as far as i know using * is slower than using * and it was required in old browser versions like firefox 2 or such\n", "that beeing said * is much slower than * at least when i tested them earlier this year\n", "using * canvas is much faster than using *\n", "* seems to be much faster than *\n", "using the clipping version of * will be faster than *\n", "for some reason when the duration of * is greater than the duration of * my player will complete the * actions first even though * had to come first and then jump to a different x-position and then move with duration 4 to complete the *\n", "if the value of * is greater than * then an active touch is going on\n", "if the value of * is more than 3 seconds beyond the current time and the time of * is still before * then it s time to show your hint\n", "note the show * effect is much softer because of the commented * fadeout declarations that were triggering console errors probably because jsfiddle uses jquery slim now\n", "i recently switched from unity to unreal and the first thing i wanted to do is create a * but the only thing it seems to support is a skydome which has far more polygons than a * and the generated .dds *map files are far too huge to be used in webgl projects\n", "otherwise if * is being called more than * receiver is registered multiple time and the app mis-behaves\n", "so * is called slightly earlier than * the only difference is that when * the view have been already drawn instead in * the view has still to be drawn\n", "you could try the block of code in the * method which is called earlier than *\n", "if you re simply looking to * the value from your cross table you shouldn t need anything more than the * * items menu\n", "it displays things normally on the screen of course but when you go to print preview in ie7 the only thing that * is longer description. so in other words it * that first column and it also * the second column\n", "the issue is that if i scroll to the right and click on say column index 20 really any index that * indices on the left it will freeze all columns below that index which causes the table to snap back to index 0 and not allowing me to scroll because more columns than * are frozen\n", "* less will be * and load more button will be * .thanks\n", "i suppose it is because you * them faster than you * them so for a slight second the overal page height is shorter than it should\n", "term * is more appropriate for run-time dynamic * *\n", "it doesn t * at all if * is called less than 0.5s after * and it * for at least 0.5s this prevents very fast flickering stuff that you might see with naive implementations\n", "also as mentioned elsewhere * is a better option to css visibility as * sets display none and not visibility\n", "ironically enough its object model * more details than it * - good for learning but bad for abstraction\n", "you can * * the status bar on android 4.1 api level 16 and higher by using * * functionality\n", "can anyone help me to * it onload and * when is more than delta and * on scroll up when is before delta\n", "to * action bar invoke * method using getsupportactionbar getactionbar in case of minsdkversion is 11 or higher as * below\n", "according to this test - * is slightly faster then * since it doesn t use animations\n", "* is simpler because it will * it for you automatically when it is done so you can save that code and it automatically waits for the animation to be done before hiding the element something your current code was not doing\n", "for formatting a single numeric value * is marginally more efficient than * because * has a bunch of overhead to parse the format string out of the curly braces and then pass it to *\n", "no - * is for seeing if one object is greater than * to or less than another\n", "* is an interface that defines that two instances of the implementing class can be seen as greater than less than or * to one another\n", "for some reason * works better than show or simply removing a hidden class via * if you take that approach\n", "that s because * is executed faster than * method you can remove the class when animation is complete\n", "* is better than * here because * will start at every 5 secs but * will start once each time your job is done and wait for 5 seconds which will make your script adaptive to server response timings\n", "i think using * is safer than *\n", "also i advise you to take a look at javascript s * since it is more appropriate than * for what you want to do\n", "the use of one * timer is more preferably than several * timers\n", "well * and * essentially try to do the same thing but for your case * method will be more accurate than *\n", "it seems that * has bigger priority than * which could be delayed\n", "but * would be better than * because with * if your previous ajax request is not complete and you start another request there will have multiple requests which would sooner be problematic\n", "* is more useful than * here as it recurs automatically and you don t need to keep setting it\n", "* would be the better way than *\n", "i read that * is less cpu resources intensive than *\n", "also * is a better approach than * as you explicitly reset it on each round trip\n", "also in my experience at least * offers a much more aesthetic experience than * or requestanimationframe\n", "* is better than * for this task\n", "* is more relevant than * since the first method just waits for a delay and executes a logic whereas the second function is meant for repeating a logic on periodic intervals\n", "i understand from searching on so that * is a better way to approach this that * which i was using initially but i haven t figured out how to specify that the function needs to repeat\n", "also * is often better replaced by *\n", "using * for such purposes is better idea than * as you don t have to clear them and they won t get crowded - if your fight takes longer than period then this won t run into next fight\n", "it uses * however * is a better solution than * because it will only queue a new one if the previous one is complete\n", "keep in mind that using * is less efficient for this case then using * which doesn t require comparing times at all as it schedules the alarm to occur at a particular time as * will use more processor cycles to both schedule a check and then to compare the times\n", "now a routine to initiate once per second - * is usually more useful than *\n", "and im not shure about this statement javascript likes * more than * which gives a little performance boost\n", "i find * is a little cleaner than chaining * calls\n", "as for me * is simpler than * in this case as you won t need to clearinterval in the end of the array\n", "if so then you can just pop lines off the array using * which is better than * for most animations\n", "* is much more suited for countdown timers and things you need to run continually since * only runs once and you need to keep on calling it\n", "using * is considered better than * because of the screwy ways that js s event loop works\n", "in this case * behaves more like * ..\n", "the * example does more or less the same * from an oop perspective\n", "the * solution is faster than using in and * clauses\n", "for such numbers as 54321 the else statement will be executed never because any * digit is greater than max1 * the first two digits\n", "for me they serve pretty same purpose to hide complexity * accordion is imho better for continuous-reading it s easier to quickly go to * section while tabs seems to be more random-access\n", "in both cases you may also have to shift one or two elements off the start end of some blocks to the end start of the previous * block again at most o n 1 2 times to maintain an invariant that no two blocks differ in size by more than 1 * for the last which is used to take up slack\n", "now i would like to take the ceiling of this number * in cases where the amount it is greater than the * lower integer is smaller than some epsilon\n", "you can t * earlier than *\n", "these methods which give us access to private members are known as getter * or better knows as accessor *\n", "* is less commonly used than *\n", "in my fragments data handling is taking place starting from * which happens earlier than *\n", "more detail set the amount of time the animation will take for * and use a delay for the * animation that is longer than the * animation time\n", "otherwise you will run into issues of trying to * and * at the same time if your delay is shorter than your *\n", "i want smooth * * animations instead setting visibility where * is slower than * animation so i ve used enteractions and exitaction of datatrigger\n", "i ve found that using a simple for-loop iterating over all elements in the string and comparing using * performs faster than * or regex\n", "if the calculation is expensive or the * is executed more often than the * for the changeable properties playername by far it can be an optimization to change the property inside the class into a read-write property and set the value every time the changeable properties are changed\n", "if we put our filter in between these calls either in * or * * is more efficient as it is called only when filters change we modify original filtered list with our filter and return it back through the *\n", "but then your * is less restricted than your * which is odd.\n", "note that the test bean has a very special design as the * returns a more general type number than the * requests integer\n", "the code in the * is far more interesting than the * should it not take precedence and be defined first\n", "if your * takes more than one argument it s not called a * anymore\n", "you can override the * s level to be lower than the * s level with either private set or internal set\n", "the * complexity can be higher than the * and thus validate a unit-test\n", "* is not better than *\n", "* is a little more complex than * though\n", "* has worse performance than *\n", "standard * request is not more secure than * one\n", "* is basically for just *ting retrieving data a * should not have a body so aside from cookies the only place to pass info is in the url and urls are limited in length * is less secure compared to * because data sent is part of the url\n", "using * data is more secure than * because with * the details would be in the query string portion of the url\n", "i am asked to apply to all the actions of one mvc project for security reason says * is more secure than * which i disagree with\n", "is type * faster than type * cause i am curious how both work\n", "but do also remember that in your case * request looks more appropriate and as balusc says its not good practice to use * for bookmarkable page-to-page navigation\n", "as powelljf3 said * is more secure then * though it can still be gotten to\n", "the plugin defaults to requiring a * request to logout but using the config setting you reference you can make your application more convenient to use but less secure by allowing * or * requests\n", "i ll * better with formatting and being more specific with the *\n", "as suggested in the comments since you are saving data * is more appropriate than *\n", "on an unencrypted connection * is no more secure than *\n", "i m trying to * deeper with * and pre incrementors but am a bit stuck with the following expression\n", "* has a higher overhead marginally if we re honest but it all adds up but it doesn t become part of the url so can t be seen by say a casual observer over the user s shoulder - whereas * can\n", "a * request would not provide any more safety than a * request any half-decent web debugging tool can forge * requests\n", "it is said that * method is faster than * but i don t know why is it\n", "on that base a * is more appropriate then a *\n", "to * more help with that * information about your table structures and content\n", "using the * method isn t necessarily more secure than *\n", "* is more secure then * and data transfer size limits are also there\n", "* is absolutely not more secure than * as to man in middle attacks\n", "using * is more secure than * in the sense that data shown into the url in * request but not in *\n", "actually if you would like to retrieve specific task with all its details * request would be more suitable than *\n", "* is more often used on unsecure type of datatransactions like for example a searchform and * is used when you want to make more secure things like a login form\n", "for example * request are considered more secure than * request as creating a * request is relatively harder than creating a * request\n", "however in the comparative table i linked * is listed as less secure than *\n", "* makes it more indirect to intercept and read the payload than * but not safer\n", "another * outlines some more details on this how to * master-master replication with subversion\n", "it is just an example that shows a scenario in which * is more secure than * but i don t think it would be a good idea to choose * over * from this attack reason\n", "what i m trying to * is a page that displays 20 users per page will have pagination with the fallowing info it should show only users that have more than 2 * published\n", "* is also more secure than * because you aren t sticking information into a url\n", "note that doing this will * the values via * var instead * wich makes more sense since you are sending via * your form\n", "the * * may fix the problem - * is much more lax with security than *\n", "using * is much easier than using * for most of developers\n", "* requests are no less insecure than * requests\n", "* is no more secure than * over the http protocol\n", "in effect * is no more secure than *\n", "for eps is the same situation the * script is more readable but you should apply all necessery transformations on object before * its size\n", "however a * request is less efficient as a * request - bear that in mind and only use * if you really need to\n", "i believe * is better than *\n", "i m sure there s a work around to use * for emails but the alternative * is much more easier and doesn t require any hacks to * around\n", "however * is a bit more safe than * because * could be stored in the history\n", "characters * is more robust and secure than *\n", "is this why * method is more preferred than * or does it really matter in any case if it internally uses * or *\n", "* is not more secure than * as it\u00e2 s also send unencrypted\n", "how to * more than 20 * from instagram using their api\n", "supply more data upon * and receive less data upon *\n", "you can feel like * is more secure than * all you want but it s a false premise\n", "first off * is no less secure than *\n", "you ll hit problems with larger submissions and file-uploads as the size limit for a * is much smaller than a *\n", "why * method is faster than *\n", "the problem i have noticed is that sometimes the jquery * result is retrieved earlier than the load of the .js file has been completed so i * an error and of course the jquery plugin doesn t work\n", "but a * seems more logical than a * anyway\n", "* has one more letter in it than * so it s less compact\n", "* is more appropriate than * for queries because of its safe semantics\n", "the only scenario in which * is slightly less susceptible is that many websites that aren\u00e2 t under the attacker\u00e2 s control say a third-party forum allow embedding arbitrary images allowing the attacker to inject an arbitrary * request but prevent all ways of injecting an arbitary * request whether automatic or manual\n", "in my opinion * requests are not more secure than * requests and the data can be easily intercepted\n", "but i believe sending data using curl with * method is better than * method\n", "i need a query to * results from stackexchange dataset in such a way that it returns me 100 top reputation users with not more than 3 * body of * for each user\n", "i m able to query my database below to * the result that i want but i don t want to have to iterate through all of the author objects just the ones that have more than one *\n", "from a hacker s point of view a * forgery is much easier than * forgery at the first you only * a link at the second you need to point to a malware website with hidden iframe and autosubmit forms but both of them fail if tokens are checked\n", "ajax calls using * are more performant than * according to yahoo\n", "data should be in * or *.if you dont put your data in your form then you will have to use * which is less secure than *\n", "when i try to * more than 100 * it returns\n", "when * is better than *\n", "i * far more than 50 *\n", "i noticed once the length of a * parameter is longer than 400 bytes or 2000 bytes for a * parameter g-wan returns 400 error\n", "yes * is better than * because * data is not usualy logged by a proxy or server but it is not secure\n", "usually in ajax * method is faster as it doesn t involve proccessing * fields and as you are only *ting information i would stick it\n", "i have simplified the app so the * is shorter but the basic problem is that if i * test in workouthandler - it cannot recognize methods in wardenstrategies or loginhelper unless i also include those files in the handler they are already included in app.rb\n", "please always try to use * method for submitting data as it is more secure than * method\n", "hence * is more secure than *\n", "* is more vulnerable than * as it can be transmitted and stored\n", "instead i m using * which isn t exactly bullet proof but still a better choice than * in this case\n", "when you use * data is a alot more safer than * and you can send large no\n", "since * is better suited to transfer large amounts of data or difficult formatted data it is the established standard for submitting forms but it is in no way safer unsafer or more less secure than * requests\n", "also it seems that my view *s called more than once according to the log outputs and that is normal except it should be a * then redirect to a * but it seems to have more than one * request\n", "other than that accepting a * request might be - depending on the server side rest framework - slightly more light weight than * requests\n", "also a * request would be better than a * if you re sending json\n", "although * is more secure as compared to * when ssl is present\n", "there appears to be a common mis-conception that * is more secure than * simply because it seems more obvious how to * a browser to manipulate the * variable\n", "use * its safer than * if you use rest\n", "this blog * is more detailed but unfortunately does also not mention where to * the product key\n", "both * * user can put any thing in it and you must filter any input that user make it in your form example the value in textfiled sent to server by * method and that don t make it safer than * method the difference between them that the textfiled value doesn t visible in url\n", "after that is done you can go into security details where * is slightly less secure than * - see the comments for details.\n", "if you have both * and * params with same name and if you using then it will take * variable only.because * has the higher priority than *\n", "this * is more to * advises and ideas rather than solving a problem\n", "* requests can be much larger than * requests as * requests are limited by the maximum length of a url\n", "this means the amount of data you could pass by using * verb is much more than by using a query string and a * method\n", "while users can manipulate * it s far easier to manipulate *\n", "i need to create a menu based on that list but cannot simply list all * and * it because it is a busy blog and has more than 2000 *\n", "in this case * may be better than * anyways\n", "i m trying to * cloudinary direct uploads working on a rails app using carrierwave and accepts_nested_attributes_for to submit one or more images with a *\n", "* is more secure than * because you aren t showing information anywhere\n", "i have been trying * data out of new reddit * but theres limitation where you cant * data from more than 100 *\n", "i know there can be problems with *s_per_page but nothing is working i ve searched a lot to * the query to display more than one *\n", "* method are generally consume more secure than * because when we use * method than it can display the data in url bar.if the data is more sensitive data like password then it can be inggeris\n", "* is also more secure than * because you aren t sticking\n", "* method is not safer than * data never trust datas coming from the client side\n", "we provide a number of support resources which may * faster response than * on third party sites including the virtuoso users mailing list public support forums and confidential support cases\n", "* is more secure than * this is just a quick example\n", "but using * instead of * presumably adds one more level of protection for xsrf types of attack it does not you need some form of explicit xsrf protection token with * or with *\n", "anyone knows how to bypass this problem and * more than 100 *\n", "the * request is marginally less secure than the * request\n", "i can t help with the coding side of your question but if you re passing in a non-url input then the * method would be more appropriate than *\n", "if a * has a more recent reply i want to * the replies created_on value but also * the * *_id and subject\n", "however note that * is not much safer than *\n", "i think whoever said * is better than * when using passwords meant that the passwords would be part of the url in the * request which would obviously be bad\n", "note that i am assuming a user can * invited to more than one * which seems logical\n", "* and head being much more frequent than *\n", "and apart from common misleading information where * is safer than * it is not\n", "sometimes * is a better option in those read-only scenarios because it makes your url scheme richer and avoids these sort of * warnings\n", "so if your * request is longer than 255 bytes it s advised to use * requests instead\n", "using * prevents this particular attack but is this actually any more secure than using *\n", "i am using custom delegate methods but when i run this the * request is performed earlier than the * so i cannot * the key before the * is done\n", "but generally * is slower and would be bigger in size than a * request\n", "* would obviously allow for a user to change the value a lot easier than *\n", "because * method storing capacity of response is better than * response\n", "is * method is better than * method if you use a form\n", "one reason * is worse for security is that * is logged by default parameters and all data is almost universally logged by your webserver\n", "i had the idea to switch automatically between * and * for example if cookie set because * is more fast and cache able and * is more save\n", "when taking input we can use either * or *.the input is shown in the url when using * but not when * is used.is there a situation where * is more useful than *\n", "* requests are no safer than restful requests which are no safer than * requests\n", "so is it enough only to use limit to * more than 50 *\n", "* request is a little safer than * because the parameters are not stored in browser history or in web server logs\n", "maybe i would mostly always choose * over * it s more tidy and refreshing and going back issues with * method are a thing from the past in any major browser they just ask you if you want to resend the data don t they\n", "i don t recommend sending such parameters via url * it is better and safer if you use * form method\n", "* is faster than *\n", "one more thing some guys would misunderstand that * is safer than * as user can not see the sent data\n", "* isn t more secure than *\n", "this response thus assumes that a request using the * verb would not use the uri to transfer sensitive information or it would be no better than *\n", "while the * method can be submitted with forms or ajax calls and it is pretty safe at least more than the *\n", "* is a better method in this case than *\n", "i also found a * that suggests a less brute force method to * the urlroutingmodule to catch the combres.axd route\n", "i m searching for the best method to * result with database contain more than 100000 * and more than 100000 cat\n", "* is simpler and faster than * and can be used in most cases\n", "for example on the blog page of my current project i have two wid*s in the sidebar one for latest tweets and one for latest music news however as you can see on this page the content of the blog * all test *s... are much longer than the height of the two wid*s and would of course * larger as more * are added\n", "so i have a * system and i want the box to * larger as more * come in\n", "as a pragmatist i m inclined to use * because implementing it is way simpler than *\n", "hope you * the more clarification by this *\n", "following my comment on your original * here s some more information that will help you * through this\n", "however there s one thing we haven t considered yet - what if you never * more than 5 *\n", "* is not any more secure than *\n", "* requests have smaller limits than * in the specs\n", "as far as security goes * is much better than * as the data is sent behind-the-scenes rather than embedded in the url making it the typical protocol for login info\n", "firstly * can seem more secure than *\n", "i normally use something like this tag.object.annotate num_* count * .filter num_*__gt 2 to * tags with more than 2 *\n", "using * allows for more data to be transferred since * will append the values to the url itself\n", "edit taking into account what was said in the comments though it looks more secure and is recommended by w3 see touheed khan s answer * isn t more secure than * and as riggsfolly said\n", "here i don t like that the body of the * request contains more different fields then the body returned from the * request - but maybe this is not a problem\n", "why everybody here is saying * is more secure than * when used over https\n", "first of all if your instagram client is in sandbox mode then you can t * more than 20 * more clearly last 20 *\n", "* has more capacity it can transfer more data than *\n", "a * is a bit quicker and than a * in an ajax scenario\n", "* gives you more options and dosn t have a limit on parameter query string length like * the only negative is * is slower by a couple of milliseconds to create the request\n", "you can t * a patent any more because with this * i will claim prior art -\n", "not able to * more than 100 * in single rest api call for the linkedin company updates\n", "*s have a size restrictions * do not or at least it s a configurable setting on the server and has a larger higher end than a * request would\n", "the * at has more information on how to * that access token\n", "this * goes into more details how to * charles proxy work with android 7 nougat\n", "a * has broader application and is generally used to send persistent data to a server in fact prescriptively * should not be used for this purpose\n", "have a look at this * it is probably easier to * the selected radio button by changing your itemscontrol to use a listbox with the existing datatemplate\n", "stick with * on any action that does more than * data avoid xss-issues\n", "* is more performant as it is idempotent and does not contain a message body where as * does\n", "if you use * when * is more semantically correct it is less communicative of the intent of your request since * usually means you are sending a payload\n", "* would obviously allow for a user to change the value a lot easier than * so suitable checks for existance and ownership of the record would be important\n", "last to address other answers while you should use * data when modifying something it is in no way more secure than *\n", "this blog * explains more on how to * an access token on android\n", "however it isn t clear how much the value can be for the standard tumblr api you can t * more than 50 * at a time\n", "the pinoyyd * is neater and * straight to the point how do i authorise a background web app without user intervention\n", "additional options are to show this via a timeout so it s only shown when the * takes more than a short time and to use some form of fadein not sure if possible with a dialog then you don t * the annoying flash on the times it s very quick\n", "i used * because is faster than * if you need it just to * a list of element for suggestions\n", "* data isn t inherently more secure than * data\n", "* has a lot more advantages than *\n", "* is always faster than *\n", "* request are safer than * but that does not mean are invulnerable\n", "i wouldn t call * more or less secure than *\n", "curl commands seem to work as do some other * commands from older code but when i log out req.body all i * is\n", "when i want to * more than 54 * i receive this error\n", "however * data are not much safer than * data anyway\n", "i just want to know if i use * method for login api then is it safer than * method\n", "you can t * more than 20 * if you are a sandbox user\n", "* is a little safer than * because the parameters are not stored in browser history or in web server logs. also data is not displayed in the url\n", "i don t want to use the * request since it says in the guidelines of a restful api that it should use * for this purpose plus i might want to send more data than * can handle\n", "* * method doesn t have the same lenght limit you can use * to send more data than with *\n", "i was taught from him that using * requests was better than * but after reading up i would like to switch to * my only problems is i am a little unsure how to modify my code to switch over from *\n", "so for creating a friendship * method suits better than *\n", "an initial * request to a page usually costs less than subsequent * anyway so there s not much reason to avoid it\n", "param should be params and therefore your data is not being serialized which would explain why the server is rejecting your * since * requires more privileges than * presumably\n", "this would make things considerably easier as the android library has native support for json serialization and making http * requests to restful urls is much simpler than http * requests it s not a huge deal but just less stuff you have to worry about\n", "also you can determine if someone is submitting a form or *ting the form by checking if _server request_method * which is cleaner than using a * url parameter though i guess there s nothing wrong with the other approach...\n", "the * is usually faster because it has no encapsulation sends data via url usually with a 255 character limit as * exists encapsulation by being sent by the body of the http request\n", "1 reading other questions about the rest method for this proposes i think that i should use * better than *\n", "speaking of * request types you should also know that * requests tend to perform better than *\n", "and i think * is better than *\n", "i am aware that a * is better for this kind of thing but my question is is this expected from a * request\n", "* is more appropiate for idempotent queries while * is more appropiate for action queries but you can shoot yourself in the foot just as easily with any of them if you don t understand the security architecture for the application you re maintaining\n", "although putting data with * method little harder than simple *\n", "i run the ab test several times with same results * is faster but * is lighter\n", "i have seen other people asking the same question why * method is faster than *\n", "if you are curious though rather than just trusting a book or a blog * it is better to make a simple example and take it apart - you * it straight from the horse s mouth and you learn a whole lot more\n", "sorry that this * is more of the and for further information... type than a direct answer which i think has now been given-- i just thought it was helpful not to * things lost inside comments\n", "these steps were taken from this blog * which contains more details about how to investigate and what output you ll *\n", "i * somehow category repeated if it has more than 1 * eg\n", "* is better for some cases but it seems to me you should use * instead\n", "is * more compact than * since * requests have to be url-encoded\n", "another reason but rather a minor one is that * is easier to exploit that * as there are more ways to trigger * request than to trigger * request\n", "in my opinion the second way to achieve this is better because using * is not thats ecure in my opinion.it s easier than using *\n", "as it s widely known that an asynchronous * request is better since the user won t * a perception that the app has crashed while it s loading the long process\n", "i think using * is more elegant and has more options for further development than passing them via *\n", "i d question whether * is the right verb here considering you need to pass a complex type it sounds like it would be better served as a *\n", "i try it and i * all the categories and not just the ones with more than 1 * in them\n", "more over it seems that * requests are more lightweight than * under high load\n", "a * request will be slightly smaller than a * although using websockets would give a more accurate figure\n", "yes generally * is a better way of submitting data than *\n", "usual way with tagging is to * objects by tag but if tags are used by few applications it may give more than *\n", "this blog * provides more info to * started\n", "the usual wait time of the * is not too long not too larger than * so i don t think that should be an issue and * always *s back with a 200\n", "so it is considerably less then what facebook states in their documentation at least looking by the date however by count it seems you * more than 50 *\n", "you should check this thread why * method is faster than *\n", "there is a default limit of * method which is 2mb which is way higher than *\n", "also * is generally considered better than * for ajax calls as it doesn t have the same string length limit slightly more secure too\n", "the problem is that the * shipping takes longer than the call * alert then shows me the session variable not updated\n", "you can also chose to * more than 25 * at once\n", "regarding your question about safety -- the answer is * is absolutely no safer than *\n", "some people say * can be less safe than * -- but to the seasoned user this doesn t make any significant difference because they can intercept and modify headers of the request\n", "generaly * is shorter than *\n", "* is slightly faster because the values are sent in the header unlike the * the values are sent in the request body in the format that the content type specifies\n", "however if you want to * more than one * rather use functions mentioned above i think the most important thing is to grab them in one db query and not in ineffective way one-by-one\n", "other than the fact that * has one character less than * i doubt there is any performance difference\n", "however i ve searched for a couple days and am not *ting a definitive answer and i need a better understand of this so i know no better way to * more info than to * here\n", "generally when passing lots of data to the server to be processed or stored using * is a good idea since * has a lower limit than that of *\n", "also note that using * is absolutely not more secure than * because the request parameters aren t immediately visible in url\n", "using * over https is better than using * and http\n", "to answer part of your second question with .net if the * is larger than maxrequestlength part of the .net configuration but smaller than maxallowedcontentlength part of the iis configuration you can create a custom http module to * at the portion of the * that came through\n", "is * safer than *\n", "edit2 seems as if i m wrong re * being more secure than *\n", "here s the solution for * variables as well which is probably trickier for more users than the * solution\n", "i want to * all the users that has more than one * but\n", "if the * has more than 9 pictures related to it i only * data from the first 9\n", "* is better but if you want it to be truly restful you should ensure that the uri uniquely identifies the resource and use *\n", "i think that in that case the * verb is more appropriate because * really means i want to create something new\n", "side note it looks like you re using the * form of file upload which as the docs say is considerably more complex than *\n", "* is also more commonly used for partial updates as * generally implies sending a full new representation of the resource\n", "anyway http 405 is telling you that your backend does not support the * method and probably it s expecting a * method with the x-http-method-override * http header since * is more standard method in rest than *\n", "i m very sorry for the long question but i thought instead of dividing the question into several * it is more convenient if they are * into one place\n", "more importantly in this case i think * is more appropriate than *\n", "side note if you are attempting to create a new customer you may want to use * instead as it may be considered more restful as * s are generally for updating an existing resource but this is up to you\n", "on the php docs link above they say a * request is much simpler than a * request when uploading file along with this advantage what other advantages disadvanatges do the * has got compared to the *\n", "http * isn t inherently any more secure than http * if you re allowing the uploaded files to be exceuted on your server\n", "words like arbitrary processing and neither not safe make * sounds less secure than * when there is a choice\n", "to receive a file in your api i would use a * request simpler than * multipart and fetch the data from the stream php in*\n", "if noop a * may make more sense than a * which would imply creating a second connection\n", "q1.i know that * is better than * for name-value pair parameters as the get exposes it in url and * doesn t\n", "* does not mean update any more than * means insert\n", "typically you would not allow a http client to determine the uri of a new resource so a * to blog would be safer than a * to blog article-uri although http does cater for appropriate responses should the server be unable to honour the intended uri\n", "the client * scores and fetches highscore lists from the server and everything seemed to be working perfectly we had been testing it for a month with no problems and the code is really simple with not much more than a * get\n", "* is designed for file uploads moreso than * which requires doing a multipart upload but then it comes down to what your server can do as to which is more convenient for you to implement\n", "however i ve seen that object s * is much faster than *\n", "i m concerned this is going to * worse as we * more tests into the specflow project\n", "this could mean that * is now slower than * and we have to wait\n", "if you expect a rapid increase in the request rate for a bucket to more than 300 * list delete requests per second or more than 800 * requests per second we recommend that you open a support case to prepare for the workload and avoid any temporary limits on your request rate\n", "at very high speeds amazon s3 does have some recommended request rate and performance considerations but this is only when making more than 300 * list delete requests per second or more than 800 * requests per second for a particular bucket\n", "as long as the dataframe is small your assumption that the * process is faster than the * seems true we can fetch all 5 items within one loop of while not q.empty\n", "at times the * rate is slower than the * rate and we see messages backing up\n", "i m not sure if this is the answer but states that if you expect a rapid increase in the request rate for a bucket to more than 300 * list delete requests per second or more than 800 * requests per second we recommend that you open a support case to prepare for the workload and avoid any temporary limits on your request rate\n", "from the count you will * the number of sequence and those which have more than 2 * those in a different series and then add that series in the dataframe\n", "as i am benchmarking my cluster i discover that for large file my * command is actually slower than * command\n", "you got at least * and delete although they are used much less frequent than * and post as in hardly ever\n", "this should be producing a topological sort but so far i consistently * one value less than i * in as far as number of vertices and none of the number match those i ve in*ted\n", "i think * and * on ignite cache would likely to be slower than native * and * on my inbuilt key value store\n", "right now i would have to say the * method is better since it works and i could not * the webservice to work\n", "now don t * me wrong regenerating the session id on login or more accurately as oswap * it on privilege level change is indeed a very good defense against session fixation\n", "but the slider won t work well it doesn t * activated is a better way to * it if i insert the code from slider.js into the chrome console hit enter - booom works perfectly i ve been looking for what the problem might be tried adding the type text javascript in the script tags added the document .ready in my jquery still nothing.\n", "when i * my loop counter variable pagessent in the watch window it *s optmized when i declare as volatile it still *s optimized but when the max value is set to 4 the loop exits properly but if max value is higher than 4 * stuck..\n", "from an interface design standpoint you want user-agents to make post and * and delete more difficult than * or at least distinctly different so that users can rely on that difference to hint when their actions might cause a change in the resource state because they are responsible for those changes\n", "since most data-storage mechanisms in-ram in a database etc. * a lot slower as you * more data in them you should ensure you re only timing your http access and not looking at overall crawler through* including storage\n", "and then i saw that they * functions under transform that did much more than just * data\n", "to * your code to run more than once * it in a while loop\n", "in the * method only if you re certain the ensuing * implementation is much more expensive than * which is not vast majority of cases\n", "and that is for performance reasons assuming that a * implementation should always be much faster than an * implementation\n", "* on the other hand can test accross a larger number of fields - ie its test is more specific than * comparisons\n", "override both methods but make * more tolerant than * that means make unequal objects have the same hash code and not the opposite\n", "if you do not implement * union will call * which will work but is slower than *\n", "* should be a lot quicker than * but doesn t need to be unique\n", "not sure about the overhead of calling * a few million times but comparing two ints is probably going to be a lot quicker than the * object method\n", "even though * itself should be fast it s not mostly faster than equivalent *\n", "1 is comparison via * check if the hashcode of both objects are the same faster than *\n", "implementing * is a more fine-grain way of comparison as it provides the * method which is a greater-than less-than comparison as opposed to equals which is simply a is-equal-or-not comparison\n", "4 some * providers might mark that * as spam however most spam checks are based on spf and * checks more than * existence checks\n"], "class": ["the * class seems easier to use so how could i get that drawing in a *\n", "i am writing an app based on * which has more than 10 viewcontrollers with corresponding *\n", "if you want to display your file as plain text the widget * is better then *\n", "i have tried connecting the qscrollbars but the maximum of the * is smaller than the * s\n", "finally you might want to look into * which provides a lot more visual flexibility than * and can be seen as a sort of generalization of the latter\n", "* is more generic than * and you can custom almost thing on it\n", "on second thoughts in your case * is surely a better candidate than *\n", "instead of using a * in this instance perhaps you might consider using a * - they are built for something like you describe more than a *\n", "i m not sure * is still better then *\n", "you can have only one * but can plug in more than one * to examine and handle the requests\n", "making * before i had more than one * in mind for them\n", "it is worth mentioning that there is a commercial product named * that is much more powerful than jvm *\n", "but i ve had difficulty implementing this it seems as though * is meant more for long operations that execute all their code on one background thread but have separate sections that make it easy to determine when progress has been made if this is the case then the use of the term suboperation is a bit misleading as it brings to mind the use of nested *\n", "the * is slightly easier to implement than the * which also needs a qtablemodel as backend but it has less capabilities\n", "* is more effective than * and * is needed anyhow but this will work also if you want to do multiples people then just for-loop it and dont forget to close\n", "i m not sure if * or * is better but * worked for me\n", "see the referred post for an example that reads a single file in parallel with * which should be significantly faster than using * according to these benchmarks\n", "the * process is much simpler as you only need to attach the * object\n", "my observation is that you get the webpage title using * in lesser time than using *\n", "to sum up the * is easier to use but the * allows you more configuration\n", "construct * is comparative slower than *\n", "* has some slightly better functionality than * but is a bit harder to use\n", "* has a higher level it also inherited form * const on it should have no effect in fact not the same meaning about the no effect on immutable object\n", "my only problem is that is seems that using * is a better approach and i have read some seemingly off-hand comments about * being a poor approach\n", "actionlink * is more often used to generate url properly based on the * route values etc and anchor tag based on htmlattributes etc\n", "android 5.0 api 21 allows surface input to * which is often much more convenient than *\n", "i d like to use * to encode the data coming from the camera reason it s more low-level so hopefully faster than using *\n", "in ios 5.0 and later you can use * of core location framework as for ios lower than 5.0 * of map kit framework\n", "if your exchange data between 2 widget i suggest to use * more than * because data in * can edit dynamic data row and value\n", "this relates to another question i asked a while back at size of qt containers is * much larger than *\n", "* consumes lesser battery power than * or thread\n", "hence the * which runs much better than a java * thingy\n", "* should also be more efficient than *\n", "the * class seems to handle better rotations than *\n", "the framespace for the * becomes smaller because * manipulates the view by adding a uinavigationbar which is 44.0f in size\n", "the app uses a * that never has more than 1 * on it s stack\n", "the * is more of a behind-the-scenes organizer for holding and displaying other * s\n", "however the * gauge1 is always bigger than the other one.i want to use a * because the application has to work on different sizes of a screen\n", "the roundabout method i ve employed is to create additional columns with a regular * and counta formulae - in other words i count the number of countries a * has visited more than x times * and then use the counta to sum the number of * in that column who have visited x times\n", "do need implementation of * that can be more useful than *\n", "in my app i have a rootpageviewcontroller which contains the * and one or more detailpageviewcontroller with a * as a childview\n", "so if using * * is more limiting than * basic_*\n", "* is more low level than *\n", "however i wish to use a custom * that uses an internal cggradient for drawing instead as this should produce smoother results than * see here\n", "if you want to use a continuous gesture that tracks the user s finger you can use uipangesturerecognizer rather than * and i think animatewithduration is better than * in that case\n", "* has smaller default internal margins than *\n", "* is much more complex under the hood than *\n", "* is indeed better in reading floating point values than *\n", "update i ve created a webhelper class that takes the place of * but provides more access to the necessary features of the underlying *\n", "* is sometimes easier to use than *\n", "* just offers you more functonality than *\n", "* is a shorter and more concise syntax but behind the scenes it uses a * so in terms of performance it won t be faster it will be equivalent\n", "a * is much easier than a *\n", "* is simpler to use than *\n", "to get the html instead of hardcoding it as above use the * class since it has a simplier api than *\n", "i have a * with more than 5 * so the morenavigationcontroller is available\n", "the first thought is that you could build a uiview showing image and text then attach a * to it which would be more flexible than *\n", "generaly * better using with connection *\n", "if i set a pixmap to a * that is larger that the window it will add scrollbars so is it possible to get what is displayed in the *\n", "by default when you scale a * larger than the * in which it is displayed it will show the necessary scroll bars\n", "unfortunately the sample apps are not based on * or * but if you look at the way they handle backup files you could probably use that approach to create a document based app with less hassle than using *\n", "sounds like you want to use some of the inherited * methods such as sendaction to forevent this offers even finer control than with *\n", "instead of working around the 1 label and image you get in a * it s cleaner to start from scratch with a * and create your tiles\n", "a solution i ve used is a simple subclass of * which allows more customization than subclassing * and less hassle than nsattributedstring et al\n", "you are seeing a noticeable jump in interface response because * do in fact consume quite a bit of memory * are very expensive compared to their underlying calayers and as such calling -removesubview not only unloads stress from the gpu but also frees up more memory as the * is usually released afterwards\n", "the * is taller than the screen so in ib i pulled it out of the scroll view so i could see it all but i never moved it back to being a * of the scroll view\n", "of course uiscrollview can have more than one content view just as any * can have more than one * and this case it will be more difficult to render its layer\n", "though earlier * and uiscrollview have the same area after keyboard shown the blue * becomes smaller but its * button text fields is outside its area\n", "when using embed in - * the new view will be a bit bigger than the *\n", "the * version is definitely faster since having the controls loose on the * took more like 2 seconds to update\n", "because the * is smaller it is going to crop out the larger *\n", "do i just create a new * that is 4px larger than the selected object and and make the selected view a * of it\n", "the issue is that once the alpha of the * is less than 1.0 i can see all the * sides and the one that gets me the most is the outline of an uiimageview can be seen that would otherwise not as it is the same colour as the *\n", "change the contentsize of your scrollview.your * size and uiscrollview size is same if the uiscrollview contentsize is more than its * size then scroll will happen change the line overviewscroll setcontentsize cgsizemake screenframe.size.width screenframe.size.height-25\n", "i want to add a * of smaller frame as * to parental view but i am not getting the needed\n", "i noticed * had worse performance than *\n", "a * is no more than a wrapper for an underlying *\n", "i want to add a * inside an * and this * will be smaller than the *\n", "is * better than * in terms of performance\n", "does that mean the the view controller has multiple * or that the * has more than one *\n", "this is better than using a second view a bit larger as a * is lighter than a * and you don t have do modify the frame of myview which is good for instance if myview is a uiimageview\n", "in fact each * has even more than 1 corresponding *\n", "i am using * s because as suggested in documentation * s are lighter than * and i have hundreds of them\n", "a * is no more than a fancy wrapper for a * \u00e2 bringing uiresponder events animation conveniences among many other things\n", "in other words if a * is more accessible than its * then the access modifier of the * loses effect\n", "if the * is more specific then it might fill in all by 2 of the arguments to its * __init__ method\n", "take note of this there is no way to * more than one * at a time\n", "* must allow more than the * not less and going from an argument being optional to not optional is allowing less\n", "yes but if you think of your diagram as a topographic map the * have higher altitudes than the *\n", "shouldn t a * interfaced be able to take in more than the * interfacec and use the same method\n", "this breaks the inherited and the * is no longer an instance of the *\n", "so what this says is that provided your * doesn t have any more values than the * used to determine ordering implementing is reasonable\n", "hence your * is accepting less classes than the * contract promises\n", "the fact that the * is more selective only actually writes about what it writes is new functionality especially in light of the fact that the * promises nothing\n", "with explicit * calling your * can accept more or fewer arguments than its * and can decide itself what to pass when calling the *\n", "for example you want to use abstract-class in such a case that each of the * is a more specific type of its abstract * fruit apple orange banana grape strawberries etc. and you want to use non-abstract * in a relationship such as dad and son\n", "you cannot have a * with less methods than a *\n", "if you * has less arguments than a * and you could make them optional in the * just add placeholders in the *\n", "even in your original post the * is actually more restrictive than the * so doing something like\n", "if new member fields are declared in the * then yes a * presumably uses more memory since it has all the fields declared in the * plus all the fields declared in the *\n", "you can t cast a * in a * because the * may have a bigger interface than the * means the * can have functions like getunixtimestamp that the * doesn t have\n", "a * is more flexible and is treated as an entire object which responds to all * methods plus it s own\n", "if we are creating an object of a * and invoking the method of * and if * extends more than one class which * method should be called\n", "in enhanced er modelling * inheriting from more than 1 * is called multiple inherited\n", "the general problem is that the * is more specific than the *\n", "however they are not the same because the * has more specific functions and data members that accomplish a more specific task that the *\n", "still you cannot inherited from a as * cannot have a lower visibility than *\n", "here having a * makes more sense or at least having a realnumber * of number\n", "so i inspected the compiled firebasemessagingservice which was the * of com.google.firebase.iid.zzb and had zzae intent method as private but its * firebasemessagingservice had protected access i know that * cannot have weaker reference than its * so i guess there is something wrong with firebasemessagingservice library\n", "for my understanding the * is always smaller less complex then the *\n", "in this case * is bigger than * that s why the second statement is correct\n", "the * overridden method cannot have weaker access than * method\n", "the * has a more stringent constraint on a property content blank false than the * content nullable true and i am using tableperhierarchy false\n", "these relations naturally arise when you impose restrictions on what you can handle--then if a * means that the method can handle less acts as a * of since can handle everything that the * can handle and more\n", "* defines more general features of the objects of its *\n", "however if the * returns a narrower subtype of the * method return this is called a covariant return type and is allowed in java since jdk 1.5\n", "watch out you can t query a * if you have more than 1 * then something like in jql\n", "2 since * is smaller than * one should use memory object carefully\n", "note the use of std * is safer and more convenient than std * *\n", "* animation is generally easier and more intuitive to use than *\n", "my problem is * is more complicated than *\n", "i think the problem happened because the padding left right of * is bigger than *\n", "also consider using * instead of * if you don t need to edit information inside since * take longer to allocate and init and are generally slower than *\n", "i m aware that * is much more suitable for this as it implements uitextinput protocol which has all the methods i need but due to a bug in ios i m limited to *\n", "* is much more customizable than *\n", "the * is nothing more than a uiview with one or more * and background and selector views\n", "a * may be used by itself or more conveniently with a * or qdatastream\n", "this class leverages * which is a lower level approach to using *\n", "you can also use * which is much simpler than * but in order to set a cookiecontainer you ll need to derive from * and override the protected getwebrequest method\n", "also i think the * class is more idiomatic these days than hand rolling *\n", "httpwebresponse and * are a little bit lower level than *\n", "so simply * is better option then *\n", "because * is higher class of * and its slower\n", "* has a much simpler interface than * and takes care of reading and writing from the streams for you\n", "using * is potentially slightly on the order of a few milliseconds slower than using * directly\n", "* is easier but * is more powerful and allows for more control\n", "i d rather use * because it requires less code than * httpwebresponse\n", "* is a richer api compared to *\n", "i like to use * more than * and its working with the *\n", "* is more generic than * and should be preferred\n", "not using the same * is a more common practice to avoid confusion and *\n", "when you re not worrying about * this is more flexible if the * of the object changes\n", "i believe the reasoning behind it is that it allows the parameters to be * nicer by preventing * of member variables\n", "* has more features than * so it might be better suited and more easily adapted for your purposes\n", "for a few bytes passed in just one call probably the * is even worse because it problably later calls *\n", "* is much more powerful tool than *\n", "* also provides nicer interfaces for requesting data using blocks in that it allows you to combine them with delegate methods for doing custom authentication handling redirect handling etc. whereas with * if you suddenly realized you needed to do those things you had to refactor your code to not use block-based callbacks\n", "* is newer than * if you are using swift language then you can use your own custom methods by using * or you can use alamofire\n", "it s not my experience that * is any slower than * is\n", "posting here an example showing how to implement same approach but now applied to * which a bit more involved than *\n", "i ve read that painting to a * is sometimes faster than * but it would by a lot of extra work for the mouse handling i think\n", "building on the previous good answers * is actually much more versatile than * providing lots of overloads\n", "since ireadwrite implements ireadonly ireadwrite is said to be a * of ireadonly although * is more accurately used to describe a class which * a base class rather then implements an interface--for the sake of simplicity they are very nearly the same concept\n", "* is more useful when a new * wants to change the way a method works if you just need to change the data the class uses to work probably an approach like this would do the trick\n", "with * this is less likely to happen due the contractual nature of * abstract classes\n", "if a * needs more information than the standard parameters which came up for us you have the option of a second parameters class type that you use as a second parameter but then you have two types of constructors in the tree or using * in the parameters class hierarchy\n", "but native hibernate support regarding * mapping is more powerful than standard jpa and single table per class hierarchy or table per * mapping strategies are more suitable for polymorphic queries and associations than table per concrete class strategy\n", "i generally use interfaces are too enforce a common behavior that a group of classes share whereas * is more appropriately used in cases where you can achieve serious code re-use through * functions properties\n", "similarly as the * gains more methods it * the list of superclass in the order in which they were named that precede it\n", "with * is trickier because any private members of a class are not * by the * but protected and public are\n", "depending on how your application is structured this means you may want to have your own base class implementing iresource which creates your custom not found resource for all of its * or better make a wrapper since composition is better than *\n", "but the problem i am facing if text is doted inside the label it calculates * size less than * size in the below code\n", "i don t see any reason why * could be any faster than * in this case\n", "finally consider that you can have more than one * as well as more than one * running on a *\n", "secondviewcontroller which is a subclass of firstviewcontroller also has a * but has one more *\n", "if the * is larger it will then wrap around the * to the next line\n", "on ideone the * is about 3 times slower than * copy + back_inserter + * vector and about 15 times slower than memcpy into a raw buffer\n", "at first i tried reading the original pdf with a * and finding the signature hex strings to split it into smaller files with a * as i have done with jpgs\n", "i added the check for * in case your class handles more than 1 * s and you only want to remove that\n", "for example public static void copy reader r writer w throws * is more useful reusable than public static void copy filereader r * w throws *\n", "* is faster than *\n", "the internal view hierarchy of * is much more complicated than it appears and starting from ios 7 it is not even added to any * so it s no big surprise that it doesn t participate to the responder chain as you expect\n", "* is more of an is-a relationship for example a usermodel is-a model thus all * and methods of a model will be part of a usermodel\n", "this should handle all cases of setting the * makes them easier to implement in your * classes and cleans things up\n", "potentially you are trying to model something in * that is better suited for composition or your base class should be taking in an object instead of individual related * if the * aren t related then perhaps your base class is doing too much single responsibility principle\n", "counter1 can be used with instanceof and * but is more verbose and doesn t have real private * eg count * is exposed\n", "using dedicated methods for getting and setting * is also more clear in *\n", "less is a css extension that enables reuse and encapsulation of values color values for instance improves * allows a better nesting of related * and operations also\n", "multiple * makes it easier to compose classes from small mixin base classes that implement functionality and have * to remember state\n", "now in .net for desktop controls you can use * which is much more powerful than the old tag * anyway\n", "if you need a globally accessible variable or * that s more suited to a base class that your classes * from\n", "since the paddle object has * that are shared by both player and enemy composition is a better choice than *\n", "i don t see any form * in the code you posted so either the posted code has been modified or the * is higher in the * tree simpleformcontroller\n", "however i could not find it the documentation so it may * more than *\n", "* is higher level than qhttp and * so they have abstracted away the sockets connection state\n", "textureview will display * rendering but is much more flexible than * and will follow the normal layout hierarchy in android which allows views to be moved on the display\n", "unless you know exactly what you are doing do not use the same * for more than one *\n", "i need show files from qfilesystemmodel in * and customize that tree to show one more column with * so user can pick 0..n files from that *\n", "* will usually give better performance than * because * always stores its items sequentially in memory where * will allocate its items on the heap unless sizeof t sizeof void and t has been declared to be either a q_movable_type or a q_primitive_type using q_declare_typeinfo\n", "* is better than * in this case because it s easy to resize it\n", "size * performs better than * because it doesn t store the\n", "* code is generally less optimized than * one\n", "if the size of the * s element type is greater than the pointer s size * performs better than * because it doesn t store the objects sequentially but stores sequentially pointers to heap copies\n", "if it stores it as pointers on the heap won t * be much worse off than *\n", "well obviously you created an implementation * which has a little bit more specialized interface than *\n", "the ardalahmet solution is not the right one if you need different backgrounds for each * when you have more than one * such as in a uitabbar because it using * categories\n", "somewhat good news you could move to * which is much better at handling utf8 and is more modern in general than *\n", "i suggest you to give a look to * which is far better than * also because it is actively developed\n", "if anyone has some information on this problem i d really appreciate it - either things you did to make * faster or just confirmation that it runs slower than * so i can forget about it and just stick with *\n", "* was always slower than *\n", "i ve used * in the past and found it a lot better than *\n", "i was originally using * because it was easier than * to use but i ran into the same problem it doesn t parse the entire string just the first number in the string\n", "however take some time to consider how you re currently using * and whether you are able to give ios 8 users a better experience by supporting *\n", "but in your case alertview is displayed above alertcontroller ie why it feels like * is whitier than *\n", "* is known for being slower than a * and consume a lot of memory and you are using a plain table model anyways so try with a *\n", "you need to create a * and decorates it with printstream or better * with printwriter\n", "the * class methods are convenience methods for common animations but are more limited than *\n", "a * is nothing more than syntactic shorthand for a get set *\n", "edit as willeke has pointed out accessing a * directly is technically faster than doing so via an * via self\n", "it means a declared * is more than a pair of * methods getter setter\n", "that suggests another aspect where a declared * is more than a pair of * methods that is more static type checking although it is undesirable here\n", "aside from obejctive-c convention and best practices * is much more robust and flexibly than * and allows the caller to effectively ignore the problem if they want to\n", "you can use a bezier path either in a custom * w drawrect or easier with a * whose curvature can be controlled via its control points\n", "it seems like if the * is slightly larger the * is double the size whereas if the * is slightly smaller this isn t the case\n", "* is much simpler to use than * and will serve the most common development needs\n", "* api is easier to work with than * but both approaches use the former\n", "and * is much simpler to use than * and will serve the most common development needs\n", "my understanding is that although * is newer it s not necessarily better than * it just provides a different api that might be considered simpler but doesn t that depend on the use case\n", "it is a feature it is about * api but the same is true or worse with * api\n", "* is a much more pleasant api than *\n", "i used to use * for all of my db models until i read ways to optimize entity framework after following the steps i found my self forced to switch to * instead so there were alot of code changes to be done but i am not sure that i doing the right thing specially after googling the deference i ve noticed that * is newer and better than * and also i noticed that i lost alot of things while switching to * like migrations and find method and much more.\n", "besides the * api is easier to use than *\n", "there are many reasons why the * api is better than the older * api but in your case it may initially feel like a downgrade\n", "you just need to connect using the entity framework driver and if you develop in any of technologies that uses * includes code first model first and data base first but is lighter than * you can use the list below\n", "* is newer api which should polish developers experience when using most common tasks - simply the api is better designed but you still have to get * from * and use the older api if you want to use some more complex features\n", "if adding 2000 entities and saving the changes at the end * is 3 to 5 times slower than * btw. i know that adding a large amount of entities would be better using sqlbulkcopy but that s not the point\n", "when it comes to deletion it even gets worse when saving at the end of all entity removals * is around 18 times slower than *\n", "in 6.7 a graph it shown that states that the performance of a * linq query is better than * linq query\n", "* is more general subclasses support writing to different places * is a specific one writing to a string\n", "* is more general as it leaves you the oppertunity to create another subclass of it that could add the altering functionality without using the * s implementation why ever you would want that to do\n", "note also that using * is more efficient than creating a new * each time a letter is added\n", "all-in all the reason is that * is able to do more things than * and can do anything * can hence the direction of inheritance\n", "posting *s to * is faster than using signal-slot invocations because there are no copy constructors called and there s no marshalling done except directly by you upon construction of a *\n", "both a * and opengl are used for getting high performance graphics and animation s.but still opengl is the best option to get high performance graphics because it is well documented and you will have more control over the * .but in * some of the classes are depreciated in the current versions .its almost not possible to make a rssurfaceview to transparent\n", "on the server side you re using * which is nothing more than a socket or * factory\n"], "package": ["yet from my point of view * is more efficient that * and easier to customize than xtable\n", "* is more forgiving in terms of well-formed xml structure see i had to edit the xml a bit to make things work for * and it s actually much easier to work with\n", "possibly part of the reason of my problems is that the original code from ramnath uses rmaps while i m using * also developed by ramnath as it is more developed better integrated with * and of course includes leaflet\n", "i have tried * too but * is smarter than * on this aspect\n", "if you are on linux and have chosen blas and * from a repo it is very likely that they are much slower than *\n", "b * runs always slower than * sequential around 10 times slower\n", "dist fonts * gruntfile.js js less license * readme.md\n", "in either case * is going to add a tiny amount of overhead so it s likely to be technically slower than * but not by any meaningful amount like it takes 5.1 seconds to insert 20k records vs 5.0 seconds\n", "however there are many others ts * which is generally faster than * .\n", "with library * you can have a prettier more compact form see soto s answer for an even more compact one with *\n", "note that while you could use * for the job it s not particularly better suited than regular *\n", "also * is significantly faster than * in many cases for processing results\n", "* uses the css selector syntax familiar from jquery which i find more intuitive than * s\n", "could i use * to do this more succinctly than running * and dcast separately for each of employed girls guys\n", "regarding * * is more efficient and in my experience can handle broken html better than *\n", "note that * is probably a better option than * for this kind of task nowadays for the reasons given by * s author\n", "for starters * is no longer actively maintained and the author even recommends alternatives such as *\n", "i do understand that traditionally they are saying that * are stricter than * however what i do not get is the following\n", "note that using the * parser is a lot slower than * s default parser\n", "* is significantly more powerful and robust than * in my experienced opinion\n", "* is more suitable for html parsing than *\n", "* is much faster than * and probably the fastest parser available for python\n", "it uses * underneath and is much faster than *\n", "according to the above posts and my own experience * is definitely faster than *\n", "i prefere * it s a harder to understand but much faster than *\n", "* is faster than * i think and has much better functionality while remaining relatively easy to use\n", "the reason for using * for such a task is that it cleans html files better than * do\n", "* is supposed to be much faster and efficient and can do much more than *\n", "i found a solution to this problem using * at *-where-are-you-putting-my-html because i think it is easier than *\n", "i would recommend * for html parsing it s simple and considerably faster than * can be as much as two orders of magnitude\n", "how can i find all div and span tags with order preserved.with * it is very simple but i switched recently to * since it is much faster than *\n", "i prefer to use * better than *\n", "* will let you use xpath here which i think will be less painful than * s interface\n", "edit don t use this for html work use the * library it s python based and much faster than *\n", "according to some benchmark tests * is nearly 100 times faster than *\n", "pyquery is based on * so it s also much faster than *\n", "* is also much much faster than *\n", "i ve found that even if * is faster than * for documents that size it s usually best to try to reduce the size to a few kb via regex or direct stripping and load that into bs as you are doing now\n", "* also has more features and offers * too\n", "you ll probably find that * runs faster than * but in my uses * was very easy to learn and use and handled typical crappy html as found in the wild well enough that i don t have need for anything else\n", "* enables you to search for elements using xpath which i think is easier than using * s api\n", "since you re using * why not use it in a more direct manner * is believed to be faster than *\n", "one of the things that makes * better than * is support for proper css-like class selection or even supports full css selectors if you want to use them\n", "speed isn t important here but in other applications it is good to know that regexes are very fast 100 times faster than * and 1000 faster than *\n", "it s generally accepted that * is faster than * ref\n", "alternatively you can use * module which is lot faster than *\n", "* is at least in my experience more general than * from hmisc\n", "* is much easier to deal with and usually performance is good enough but for large brute force algorithms like this * will probably be at least an order of magnitude faster\n", "you might want to use r markdown and * which is easier than using * and r as also zhaoy suggested\n", "even when * editors support * their support makes working with .rnw files much clunkier than pure * .tex files\n", "the * package is a bit nicer than * for making http requests in my opinion and it sets a user-agent string by default\n", "but if you are allowed to store whole tree into memory you can use * which is faster than *\n", "* deals with badly formed html better than * is actively maintained * isn t and is a lot faster since it uses libxml2 internally\n", "in the first example * is 3x slower than data.table and in the second its 200x faster than * and 100 times faster than data.table\n", "* is newer based on * internally and is often even faster\n", "* provides more human-readable wrappers around the base r functions though as of dec 2014 the development version has a branch built on top of * mentioned below\n"], "engine": ["from my personal use i experienced about 5 - 10 times less disk usage due to * s compression and it s much much faster than * or innodb\n", "at the beginning the insert performance of innodb is almost 50 times slower than * and * is 40 times slower than *\n", "odd that * is more tolerant than *\n", "if you would like a unified front-end for * and opentsdb you could consider grafana which has support for both * and opentsdb but less functionality than * in regard to *\n", "the benchmark shows * is 2 to 3 times faster than * on a normal page\n", "* is a high performance 2 to 3 times faster than * pure java template which use razor like syntax\n", "* is a strong typed java template engine using razor like syntax with high performance 2 to 3 times faster than * and fm\n", "the maximum representable value with * 754-2008 binary32 is so the base 2 log of a number stored in binary 32 is less than * 128\n", "double has its * floating point definition which is also much more complex than *\n", "* types libraries are fantastic for financial applications because we re used to dealing with the style of rounding required in financial stuff but there is the cost that they tend to be slower than * floating point\n", "the third line displays the data with the maximum useful precision - an * 754 64bit floating-point number has slightly less than 16 * digits of precision so all those digits of the literal in math.h are pointless perhaps they can be seen as future-proofing against a possible future redefinition in a format with more precision\n", "* has a stronger syntax than html and is easier to convert to * this way\n", "if you are targeting android you can use firefox for android by developing a webapp that has native * support and because of it will be much faster than * or other javascript solution\n", "in addition the need for polyfills for * complicates matters further as they may handle the interaction differently as can be seen in the sample below when using the button to load *\n", "* seems to be more mature than * judging by the amount of applications and games that is\n", "it is working only for simple .php files but * is more complex and after long period of loading it show * nothing found site loaded\n", "i m working in a spring mvc project and i want to use a template engine i originally choose apache * because a slideshare presentation that says it was two times faster than * page 41 and since i m working with big tables i need to use a fast template engine does apache * supports html5 if not is there other template engine that supports html5 that is not *\n", "i m using the module * in my python script and many more such as * and numpy etc * module only works on python2 not for python3\n", "my understanding is * is pretty good smaller than *\n", "it s called web audio api and is currently a draft but is well supported by * you ll need to use prefixes and a little less by *\n", "* is stricter than *\n", "i m developing with canvas too and have found that * based browsers in general handle canvas operations quicker than * in most cases\n", "* seems to like anti-aliasing more than *\n", "anyway i just prefer not to use it because * is slower then *\n", "so the easiest way is to use one either * or * * has probably better support for svg these days plus i can t find package of * right now\n", "* is often considered to consume less memory than * but this depends a lot on how the browser is implemented\n", "somehow * seems to do better than * on the html5 single-page spec scripts and i can t figure out why at this point\n", "* is more complex while * is simpler\n", "in many discussions and even in mysql documents it has been mentioned that in case of updates * performs much better than *\n", "* is harder to tune since it has more knobs but a properly tuned * system can often have higher throughput than * due to better locking and better i o patterns\n", "speed does matter here * is still slightly faster than * especially for reads\n", "although 4m isn t that many rows with contention and depending on your structure and database engine it may take a while i think * alters take longer than * because * requires whole table locks and handles concurrency less well\n", "* is much faster for reads but since it locks the whole table for writes this is where overall throughput drops compared with *\n", "* table is much faster than * but no rollback is possible\n", "* for reads may well be faster than *\n", "* is often faster than * in terms of raw performance mostly because it is not acid\n", "also note that some mysql engines are faster than others for example * may run faster than * at expense of the lack of real foreign keys\n", "* has better performance than * though * needs more attention to tuning the configuration * supports atomic changes transactions foreign keys and * is much more resistant to corrupting data in a crash\n", "* has better crash recovery while * is poor at recovering data integrity at system crashes\n", "* is better than * when you don t need those advanced features and storage speed is more important than other concerns\n", "the lone exception is * which is an older mysql storage engine which does not support transactions is more prone to corruption and generally tends to perform worse than *\n", "* is slightly faster than * and implements the fulltext index which is quite useful for integrating search capabilities\n", "* is faster but does not support the use of transactions like * does\n", "not sure why people think * is more performant than * - it s a conundrum wrapped in an enigma\n", "first question is it normal that * is much slower 7x slower than * for such usage\n", "i did a search online comparing * and * but all of the articles i read judged * being faster than * on select queries\n", "* seems slightly faster than * but this is really marginal\n", "i have been told * is faster on executing writes but slower than * doing reads i cannot back this up and could not find any article that analyses this i do however have the guy that told me this in high regard feel free to ignore this point or do your own research\n", "mostly * is better choice than a *\n", "* provides more complex keys structure than * foreign keys and regenerating keys is really slow in *\n", "but when * is really better than *\n", "you can also use compression on the tables to keep them smaller but * is vastly better than * at data integrity\n", "* does support transactions and referential integrity but the trade-off is that it is a bit slower than *\n", "* is much much stricter than *\n", "plus you have to make your tables * which is generally less suitable than *\n", "your table sounds fairly large so i doubt it s being held entirely in memory but it sounds like * handles indexes better than * anyway plus since you re being so specific it may be caching the result of the query\n", "* has proved to be faster than * for me\n", "* is actually better than * for spatial data btw because it also supports r-tree spatial indexes but not as powerful queries as postgis. if you just need points though * or * b-trees are adequate\n", "* has a higher resource consumption rates then * so keep that in mind\n", "* is a safer acid compliant engine with some integrity features that * lacks\n", "use * usually much faster than * if your data base isnt transaction oriented\n", "anyone who thinks * is faster is either not tuning * correctly or has such small data that who cares\n", "* supports longer rows than * does\n", "* doesnt read number of rows from stored cached value like * does if column is not null cause * is more optimized for writing than reading opposing to *\n", "for an oltp type system * is usually more sensible than * did you check the contention before trying a different engine\n", "* is more resistant to table corruption than *\n", "* is more space friendly than * you can start with that one\n", "we know that * is faster than * when we don t have many concurrent updates inserts\n", "* has historically been viewed as faster than * but for recent versions of * that is true for a much much smaller set of use cases\n", "* is usually much better than * at tables being available while insert update and delete are happening because * uses row level locking for updates whereas * uses table level locking\n", "generally * is much better for preserving your data integrity so stick with it and do not go back to * there is also a matter of what each engine is best fore but unless you give us more details there is no point in dwelling on that\n", "* supports better locking semantics so if there will be occasional or frequent writes or if you want better data integrity i d suggest starting there and then benchmarking * later if you can t hit your performance targets\n", "* is still widely used in web applications as it has traditionally been perceived as faster than * in situations where most db access is reads\n", "in a thread i came to know that * is faster for reads * is faster for writes\n", "* is more prone to locking problems than * i believe\n", "* delivered 4.6x higher throughput than * while achieving\n", "one thing is that if your inserts are not in the order of increasing primary keys * can take a bit longer than *\n", "finally even if somehow you could manage * to perform better than * that doesn t mean * is inadecuate at all\n", "* table is a bit slower than * tables but i don t think it is a major problem as you told you are using drupal system is that a kind of mult-sites like a word-press system\n", "and now i have learned that * uses more memory at-least while reading than * engine so i am trying to change the default engine of mysql to use *\n", "this is a huge performance boost look like * is much more quicker for fulltext in mysql than *\n", "as you know * table sizes are about three or more times smaller than same * tables\n", "but in certain scenarios * works better than *\n", "* is faster for certain queries and supports fulltext and spatial indexes while * is transactional and more concurrent\n", "* has better crash recovery while * is poor at recovering\n", "* is actually faster than * in quite a few cases so it depends on what your application s mix of selects updates concurrent queries indexes buffer configuration etc\n", "however * tends to be slower as *\n", "if you have so many records in the table then the first thing is to change the table engine to * if its not * because for large number of records * is much faster as it caches the table data while on the contrary * engine only caches the indexes so each time it has to do a full table scan from disk if the data required cannot be fetched from index\n", "therefore accessing * consumes less resources than *\n", "someone just told me that * is much better than *\n", "as you are no doubt aware from your searches * is primarily better than * for high volume inserts not counting non-comparable features like foreign keys or full text searches which are exclusive to * and * respectively while * is primarily useful for tables which are read more often than they are written to\n", "generally speaking * is slower than * as * is atomic while * is not\n", "most of the literature that says * is better faster whatever then * is old literature\n", "tuning * which is the better engine requires adjusting different values than * which is often the fast-but-unsafe default\n", "i am trying to compare the * and * write read performance but i am suprised that the * s read is much more slower than * while its write is much more faster this is totally opposite compared to what i have learned\n", "* has more overhead but uses row-level locking so that reads and writes can happen concurrently without the problems that * s table locking incurs\n", "* is more strict in data integrity while * is loose\n", "* delivers better read performance compared to * at the cost of being less acid compliant\n", "i am not sure if this is no longer true * is faster than * for reads\n", "* is not faster than * anymore for most types of queries\n", "* is often slower than * being a transactional db engine with acid properties\n", "in fact oracle is so sure that * is better that they removed * from 8.0\n", "* is faster when the query is simple but it s much slower in a high concurrent environment as its table level lock comparing to * s row level lock\n", "some people have said that for reads * is faster but recent improvements in * have either alleviated or eradicated this difference\n", "* is newer while * is older\n", "sometimes i got asked on some interviews what benefits does * have against * and when * is better than *\n", "2 - i have read about * vs * the conclusion for me was that * is faster when it comes to read-only whereas * is designed for tables that get updated or inserts more frequently\n", "* generally performs faster because it lacks certain functions * has such as rollback... but it has only table locking\n", "if you are not using transactions while storing or updating tables switch table type to * its quite faster than * with much less overhead\n", "1 in mysql engines * is better or *\n", "* scales better than *\n", "* is more reliable than *\n", "in general is * faster than *\n", "3 mysqlhotcopy inly works on * tables and in most applications you are better off with *\n", "* is relatively newer than * and is transaction safe\n", "out of experience i m involved to a project that uses huge amount of data using mysql and we mostly prefer * for data that can be generated it allows to achieve much higher performance losing transactions but generally speaking * is faster but * is more reliable\n", "* is more strict in data integrity while * is not as\n", "you will need about six times less disk space to store and memory to process your dataset compared to * or about 2-3 times less than archived *\n", "* uses row level locking while * can only use table level locking that is why * has crash revovery is better than *\n", "since * is better on selecting while * is better on writing\n", "edited to add * is faster than * because it is simpler\n", "but * has improved dramatically in the past few years and in most cases today * performs faster than *\n", "furthermore i do not have control over the engine \u00e2 * or * * performs better due to row based locking instead of table as in case of *\n", "i know * tends to be a bit slower than * on counting but this is far too long\n", "you can also try using * since it s said is better than * handling bulk inserts with data already on it\n", "therefore * can handle higher levels of concurrency better than *\n", "newer versions of mysql 5.5+ have extended * to support all the features that were previously only available on * such as fulltext and geospatial indexing and * performance is usually considerably better than * when configured properly\n", "oh and just incase you were thinking * is slower than * - the * implementation i tested was twice as slow in all counts\n", "* is slower for read only databases because it has features acid compliant row level locking that * leaves out\n", "in some benchmarks i see that * is faster than * but seems i have a little improvement\n", "also * is slower than * unless * is blocking for a huge select\n", "also mysql version starting from 5.5 - * performs faster than *\n", "if there are many modifications of the data it s said that * works faster because it uses row locking instead of table locking like *\n", "after testing it seems that * is faster than * when using when there is no where clause\n", "this is one way in which * is sometimes better than *\n", "* is better for high read volumes * for high update volumes due to table vs row locking\n", "i ve figure out that even though * has locking contention it s still faster than * in most scenarios because of the rapid lock acquisition scheme it uses\n", "in this area i think * s change buffer does a better job than * s do it now\n", "database performance of the * is not necessary faster than the * engine\n", "* is a better choice as * is really old engine and would fade away in near future\n", "there are some situations when * is infinitely more efficient than * when manipulating large data dumps offline because of table lock\n", "* is faster than * for reads myth\n", "almost always * is a better choice than *\n", "there is a difference between the different storage engines though * is faster for a lot of select * is faster for a lot of insert update because it uses row locking instead of table locking and the way it handles indexes\n", "there are several q a for why is * much slower than * but i could not find any topic for the opposite\n", "* is also being developed more than *\n", "* is affected by the primary key much more than * and it could make a noticeable difference\n", "in * the count s when where group by or join is not used execute slower than in * because the row count is not stored internally\n", "have you considered changing to * - it has much better concurrency support and in some contexts will run faster than *\n", "* is often faster than * but isn t safe to use in a production environment for critical data\n", "ok there are some cases where * is faster than * but rarely enough that it s worth putting up with the lack of acid-compliance\n", "* not only has the advantages you list but it is also faster than * in many benchmarks\n", "i heard correct me if i am wrong that * is better for tables that will be updated a lot because of row locking opposed to * s table locking\n", "also i can t see your table engine but * is better for full text searching rather than *\n", "* is transactional so inserts will generally be slower than *\n", "it is said that if you have a mostly read based application you should use * as it is better than *\n", "* uses less memory than * and the actual data files are often quite a bit larger for *\n", "why is * so much slower than * in my case\n", "there are other optimizations available but general rule is that * will be quicker than * is even with table growth\n", "in general it seems as though the concensus is to primarily use * but there are still some areas in which * is much faster than *\n", "* is more concurrent than * since it provides row-level locking\n", "in terms of pure speed it is not always the case that * is faster than * but in my experience it tends to be faster for pure read working environments by a factor of about 2.0-2.5 times\n", "select queries in * runs 2x faster then in * but the updates and insert queries are much slower in *\n", "in my opinion * use to be faster than * now they are pretty much the same in speed\n", "their conclusion * has 30 higher performance than * on average\n", "* is slower than * for most uses but can perform faster in certain conditions due to a better locking mechanism\n", "if your database has a large * buffer pool and a small key buffer then * performance is going to be better than * performance especially for large tables\n", "oracle has kept improving * by so much that they declare that it is better than * in virtually all situations\n", "* is the perfect choice since the database is almost only used for reading and * is significantly faster that *\n", "am i right that * is better for frequent concurrent updates and inserts than *\n", "now the response i got from my boss is that i need to prove that * will run faster than *\n", "* inserts are going to be faster than * so if you re logging data and retrieving it later that will be a win\n", "* implements mvcc multi-versioning concurrency control so locking is much more complex than with *\n", "to answer the real question why is * slower than * i can t give an authoritative answer\n", "note however that for high traffic websites we do modify the joomla core and we also switch the tables from * to * regardless what others might think here * is much faster than *\n", "put another way let s say i start with a new * table and insert 20 gb of data assuming that 20 gb incorporates all the excess * stuff i realize data stored in * is larger than * then i delete all data then i insert 10 gb of data\n", "i am creating an commerce website and i am stuck in a database problem i am storing customer orders please tell me which is better * or * i have to use transaction like feature in customer order table and i personally prefer * because it is much faster than * and it also supports full-text searching is there any way to use transaction like rollback feature in * so that if anything goes wrong table will be rollback to its previous state how to do that without any external library or any other server side access and i have to use mysql\n", "you insert in there but never select from there as far as i know today * is better than * in this case\n", "* is more susceptible to data corruption than * and usually * performs better because it caches both data and indexes\n", "* also tends to store data in less space than *\n", "it is possible that the config of your * engine is more efficient for your searches than the way you have * set up\n", "if you find that * is much slower for inserts updates bear in mind that it offers a much better level of durability - if you tune it for approximately the same durability as * then you ll see good performance hopefully\n", "* consumes more disk space than * -- typically 2x-3x\n", "* when tuned well performs better than *\n", "it is a massive over simplification in some cases and plain wrong in others to say we know that * is faster than *\n", "* tables have smaller footprints than * ones myth\n", "i heard * is faster but others say * can be fast also but it takes abit more to optimize it\n", "to our suprise * took hours more than *\n", "* is more scalable and * doesn t support any of the properties of acid\n", "* is slower than * but in which cases\n", "beststat is * so i have row-level locking and consindering i do a lot of inserts-updates it should be faster than *\n", "* tables are about 4x bigger than their * counterparts\n", "with * there is less time lost from table locking while * is faster in table readings\n", "after all * shouldn t be slower than * when using count + where but that s exactly what is happening here\n", "during my tests of * v * i found that when i did resolve any contention issues the * model was 40 slower than *\n", "* would be a better choice than * for a high-write table\n", "this also affects how it is stored which leads to * being slower than * on insert due to * requiring a full index re-write on every insertion\n", "so for such an application is it will * be a better choice over *\n", "you are right because * is really faster than *\n", "since you don t do updates i think * would be better than * in this scenario\n", "nothing is 100 safe but * properly used is a lot safer than * against data loss and corruption\n", "* tables are even slower than * tables for inserts and the delayed key write option is not available\n", "* shouldn t be much slower than *\n", "yes it is an old wives tale that * is faster than *\n", "even this blog from 2007 shows benchmark results that * is on par with or faster than * under most workloads\n", "* -- more effecient than * because of the way the primary key is clustered with the data in *\n", "the script was tested using * and it indexes products relatively fast much much faster than *\n", "if you use a where clause though it changes the execution pattern to use indexes so in general * will be slower than * on full unrestricted counts where as the performance matches up on restricted counts\n", "i currently have * and i would like to stay with it because it had far better performance than * in my case but i heard that * has acid transactions\n", "the engine is * i ve heard people recommend switching to * but many others said * is faster with large amounts of data in terms of counting and * better for safe transactions\n", "at the beginning the insert performance of * is almost 50 times slower than * and tokudb is 40 times slower than *\n", "i know * is heavier than * but just how much more\n", "* handles inserts with composite primary keys quicker than *\n", "generally you can have as good performance for reading as in * in * tables - you just can use count without where clause and you always should have a suitable index for where clauses as in * table scan will be slower than in *\n", "3 a first of all if you haven t done yet change the storage engine to * which has row level locking and in newer versions of mysql has more optimization than * has\n", "the trope about * being faster than * is a holdover from code that was current in the mid-2000 s\n", "i have heard that * performs better than * on read-oriented tables\n", "so that means that in practice an * write will take 3 times longer than a * write\n", "* is faster in data warehousing situations such as full table scan reporting etc.. but * can actually be faster in many cases with normal oltp queries\n", "there may be some exotic corner cases where * performs marginally better for certain workloads table-scans or high-volume insert-only work but the default choice should be * unless you can prove you have a case that * does better\n", "edit for the read-performance this link shows that * often is actually not slower than *\n", "* is almost 4 time faster than * which is not acceptable in the environment we are working as i mentioned earlier that every second is worth many dollers for us\n", "i ve also noticed that * is significantly faster and more stable that the old * based widgets\n", "unfortunately * has much worse and poorer integration with the rest of qt facilities than *\n", "if you use * which i like better than * - although i still prefer self-restraint+plain php most ide s that support django templating should work with it since the syntax is nearly the same\n", "either way i intend to use * partly because i have lots of experience with it and partly because its much more well documented and has much more functionality than blade and to me the syntax is slightly cleaner than * although the template engine is not the point of this question really\n", "if your in the market for a templating engine * a new templating engine used by symfony is much better than * imho\n", "template engines are rarely the cause of performance problems even if * is slightly faster than * i doubt the effort of learning a new template language etc\n", "so basically when * is more about how objects will behave themselves during application running the * is more about how you write your code before application running\n", "* provides much better native whitespace handling recent * releases provide more interesting content controls #define #evaluate # literal block #\n", "* is worse than * and stringtemplate has got its own issues\n", "* is more advanced but a little complex as compared to apache *\n", "i m trying to create a template in * since i have more knoledge than *\n", "* is more powerful than *\n", "* is simpler than *\n", "* is nicer templating tool and it was created by * and its designed to work cross language originally which can be forked from git - *\n", "probably you can take a look at * template engine which is much faster than * and velocity also much easier to use\n", "* has a cleaner api lower system requirements and works better across platforms than * in my opinion\n", "* is no way better than * 3d or am not trying to prove that\n", "i use * on tables of up to 18 billion rows and nothing else comes close it s at least 100 times faster than * for random inserts on big tables\n"], "system": ["plus the overhead of doing it is extremely costly- * queries against hbase are on my cluster at least an order of magnitude slower than against plain * files\n", "the maximum representable value with * 754-2008 binary32 is so the base 2 log of a number stored in binary 32 is less than * 128\n", "double has its * floating point definition which is also much more complex than *\n", "* types libraries are fantastic for financial applications because we re used to dealing with the style of rounding required in financial stuff but there is the cost that they tend to be slower than * floating point\n", "the third line displays the data with the maximum useful precision - an * 754 64bit floating-point number has slightly less than 16 * digits of precision so all those digits of the literal in math.h are pointless perhaps they can be seen as future-proofing against a possible future redefinition in a format with more precision\n", "extfs4 or * are between 25 and 40 faster than * or refs depending on the optimization\n", "* is way ahead and has larger extensions than *\n", "i also had good result with * cms it s a bit more lean than * but not as user friendly and definitely not as popular\n", "consider * its architecture is definitely better than * s\n", "i ve even tried to pin archetypes and atcontentypes so that the * uses older versions example those used in * 4.2 by adding the following to my pinnedversions.cfg file which gets called after everything else\n", "it is working only for simple .php files but * is more complex and after long period of loading it show * nothing found site loaded\n", "but in my opinion for most sites * is a better choice than *\n", "since * is a bit more complete than * when it comes to features you could define separate issues with custom field for your tasks\n", "research showed me that * is simpler to use over * so i decided to use * but have no idea how to install it.can anyone please tell me what are the steps you need to take in order to install * bug tracking system in a small company to track website mobile portal bugs\n", "your * record requires more than 10 * lookups to process\n", "* is soooo much faster than * because all the check-outs are stored on the server so it doesn t have to check every file on an update\n", "if you have the money ericgorr is right * is much nicer to work with then *\n", "if anything i find working with * easier and more intuitive than *\n", "if you want to a little bit further you can imagine use more powerfull scm clearcase * ... but maven integration is fewer not well documented and community provide less examples than * or git\n", "make sure you re using a source control system that supports branching and merging i ve had experience with * and * and while * is better * is free\n", "* offers more advanced branching and merging capabilities than *\n", "* does have support for many other oses but our non-windows devs feel more comfortable with * too\n", "* works much better when disconnected from the network - with * you have to tell the server when you ve done a checkout\n", "i ve read that * contains less project management tools than *\n", "i have been trying out * to see if i like it better than *\n", "however if i d built a new site with a cms on java i d probably go with * cms because the documentation and community is more mature despite that it s newer than *\n", "i seem to be getting the impression that * is more popular than * nowadays\n", "imho * is better do work and customize than *\n", "if that will solved later than * menu is better than *\n", "imho creating templates for * is the easier than most other cms i know typo * modx as you simply have to replace parts of the static version with * tags menu content etc. it still needs some time to get used to the system but its not that hard\n", "yes * takes more time in cooking the resulting html when compared to *\n", "since * is less commonly used compared to * svn amongst bamboo users we generally get less feedback about it and hear less about existing issues\n", "* is in an earlier stage than chef * and other tools out there when it comes to community support\n", "* is imho easier to learn than *\n", "note most recently i have been using * and hg with fully powerful regexps so may be looking for stuff more powerful than * provides\n", "a lot of articles about * will tell you it is a lot slower than * or mercurial\n", "i hear all this stuff about * being slower than *\n", "i would not mind changing to for example * or * if needed i am a bit afraid of * to be honest everything i read about * seems 10x more technical than anything i read about mercurial or * and installing it on windows seems to imply installing all sorts of secondary software it seems but that is another matter\n", "an incredibly rough eye balling of the numbers they posted showed * to be 2-4x slower than either * or mercurial in the use cases tested\n", "* is easier to extend in an api way * is easier to extend in a unix way pipes\n", "mercurial is significantly faster than * it s slower than * though by a much smaller difference\n", "it works fine and fits all my needs but recently i found that * works better than * so i decided to use it but i face a problem with * usability because most * s gui not user friendly as * explorer so i want your advice based on a practical experience which best * s gui user friendly or which one is most similar to * explorer\n", "thinking you can format * blocks any better in a cms such as * and use * just for the backend will put you on a hiding to nothing to end up with a fairly useless setup that isn t going to go anywhere\n", "since the * is more than likely * or *32 protecting it permission based way would be more convoluted\n", "most modern * are also considerably more complex than * which would add further difficulty to the implementation\n", "granted * is an easier problem but they claim to support many * and it would be my first choice\n", "* is another one that s easy to use i would say easier than * to learn but it uses an sqlite file to store your code and i m not sure if it scales to really big projects\n", "from the article it sounds like * isn t a database any more than * is a database\n", "i understand * is more of a * clone but retrospectiva seem to support agile methodologies via a nice plugin\n", "* handles multiple projects and sub projects far nicer than *\n", "for next projects i m going to try * seems more clean and hipe than *\n", "i d recommend * like the other posters as it is more complete than *\n", "* is an open source ruby on rails application that supports multiple projects much better than * and seems to be much easier to administer\n", "we ve recently switched from * to * where i work and i think i like it a little more than * and use the wiki functionality almost everyday\n", "the authors of * are trying to create a better * than *\n", "i wound up going with * and it s way better than *\n", "* handles multiple projects and sub-projects right out of the box and overall seems nicer than *\n", "we found * to be a better than * simply because it is easier to use\n", "* was written to be a better * than *\n", "* is much more complex and time consuming due to the more complex nature of this *\n", "the problem is that windows * is slower than typical linux * for these lookups\n", "actual mounting of * is trickier business and really depends on what you are mounting - * fat ext3 xfs nfs cifs webdav etc etc\n", "if you need to load from a well-defined * fat or * this is more tricky you have only 450 bytes of space because 60 of the 512 bytes are used by the * internally for code that interprets the data of the * finds the file containing the code and loads it into memory\n", "when people say that unix * are better they might mean to be saying oh ext3 stores bits in such as way that corruption happens way less than * but they might also be talking about design choices made at the common layer above\n", "although i myself have prior experience in implementing * much simpler ones than * xfs or ext2 i would not tackle this job\n", "generally the performance of hard * like * is better than that of traditional unix *\n", "nobody has ever accused git of being easy-to-use no * for example although i hear it s coming so you might be better off with * beanstalk\n", "the compare dialog of * is more about file and with git you have to compare two master branches not just two commits of the same branches both pointing to the same * central repo\n", "the * encoding mechanism is less error-prone than * so i ll demonstrate using *\n", "apparently * format was more popular than * format\n", "from what i understand * was more popular than * among users of 18-bit architectures since a word would be exactly 6 * digits\n", "conceptually it seems like a type of central authentication system * but is more similar to * also a federated identity management system\n", "as others have pointed out * is much more convenient than * anyway - you just need to remember how each of the * digit 0-f looks in * and replace groups of 4 bits with a single * digit\n", "this is still accepted by calls like inet_addr and has several advantages all fields are fixed width there are only 8 characters to update and the * to * conversion is usually faster than * to decimal\n", "base64 is usually used in instances to represent arbitrary * data in a text format it has a 33.3 overhead but that s better than say * notation which has a 50 overhead\n", "* is somewhat more readable than * if i happen to be loading a data dump in a text editor etc\n", "* is easier for most people to convert to and from * in their heads since * numbers are usually expressed in blocks of eight because that s the size of a byte and eight is exactly two * digits but * notation would have been clunky and misleading in dennis time implying the ability to address 16 bits\n", "the conversion from * to * is even simpler since you can simply expand each * digit into the corresponding * for example 0xa4 - 1010 0100\n", "if the right side the * side is greater than or equal to the * side then you print true if not then you print false\n", "converting between decimal and * is more involving and at least to me it s been easier if i have to do it in my head to first convert the decimal into * representation and then the * number into *\n", "it seems the from a readability and usability standpoint the * representation is a better way of defining * numbers\n", "* encoding is far more readable than * that s why sublime uses it\n", "but when anyone human looks at it they look at it in * using a * editor which is much easier than reading *\n", "a * string is significantly longer than the corresponding * string\n", "and because * is much more readable and useful than * - it s often used and shown\n", "those * values seem a bit odd they re powers of two in decimal but in any case 0x128 the 0x is a standard prefix for * numbers is the larger of the numbers in magnitude and its * representation is 100101000\n", "* is just less verbose and can express anything a * number can\n", "i ve been using images to store data since editing * data through paint.net is much friendlier than most * editors\n", "unfortunately using * consumes way more space and takes significantly longer i m dealing with 500gb of data and around 1 2 million records so i would really like to get the straight * method to work\n", "format_int in * case it loops 4 times then 4 times more than * and dec cases\n", "- i usually find debugging memory in * x command is easier than * so i will not use my solution\n", "one important reason is because * is alot shorter and easier to read than * is for humans\n", "* in much better than * and have lot of mature tools for every platform\n", "if you use * then it still okay because * handles binary files much better than *\n", "* is much better then * and git or mercurial are even better again\n", "in fact * does stores binaries a lot more efficient than * for more info see the *-faq\n", "* was supposed to be better than * but in some areas that didn t work well\n", "* is better than * because it was designed to be - it s roughly the same thing with some simplications and new features\n", "the other distributed tools are a lot faster * is slow as hell even * can be faster sometimes have much more useful features than * are developing rapidly while seeing any new feature in * takes years\n", "for all the reasons linked in the comment and elsewhere * tends to be a much better enviroment than * or vss unless you have some weird requirements - so if you can successfully import your history and save the company money i wouldn t see why the bosses wouldn t go for it\n", "the first one can be solved by using * +ssh which is the more comparable format as * uses its own protocol as well\n", "wondering mainly if * uses less disk space or more than the same in *\n", "in addition another coworker said * was a lot more popular than *\n", "that being said i think * is better in every other respect and you probably shouldn t start a new project with *\n", "i can only guess at the reasons and i don t worry much about the occasional downvote but perhaps some readers think i m advocating * as a better system than * or git\n", "in this case i converted the * to * and found the file size on the hard drive it was on my own laptop at the time but it was much smaller in * than in * but there could have been some compression applied i dont know but everything on the web said * would actually be bigger than *\n", "part of the point of * was to make the use of branches and merging much easier than in *\n", "* is better than *\n", "just a wild guess here but if you re using * on the server this observation might be based on the fact that * simply is much better at merging than * because it has the notion of mergepoints\n", "you ll need to convert * to another base here i use decimal when writing this code because c doesn t have * constants which would be ten times more useful than * constants\n", "however * protocol is much faster so i suggest using * * for performance reasons\n", "microsoft has the microsoft speech api sapi however if you want simple * it is better not to reinvent the wheel and customize an * implementation which i guess falls under the great * library for c++ category it s c not c++ but if you know c++ you should be able to understand the c . using *now you may not even need to write any custom code it may do what you want already\n", "this means the buffer is enough for printing the number in * and since * representation uses no more digits than * it will be enough for * representation too\n", "hex or maybe * depending on the machine being emulated will be clearer than using * since similar opcodes tend to vary in bits not digits\n", "bitshifts just go easier with hexa* than * and is often more convenient to read than *\n", "* s issue *king is little better than * s...i know a lot of folks love * but i find it very inflexible\n", "can a * section create more than 1 *\n", "i didn t work with these applications yet but afaik * and ezpublish both php are considered much more professional than *\n", "* high availabilty is only available when you have more than one * configured\n", "* seems much more like * with branches just being separate directories so maybe not\n"], "structure": ["* is faster and significantly more memory efficient than a *\n", "2 you probably want a * - i m pretty sure they re lighter than * and you can access properties using dot notation for which i have an aesthetic preference anyway\n", "* have a lower overhead than * since the duplicate keys don t have to be stored per item but have the convenience of named access\n", "as * lighter than *\n", "* should perform better less overhead than * if the lists are long\n", "depending on your use case a * might fit better than a *\n", "creating an instance of the * is easier than creating a *\n", "1 might not yet be sparse enough to make this better compared to just a plain * assuming longs storing 64 bits each it doesn t take more than 2 longs to have more than one * on average but if the sparsity increases beyond that the space and time savings will show\n", "if you re just going to * through point use a for-loop as * is more prone to dropping into an endless * if you forgot to increment counter or doing wrongly or do it in multiple places\n", "in a single thread world is different you can use a sorted set a binary * or your custom data structure that would perform better than concurrent *\n", "so as you can see the random binary search * was rather a lot better than the *\n", "i have to develop a better * that works more efficiently than the * *\n", "* needs less memory than * and sometimes is even faster\n", "why is the * 32 structure more efficient than *\n", "you will probably find that * performs a good deal better than *\n", "the decremented while * is still faster than the * or the incremented while * with length upper limit comparison by a fair margin\n", "additionally you should reset i each time you go through * and a * makes more sense than a while * especially if you re using c99 as i can be declared within *\n", "the * is using i as a global variable so if your instance.set_marker function is also using i as a global variable and sets its value to something greater than 6 * will exit\n", "my view is that option 1 is clumsy code and involves unnecessary creation of an arrays even though the for-each * is more efficient than the traditional * in option 2\n", "on windows the while * above is 20 faster than the original * in google-chrome in ie and firefox both * perform the same\n", "a * is more appropriate than a while * in your code\n", "the other option is to use a foreach * which is slightly slower than a * but works almost equivalently for all practical purposes\n", "because i heard that * is much faster than foreach *\n", "if the above is true doesn t this mean that the foreach * is much slower then the common * since it involves making copies of each element of the arrays\n", "using a while * we can control the flow of i better than a *\n", "and the results is that foreach * is 5-6 times faster than the *\n", "update i made some changes to my code but was already suspecting what others here have already pointed out sure the enhanced * is slower but outside of very trivial tight * the cost should be a miniscule fraction of the cost of the logic of *\n", "as the simple * is faster than a foreach *\n", "i prefer using * instead of foreach * * is preferably faster than foreach * when you do not have to do something to each element and can solve your problem by just using the index as follows\n", "a while * or do...while * is more appropriate here than a * because you do not know how many times the user wants to execute *\n", "in your case * is better as changed in * value is numeric\n", "i personally think the while * looks less clean than the nested *\n", "i think you can best use the * this gives you a little bit more control over *\n", "i think using * is much more easier than using foreach * to do this\n", "i find lapply * easier than a * in your case as initializing the list and using the counter can be avoided\n", "can you explain me why in this case the parfor * is slower than the *\n", "to explain why a * is faster than a for in * is basically understand the underlying data structures used to store the data in memory\n", "using * is much simpler if you use condition as limit for breaking *\n", "it might be better than a * in the terms of readability maintainability but keep in mind that linq usually slower than plain * tl\n", "a * is faster than a foreach *\n", "the main problem i know is the while * the logic behind it is not correct because last didah is always bigger than n * counter\n", "some people use array.prototype.slice to do that but i m not a fan and i think a * is faster in most browsers - but either way i have nothing against for * and the slice often feels like a hack to me\n", "which * is a better fit do while or a *\n", "* in c++ are most basic than python the * is more simpler it is based on the three expression initializer expression * test expression and the counting expression\n", "one place where the enhanced * is faster than a naively implemented traditional * is something like this\n", "max_size must be big enough because a * is slower than lapply you want to do as little * through the for as possible but not too big or the list extension overhead will make the program slower\n", "according to benchmark both sefan and the while * answers take the same ammount of time fruity the while * answers take a bit shorter with the * answers in second but the multiple * do answers take far longer\n", "putting the whole thing in a * makes it neater and ensures that the iterating isread is called each *\n", "the problem is that when the program first gets to the * 9 is not less than 0 so the value is false and it skips *\n", "i did this with * too and while * was clearly faster than * again\n", "arraylist - * is about more than 2 times faster speed than foreach *\n", "also a while * seems more appropriate and self-explanatory in this situation than a *\n", "a while * is better thought of as a looping version of an if statement than akin to a *\n", "even if a foreach * were faster than a * there are still operations being carried out that wouldn t be in your manual example\n", "a while * is imo more complicated to read than a *\n", "the foreach * is slower than the * yet most people don t rewrite all of their code to use the for\n", "hey guys can anyone tell me why my code in this jsperf seems to indicate that a * is actually faster than a while *\n", "i have an expensive * that is taking more time than it should due to dynamic casting overhead inside *\n", "the reverse while * is generally faster than a * as well\n", "also as an aside objective-c has a foreach * that is more convenient than manually setting up a * with a counter\n", "the conclusion of the article is that using * is generally better and faster than the foreach *\n", "based on this not created by me the while * is 22 slower than a * in general\n", "but certainly wrong syntax in the * is there better way to code it so that after * i can get\n", "* recur is faster - it s one of the most efficient constructs in clojure done correctly it should match the speed of an equivalent * in java code\n", "alternatively you could initialize i outside of the * but then it s scoped larger than * itself\n", "a * is usually faster than a while * and it is more difficult to build an endless * than it is by using a while *\n", "then you should achive them with a counter and maybe a * is better then while *\n", "a while * is more readable than a *\n", "why simd * only 14 faster than foreach *\n", "as for your question a * is usually better when you want a piece of code to run a certain number of times and a while * is better when the condition for the code to keep running is more general such as having a boolean flag that is only set to true when a certain condition is met in the code block\n", "in a language like c a * is more or less syntactic sugar for a while *\n", "xrange will give you an iterable object that won t use memory as you iterate a * is cleaner than a while * + counter if you ask me\n", "the scope of the variable in the test of the while * is wider than the scope of variables declared in the header of the *\n", "i suspect your curly braces aren t in the correct place as per scheff s comment the scope of the page variable is contained within the * and you are attempting to do more operations after * is over\n", "i have the impression that the implementantion has something to do with a * and some kind of adaptive delay that gets bigger as * count increases\n", "here the * header takes actually more time than * body thus profiling results could be distorted.\n", "the result amazed me in the way that as * goes over bigger range the performance of c# decreases as compared to c..for smaller range c# shown well performance over c....but as upper range of * increases the c# performance degrades as compare to c..\n", "note using apply functions instead of a * is better but it depends on the actual purpose of your *\n", "a while * makes more sense to me than your use of a *\n", "although both approaches are o n the * has a larger constant because of * overhead\n", "imho * looks better with a * iterating in the right direction\n", "they are functionally identical however it can be argued that the * is less error prone because all of * functionality is right there together\n", "note my use of a foreach * here which is much neater than your * for this kind of thing\n", "* is faster then foreach and foreach is faster then for in *\n", "i noticed some time ago that a * typically generates several more machine instructions than a while *\n", "2 second * is and easier * to read\n", "a single * is generally faster than using 2 nested for * to traverse the image with x y counters\n", "a * is more natural for this than a while *\n", "a * is nothing more than a glorified while *\n", "the only difference in the two * is the one if statement in the second double * and * is slightly longer but in the game the second * is only rendering 3 things as there are only 3 platforms being rendered at this point int time\n", "also the native * is faster than any other jquery * method\n", "i did test it a while ago with the result that a * is much faster than a foreach *\n", "however arrayfun is just a * in disguise and is often slower than writing * explicitly\n", "instead of using a while * it is easier to use a *\n", "a * is more natural than a while * but you requested no for\n", "therefore the parfor * simply must be slower than the * because it has to transmit data to the workers for them to operate on\n", "you need here while * better than *\n", "in this case i found while * is better than * because if i want to achieve the same in * i have to assign the value of counter to another variable\n", "the incrementor in the * is more of a while 1 endless *\n", "i m working on an app to load an amount of images from sd card using asynctask + * i ve test the app on my galaxy nexus the app working perfectly but it will crash if i use more than 33 *\n", "to achieve the actual goal you maybe able to use plain * which provides more flexibility in controlling * instead of using while\n", "you should use a * which is more convenient to * in an arrays\n", "also the * is more readable than the while * because it puts all * variable manipulation in one place\n", "the nested * version is the slower of the two due to the extra the interpreter overhead of the *\n", "but the the foreach * takes more time than a the *\n", "rewriting the while * as a * is nicer and makes it less likely to get an infinite *\n", "salu is used * counter so when you nest them more salu pressure is done and becomes a bottleneck when there are more than 9-10 * nested maybe some intelligent algorithm using same counter for all * should do the trick so not doing only salu in * body but adding some valu instructions is a plus\n", "i ve done a small experiment as will be shown below and it looks like that a while * is faster than a * in perl\n", "i m binding a grid view inside a * which executes more than once.now when * ends the data in grid view is the data binded at the last run of * i.e all previous binds in the * over overwritten.i dont want this .i want new rows to be inserted at each run of the * ..plz help somebody\n", "so i decide instead of writing out chucks of code for each of the 10 possible health point not to mention there are other player stats that will be done in the same format i decided upon scraping together a * with two if-else statements to attempt a * to fill each grid element as long as the health value is greater than the * s i\n", "if you won t be changing the string in * it is better faster to store the value in and then include it in the *\n", "in ... * it s consider better practice to * trough it with a regular for\n", "for looping over lines in files you can use a * which is more readable than while *\n", "each line can do one of three things it can call a function which modifies it s argument start a while * which is really more of a * or assign a variable\n", "however the while * remains a little slower than the *\n", "the * is faster than the while * when n 1000000 each takes roughly 0.105544 and 0.2389421\n", "it s worth pointing out that in general the foreach * is more expensive memory-wise compared to the * see here for details\n", "* is more suitable for any countable *\n", "in practical programming languages the distinction between the two is a bit blurred but is important to know that the c java * is closer to a theoretical while * while the pascal for behaves more like the theoretical *\n", "as others have stated the python * is more like a a traditional foreach * in the sense that it iterates over a collection of items without checking a condition\n", "you could also use a for each * to handle this though that type of * is slower than a standard * depending on application\n", "in a * of more than 100 *\n", "the class of problems you can solve with while * is strictly more powerful than those you could have solved with the strict * found in pascal\n", "really a while * would probably have been clearer than a * on reflection\n", "in some cases hand-writing a * is much faster than the equivalent accelerate functions because the compiler can optimize your * better than the function\n", "a * fits better to your requirements than a while *\n", "recently i ve stumbled upon a parralel.for * that performs way better than a regular * for my purposes\n", "i just wanted to point out my answer since i know * is faster then *\n", "in theory the while * is quicker because the * looks up the length attribute of foo every time though * but in real-world use it s going to make an immeasurably small difference\n", "a * should be used don t you think what * makes is more clearly stated in the *\n", "i am adding views dynamically to linear layout in a * of more than 100 *\n", "if you need to do something a set number of times a * is generally more concise than a while *\n", "the while * runs 3000 times faster than the *\n", "now assuming that your inner * is more complex and the simple * is slower let s look at how much memory we save by avoiding broadcasted data in a parfor with 4 workers and a dataset with 50 million rows for about 760 mb in ram\n", "now i went into this script there are for * which are adding some values to the classpath for there are more than one *\n", "the while * with decrements was approximately 1.5 times slower than the *\n", "is * is faster than while *\n", "this is a use case where a * is cleaner to use than a while *\n", "i found a simple condition where using while * is better than *\n", "a becomes 10 while it is still inside of the * and gets larger than 10 when the while * goes for a second run\n", "if you are using any js * then for each * is slower than normal * you might wanna take a look at this\n", "here i started above testing with the aim that c * performance will be better than c# * but it goes exactly opposite with my understanding and gone with this question and agreed...but when i increase the upper range of * the c performance goes well as compared to c#.\n", "also if you can do the above you can probably just as easily turn your code into a * which seems more appropriate given your desire to a break out of * b use the operator to cause side effects\n", "on the other hand * is more like counter based where you want to specify for how many times should * happened\n", "since i am using two for * it is consuming more time and is affecting the execution time of my entire program which already had a *\n", "the * question is more of someone building a * with exit criterion inside the actual *\n", "so we can see that an optimised while * is faster than a * by 2 operations however it uses more stack space\n", "thus your * is probably better expressed as following while *\n", "that is because that style of * is a better fit for what you are doing than the * you used earlier\n", "-in the same laptop but using the hpc cluster of my department with 30 workers the parfor * is much much slower than the * and than the parfor * using the local cluster with 12 workers\n", "* is widly used and has more advantages over while * but ther are some cases when while * is perferable\n", "i would expect a while * to be slower than a * since it needs to test a condition before each iteration\n", "0 a do while * that pre-decrements count --count and compares to zero is better than a * that compares two variables\n", "is the foreach * slower than the *\n", "a c-style * has more flexibility but ultimately you can write an equivalent * with python s while or c s while for that matter which touches not only on the \u00e2 \u0153one obvious way\u00e2 principle but also \u00e2 \u0153simple is better than complex\u00e2 amongst others\n", "a while * makes more sense in this situation or a * without initialization\n", "the way you are using the kotlin * is much closer to java s foreach * for i indexes\n", "lastly whenever you want to iterate x amount of times a * is always more readable than a while * that uses a counter variable\n", "in my tests i found that one of the * i tested titled * is astronomically slower than the other *\n", "note that the * based on the string assignment a_string runs one time more than * based on the inline assignment a_inline -- notice the last number -3.46945e-18\n", "the * is slightly slower than the foreach *\n", "even if the hypothesis of the while * being faster than the * were true and it s not the * you d had to change optimize wouldn t be the outer ones but the inner ones because those are executed more times\n", "this is why a regular * is better to use for this scenario rather than a foreach *\n", "this conclusion would follow from a logic if an unrolled * is faster than a * executing a lot of unrolled * should be faster than executing a lot of for *\n", "so why while * is faster than * and why need bunch of lists\n", "even if you use a lowly * it s much easier to * over the elements of a list than it is to construct variable names with paste and access the objects with get\n", "a * using a callback function like the standard foreach was approximately 10 times slower than the *\n", "the range-based * syntax is cleaner and more universal but you can t execute the code in * for a specified range different than from begin to end\n", "that means you don t know how many iterations you re going to need so a while * is more suited to this task than a *\n", "the only browser where the while * was slower than the * was in opera\n", "and normal * is faster than for-in *\n", "in example sendp method included in * which is slower than making other * to send packets\n", "the multiprocessed * is slower than doing the *\n", "but is there any specific situation when while * is better than *\n", "foreach can simplify the code in a * but it is a heavy object and is slower than a * written using for.\n", "a basic * is slower than a for - * with simplified test condition\n", "and last if you know the number of * it is much easier and better to read when you use a * instead of a while *\n", "your while * always runs a fixed number of times so from a stylistic point of view you would be better off with a *\n", "your while * would be better written as a *\n", "i think in terms of performance using a single * is faster am i right 3 linqs will be eventually converted to 3 *\n", "this is happening because of speed of * which is faster than your time .as * iterates in time of less than miliseconds and generates values.you can only call it when you want to insert single value to database and don t iterate for values\n", "i came across a situation where i need to implement a * with more than one * control variable\n", "its really strange that the same doesn t work with a while * as is said that a while * is more fundamental that a *\n", "also this * is better created as a *\n", "says that enhanced for * is 3x faster than the regular * well that great and its easier to write anyways but what if i need the index\n", "if i have to use the value of counter in my program then i think while * is better than *\n", "can anyone explain why the while * is taking more time than the * even though the looping of i and j is almost same\n", "further as a * it is easier to read as everything initialization * condition expression to be executed after each iteration are all on one line\n", "this is one of the few cases where a while * can be clearer and simpler than a *\n", "* is easier to read than a while *\n", "as an aside i would suggest a while * would be a bit clearer than a * without a next clause\n", "to my mind a * is simpler to understand than traversing the list backwards with a while *\n", "foreach or * is somewhat slower than an equivalent while * or tail recursion the benchmark i linked to above shows a 15x performance difference with 1000+ iterations though it will likely depend on the version of scala and the version of the jre...\n", "usually if you re going to consume all the elements of the iterator in a single * it is better to use the * approach and it will be better using the enhanced * that already uses iterator behind the scenes\n", "the while * seems tighter than a * from previous answer but look up for vs while logic\n", "but according to this answer a * is executed faster than the equivalent while *\n", "again same error but while * clearly survived more than *\n", "the other advice i have is that a for-each * is faster than a *\n", "a * is more sppropriate than a while *\n", "secondly you will find a * is easier than a do * for implementing the logic as you don t need to keep track of * counter manually\n", "finally we concluded after we put print statement inside * that it will take much more time than * in the first case without print statement\n", "your * would be cleaner as a *\n", "having said i am really not sure why you are getting unexpected behavior i ran your code both in eclipse and intellij ide and i always got * approach as faster than while *\n", "i think that instead of a * is better a while because when you find your item can break *\n", "* is better for big open spaces and * is better for in-door spaces with many levels\n", "this is little strange to me why * is in this aspect treated worse than *\n", "a suffix * has less dummy nodes than the suffix *\n", "should i change my project to * or is there any other good reasons where avl * woud be more efficient than * in case of phonebook\n", "finally b+ * is admittedly more difficult to implement than a * it s more on a red-black * level of complexity\n", "the suffix * is lighter and faster than the * and is used to index dna or optimize some large web search engines\n", "use a radix * wiki or * wiki if you are concerned about performance.the radix * is more memory efficient compared to a *\n", "recursive is usually used for traversal and binary search * but this * is more similar to * of only 2 character in alphabet\n", "for cases where each node in the * has most of its children used the * is substantially more space efficient and time efficient than th ternary search *\n", "ps radix * is usually faster and more compact then * but suffers from the same side effects of * comparing to hash tables though less significant of course\n", "a * is better than a binary search * for searching elements\n", "a suffix * is more or less an advanced * here you can also search for any substrings in o c as for the *\n", "the article says that a * is better than binary * as for a string of length m for * it takes o m time and for binary * it takes o m logn time\n", "most likely a * is more efficient and you didn t sort your dictionary and it doesn t use a binary * or ternary *\n", "a * is better suited to this kind of thing because it lets you store your symbols as a * and quickly parse it to match values or reject them\n", "the real * has more columns in the *\n", "and now we know that * is faster than *\n", "the reason for the second case much slower on sorted data is that a * is cheaper than the equivalent * when there are zero iterations\n", "i have also found that a * is faster than a *\n", "also it seems like a * is of greater cost to the compiler than a *\n", "edit just realized a * may well be a lot cleaner than a * for this\n", "i definitely wouldn t try introducing a new general-purpose type for use in python based on std * which has worse algorithmic complexity in time for many important operations and\u00e2 in at least some implementations\u00e2 leaves some optimisations to the user that * already has\n", "c++ std * behaves more like a python defaultdict than *\n", "using this hint we can try to guess that a fix* must correspond to a * data type in c# since a * is more or less like a * of key-value pairs\n", "if what you are making is a * from one word to another you might be better off with a *\n", "std * though is actually implemented in a way that many operations are slower than * as its size gets large\n", "the difference between a * and vector is a like an array while a * is more a * of key value pairs\n", "i know this question is a bit older but in es2015 there is a new data structure called * that is much more similar to a * that you would use in c#\n", "the immutable * implementation is faster but no less pure in usage than the * implementation\n", "data structure to implement reverse functionality of a * that is more than one key * to a common value using python\n", "* is slightly better because the shared * has around 480 entries instead of around 450 but it s still inconsistent and not all 500 as expected\n", "for suitably large examples of each * overcomes the constant factor by which it s slower than std * and will actually do operations like lookup insertion etc\n", "so then i think to go with that approach i would end up with a * and loads of add calls but surely that is even worse than the * copy isn t it\n", "with one * one can do which is easier than a *\n", "when i try to access it with a * where its index is less than the * length i get the following error message typeerror function object is unsubscriptable\n", "also change your logic in the * to be not since i will not ever be greater than the * length\n", "the longer the * gets the more iterations your * will need\n", "also with the * it s considered better to limit the scope of the iterating variable i and to use println you need system.out not just system and you need a string java * do not override tostring so something to output the numbers the user entered after loops like\n", "when you know both objects are * method is a faster way to check equality than *\n", "in this case if any element in * is shorter than 11 symbols will become big and * will stop executing\n", "im going to have a second * that makes more * and names these * as the strings from my previous *\n", "in your code on line in the * does no more point to an * --the compiler has no information about the length of the variable that it s pointing at whether it is an * a single chars or an int or something else-- but it is just a plain pointer presumably a pointer pointing to a default int\n", "this is a scenario where a traditional * is more handy than just iterating over the *\n", "i ve used it for convenience a * is much more reliable for converting an htmlcollection to an *\n", "but the * is not reading writing the last part of the parent file which is less than the * size\n", "the hits * is longer than numtotalhits so your * limit should be numtotalhits instead of hits.length\n", "in this case instead of generating two large matrices with the row and column indices you can use a * on the rows of your * it s slower but not as slow as a double *\n", "running a quick benchmark it seems that the * is 4x faster even in the worst case where you have to replace every single time and you construct a new * to hold the replacements\n", "but when looping through an * it s better to use a regular *\n", "but you will have loops the outer * in order to get it to work which would be better done with a * so you reference both at once\n", "if the length of the * is less than 8 a regular * summation is performed\n", "but for the * it is better to use * as shown by alnitak than for-in\n", "but modifying the * is more work than a simple * again\n", "in my opinion a * is usually better for doing something a specific number of times and if you re just iterating over every item in an * foreach is usually more straightforward\n", "on the last iteration of the outer * ndx is one less than array.length so when you call * ndx+1 that is equivalent to * array.length which out of bounds since * start indexing at 0\n", "notice that besides using the filter method or not even with a plain * is much better for performance create a new * from scratch instead of mutate the current one multiple times\n", "you can use array.prototype.find method to check if the element exists in * which is much better than perform a traditional *\n", "the questions should i use * or is it better to do it recursively next insert will be called after previous is done should i check if saved.length datalength and then return the * or is there some better way how to do it\n", "i suppose the first option is good for small * but a * is probably better practice as the amount of code would remain the same regardless of * size\n", "note that this is one of those cases where matrix division of large * takes longer than a *\n", "note that you should check if index is within * bounds in such cases and that system.arraycopy is more efficient and arguably simpler than a * for copying *\n", "to use this in a loops you can write a simple * which always checks if the index stil is smaller than the * length\n", "an * usually offers more information for alias analysis and after some optimizations the same code will be generated anyway search * strength reduction if curious\n", "this is the reason why working with the higher-dimensional * ends up being so much faster than the * -based code\n", "a * is more adequate than a do while for simply iterating an * string\n", "try catch inside * is probably closer as long as you don t mind the unassigned values left in the *\n", "the * here is more efficient for 2 reasons a you don t have to construct a temporary * of tuples like with zip and b it returns false as soon as a non-match is found\n", "it turns out i had a hard coded maximum index in my * which was bigger than the * i was trying to assign to\n", "above is a simplified version of my actual code where the c * is much larger so i have to use a * to get every index\n", "but then normal * is far better for * than using for-in which is actually for object\n", "in its implementation foreach executes a closure over every element in the * this is typically more straightforward and transparent alternative to old-fashioned *\n", "it is clear without any performance tests that native javascript * is faster but there is no big difference for small * like 10-20 small items\n", "use a for-each loops to go through a range it s not as fast as using a variant * but keeps things simple and offers better speed than a *\n", "thus the * is faster than the foreach-loop if the * must\n", "i tried this code with my the big * it is around 10 to 20 times faster than a * solution and around 200 times fast than the old code\n", "to my knowledge and research so far - javascript s native * is quicker than * map for iterating through the *\n", "for example sometimes a * is faster than the built-in * methods in some browsers\n", "but the outer * still runs 9 more times pushing temp which is already a set number onto the numbers *\n", "edit using an enhanced * is a lot better than using *\n", "looping with a * is nothing more than a basic iteration of an * using a *\n", "so when you go up an * 0-9 you want the top of a * to be less than the * length when you are going down the * 9-0 you want the lower bound to be less than or equal to the bottom of the * otherwise you will start out trying to access at 10 the * length and get an outofrangeexception\n", "a * is more suitable to iterate through the *\n", "i am just starting to learn about the streams and parallel in java and i was wondering why a normal * takes less time than intstream paralleled at adding items to an *\n", "the * is faster than the foreach-loop if the * must only be\n", "since it s an * it s better to use a * with a counter variable i which starts from 1\n", "in such a simple * you shouldn t be concerned about memory usage but the * consumes less memory than foreach because foreach uses an internal copy of the *\n", "the only way to copy * that is more efficient than * coding is system.arraycopy\n", "but i don t want to use a * as my json * has more than 3 entries and if i request a lot of data in short time it takes long time till the * goes through every entry\n", "would an * be faster than a * in this case\n", "when summing an * over a specific axis the dedicated * method array.sum ax may actually be slower than a *\n", "i fixed this by adding after the * and before the return statement which fixes the problem but if the * is written to continue while i is less than the * length and when the * only contains a the length is one and i is 0 shouldn t it also pop a\n", "iterating pair-wise you d normally do something like but iterating over an * is faster than using a c-style *\n", "because if the first word in * is shorter than second one you need second *\n", "it returns a byte * of all the pixels which can be iterated much faster than a * with a call to getpixel inside nested inside another *\n", "next i can use 3rd 4th and 5th level of * means more than * statement will be assign\n", "the * is faster than the foreach-loop if the * must only be accessed once per iteration\n", "as mentioned above as you remove items the * gets smaller so a * is probably not the best solution\n", "okay so after telling the user to enter the size of the * the * was assigned to lets say 5 therefore in the first * the program is checking if i is less than the * size so it can only be entered 5 times as that is the size of the *\n", "i completely failed to check that assertion and just jumped into the analysis of how the enhanced * is faster on * than lists\n", "a * has better memory performance if the strings have many common suffixes but they are more expensive and difficult to build and update so start with a *\n", "use a * which is more efficient than a * in terms of space waste\n", "it is a structure similar to but twice as space-efficient as the * that is more efficient than the * which only compresses prefixes\n", "i am interested in this because the factor oracle is easy to construct with 30 lines of c++ * needs about 60 and * needs 150 and it runs faster than * and *\n", "nevertheless i need a dynamic list for my * with nested * which is processed more than 500 times and multiple * therefore the arraylist\n", "the other question why not use a * here since it will provide some concurrent writes to different mapentries and provide more concurrency than *\n", "you can also try a * it has some better perfomance over a *\n", "* indexes are created faster than *\n", "* are substantially faster than * for window queries like inside contains covers etc\n", "a * is a simpler data structure than the *\n", "* are much faster than * for nearest neighbours queries\n", "i use * more than * and find them super flexible\n", "on the other hand the wikipedia article on * seems more specifically targeted towards mapping than the k-d tree or *\n"], "language": ["apple seems to claim that the optional type in * is safer than nil in * but i don t understand why this is so\n", "as you can see defining a singleton class in * is much easier than in *\n", "* is much more free and easy with types and compilation checks where * isn t\n", "the * compiler is doing a lot more and is quite a bit newer than the * compiler so it unlikely it will be as stable fast for quite some time\n", "wouldn t * be slower than * in this case since it is layered on top of it\n", "while i think the move to * is prudent but i think it overstates the case to argue that * is significantly more secure that *\n", "* is more strictly typed than *\n", "and also apple does might not confidently announce that * is more faster than * in all the cases\n", "after reading some related articles i don t think * is more effective than *\n", "however when i switch to * 4.0 the methods declared in * is no longer visible in *\n", "there are multiple reasons why the * code is slower than the * code\n", "specifically it makes it possible to write * code that plays nicely with * which is more strongly typed than *\n", "* is lot smarter than * about singleton class\n", "we ve seen that * uses a more static method dispatch than * which unless a class dervices from foundation nsobject prevents the style of swizzling based on remapping method implementations at runtime\n", "as craig revealed within the announcement of * it is said to be faster than * by far\n", "so i ve started learning * because it looks way better than *\n", "note that * s arrays are much more sensible than * s\n", "on the other hand * is easier to learn especially if you have * background so it can be adopted during the time slowly and paralelly with using *\n", "with * the code is much more readable than with *\n", "but * is less dynamically typed than * and has less support for reflection\n", "* will incur this penalty in fewer situations than * will for instance method calls to *-only protocol methods do not hit objc_msgsend but if the protocol is declared in * or if the * protocol is decorated with * such that it can be adopted by * objects as well then method calls to methods in that protocol adopted by * objects appear to be dispatched via objc_msgsend\n", "i also use * more than * but here s what my guess is as to what the * code would come to\n", "as you can see the * example is more complex and error prone than your * code\n", "i have a * application working fine and smooth to be more comfortable with * i decided to write the unit tests for this app in *\n", "i use * more than *\n", "one of the reasons we want to move is because * is more secure than *\n", "* in that case would not be safer but less safe than *\n", "as * is the older programming language for ios or macos applications * allows you to use those classes structs in your code\n", "those attributes let you create * code which is more understandable by * and complier warn you when you break the rule for example\n", "i don t think that as of today you can run these tests and determine with any certainty whether * 1.0 is faster or slower than *\n", "furthermore * is stricter than * when it comes to initialisers\n", "the * one is dramatically slower then * implementation\n", "or is it merely a hint to whatever tool converts between * and * to better deal with * optionals\n", "* seems to be less dynamic than * in these stuffs\n", "* won t allow you to do absolutely everything that * does but it will allow you to do almost everything and the code will be probably more robust considering that * is more modern language with stronger typing than *\n", "the perf hit will be ridiculous i know apple say * execute faster than * but this is low level so it will be harmless\n", "* is clearer on versions releases and i keep asking myself if i am missing something related to * since i can t find this information\n", "no objects come magically into existence in * any more than in *\n", "executable size of * application is much bigger than size of * application\n", "early this month i started learning * as i found it fun and easier than *\n", "however i read that * was the successor of * and i would feel more comfortable with * syntax\n", "* print is more readable compared to *\n", "* -documentary provides more content than the documentary for *\n", "it is possible for * to be faster than pure * in things that you would traditionally use c or c++ for anyway\n", "the * runtime is smaller than the * runtime\n", "usually i find * s method naming to be cleaner than * s but init methods can be an exception\n", "it seems to me that * would be way simpler to learn then * for beginners i know because i learned it in like 2 months and * is less complicated and better laid out then *\n", "bottom line i would personally hesitate to draw any simple conclusions of * is faster than * or vice versa\n", "personally i prefer * because you can use c very easily as anything that is legal in c is also legal in * added to which * is a more procedural in style where * is quite clearly object orientated\n", "you will notice that * bundles are always about 4-5 mb larger than their * counterparts and this is precisely why\n", "adding lightweight generics to your * api makes it easier to interface with * because your api gets translated more precisely\n", "im new to * but i like it more than * as it looks a bit like java does to me from syntax wise compared to *\n", "injecting code in a * application is harder than it was for an * application but it s still possible\n", "so it should have always been gkagent under * in order to be strictly correct however * is less type-safe than * so you could get away with it with the possibility that you d get an unrecognized selector exception if a gkagent object was ever passed to the delegate method and you assumed it was a gkagent2d\n", "this is because the * dictionary is more strongly typed than the * nsdictionary\n", "i know that * is buggy as heck i run into bugs everyday but ill bet * was even worse when it started out benefits of hindsight so in a couple of years * will be equal or greater than * keeping its basic simplicity as well\n", "writing * 2.0 in my professional work my personal opinion is that it s indeed ready for enterprise applications -- maybe even more than * ever were\n", "if you get a difference between * and * it s more because * is probably better on optimisation\n", "i find that * is much nicer for working with core audio than *\n", "most importantly for your image processing app the compiler will optimize * code to run faster than *\n", "i m learning * and much less familiar with * but for the life of me i can t figure out how they are trying to achieve the goal stated as build list of encodings sorted and including only those with human readable names.\n", "* is neither easier to read nor understand than *\n", "my view is that if in some cases * is faster than * it doesn t mean that all over performance of * is slower\n", "* is stricter about runtime type correctness than * so duck typing alone is not enough\n", "download xcode free and learn * or * * is easier to learn than *\n", "also note that i use * more than *\n", "* s compiler is also doing a lot more than * s compiler considering * is more strongly typed and does not required specifying imports among other things\n", "better if you have a code * is better but is not problem *\n", "i feel * is better than * in many aspects but my major question is - will * dynamic libraries support older version of *\n", "* also prevents us i believe from overriding a parent class s property but also still lets us observe changes to that property--this is much better than * s approach\n", "the * designers went through a lot of trouble to make sure that it s more than just * without the constraints of c in fact i almost wish they hadn t said that since it s so often misquoted\n", "this article seems to suggest that this is possible by swizzling a fake location into apple s cllocationmanager class to be used by other apps but i am unfamiliar with the * code more familiar with *\n", "because you can determine what code in a * is likely to do better than a * it has been determined more error free to use a compiled perspective for more things so as you can see with the availability of offset-management and lookup compiled behavior given to you in core perl there is no reason to mess with the symbol table if you don t have to\n", "* being a whole lot less than *\n", "fortunately the vbide for * has more classes and methods for working with vb projects than the * version of vbide\n", "* is in fact a superset of * not a subset -- * has more functionality built in than * itself\n", "* is more amenable to static analysis than * because it lacks the very dynamic template despatch mechanism\n", "unless you are using the static typing feature * is no more strongly typed than *\n", "as for whether to use * or * the proof is in the pudding * is better at transforms and * is better at queries\n", "this kind of processing is most easily done with * which is more expressive than *\n", "as dimitre says * is much better at this class of problem than *\n", "my usual rule-of-thumb is that * is better than * for simple tasks whereas * is better for complex tasks\n", "* works better than * for this because it s more amenable to static analysis as it lacks the polymorphism of * s template rules\n", "if your output is going to be similar to your input with small changes then the * solution is often a lot simpler than the * solution\n", "saxon-ee supports streaming of large xml documents using * or * streaming is better supported in * than in *\n", "generally i know it sounds banal * is better at transformation generating a new document from each source document while * is better at query extracting a small amount of information from each source document\n", "i hate to answer a request for a solution in language a by suggesting a solution in language b but what you are doing here falls into the class of problems which * handles much better than *\n", "* is significantly more appropriate to use than * for such kind of tasks\n", "there are various object systems you can load as libraries when you want to do oop but integration with existing code heavily depends on the * dialect and its surrounding culture chicken * seems to be more object-oriented than * for instance\n", "i would suggest you start with * and more specifically with * formerly plt *\n", "all of * s languages can interoperate so your language of choice is up to you though the rnrs languages tend to go unused in the * community #lang * is much more useful for writing programs than any of the * implementations but they can be useful if you want to write programs that run on different * implementations\n", "* is closer to * than to common lisp but you could dip your toes into the lisp family without the speed bump of the emacs style of development\n", "on the side of using macros * has always been more advanced than other * and lisp implementations\n", "i m doing a comparison of * haskell * and es6 and i m less farmiliar with * and * but i want to represent all of these languages fairly so is this good * code\n", "i agree some mechanisms in * are slightly more verbose than * function definitions being my personal pet peeve and vice-versa\n", "* has a steeper learning curve compared to *\n", "right now * is much better as it supports a broader set of language and platform features than * .net ever did\n", "in free and turbo * file handling is much more easier than in * in * we have assign instead of assignfile and close instead of closefile\n", "from my pov the object * paradigm used with fpc object * dialect which can coexist with the default object * code is more advanced lightweight and integrated than the interface-based plumbing of * xe2 compiler with on-the-fly marshalling using rtti\n", "* is coco but much more compatible with * more functional and more feature rich\n", "coq is probably the most prominent language of the style but * has a more *-y feel as well as being written in * itself\n", "while * is more expressive * pattern matching is simpler which means a simpler language definition compiler etc. and you still can do what you need at the cost of writing more code\n", "* is quicker than * but for what you re going to do you re trading speed for convenience - * comes with all the different ui classes list scrollbars etc already there\n", "i can see that my skeleton * module is slightly larger than my * module 66kb vs\n", "i would say pure * is better for programming whether you use flash ide or flex ide is not that relevant and * is better for non-programmers to combine the components programmed in as\n", "what s the deal i thought * would be nicer than *\n", "so yes it can be used with flash or rather pure * but it is a little less convenient than with * where everything is set up by the framework because it takes more under the hood configuration to be able to run all the necessary parts for remoting\n", "like the rest of rest * is lightweight easier to understand and easier to write than *\n", "but * will be more than * and i use * heavily to validate xml values and i should be able to produce html reports well\n", "* is perhaps more approachable than * however\n", "some background i m learning * now having earlier worked with * and cl and a little foray into clojure\n", "i believe that the reports are using something more along the lines of * edit oregonghost says * which actually makes more sense than * than vb.net and very limited at that\n", "vb6 * though a little better than * in general still has many similar issues where for their domain they require much more boiler plate to do simple tasks than what i would like and have seen in other scripting languages\n", "because * is more or less superset of * it of course works also in *\n", "* does not provide an alternative and any alternative that was provided would likely be less reliable as * does not have the resources that sun oracle ibm etc\n", "opengl is better for playing around and experimenting because you can easily draw triangle without messing with hardware buffers available on larger selection of platforms plus * is better than * because it doesn t compile into assembly\n", "* is older than common *\n", "i don t see why sbcl should be so fast - * is a far simpler language than common *\n", "overall common * is much more uniform than * and more radical language experiments if done at all are usually embedded as a portable library rather than defining a whole new language dialect\n", "* is also a good language for that purpose and it is simpler smaller than *\n", "however gambit * has smoother access to c c++ code libraries which far outnumber common * s libraries\n", "* is intentionally more compact than common * and you ll find that you can learn the language very quickly\n", "i ve noticed that the common * approach is more conservative than the approach * has\n", "* has fewer libraries than common *\n", "common * has a separate namespace for functions which makes operation like this more verbose than with *\n", "here is a solution in * because i know that better than common * and have an interpreter for checking my work\n", "it s popular it s actively developed it has many libraries offering the features of a modern programming environment and * is somewhat simpler not to say better just simpler than common *\n", "i ve also found * ides much more user-friendly than * s plt * is a good one\n", "that said it is a * which has fewer batteries included as compared to common *\n", "for a counterexample i think * programs ran faster and used less memory than the * programs that preceded them mdash\n", "my impression common * is more for getting stuff done * is more for education and fun\n", "t s purpose is to test the thesis developed by steele and sussman in their series of papers about * that * may be used as the basis for a practical programming language of exceptional expressive power and that implementations of * could perform better than other * systems and competitively with implementations of programming languages such as c and bliss which are usually considered to be inherently more efficient than * on conventional machine architectures\n", "i noted that while in languages like c variable identifiers can only be alphanumberics and underscores common * allows many more characters to be used like and at least * does\n", "i also checked * and it seems a pretty cool language easy to do relations between data and easier than * but i d like to hear what you think\n", "first you can use * or q it just takes more work than * or q\n", "another side note * inside xpath string looks a bit tidier than escaped * imo\n", "please consider also to use * for code generation that s much nicer than * and integrates smoothly with xtext infrastructure\n", "i am not sure it can satisfy you but * test is 4 times slower than *\n", "* is a dependently-typed language that is designed for low-level programming though it s somewhat less elegant than *\n", "all in all t4 to me is more of a inside vs code-generation tool to quickly create c# or other files while * is more of a data-processing data-transformation tool to turn data from xml into another format typically html or pdf using *\n", "because * is eagerly evaluated the execution model is far easier to comprehend and debugging via printf works a lot better than in *\n", "also * has stricter precedence rules than *\n", "aside does this mean * is more homoiconic than *\n", "* has fewer industrial users than * and although it does have multicore support it is still being developed in a very unproductive direction\n", "secondly the * ffi is more powerful that is it does more with less code than * s and more libraries are avaliable via hackage so i don t think foreign interfaces will be a deciding factor\n", "the * zipwith is friendlier than the * list.map2 which requires the lists to be the same length\n", "* is closer to c++ because of it s imperative and oo features but i recommend you learn * as it is more functional more mindbending and has more resources\n", "keith pointed out that * has a more powerful type system but it can also be said that * has a more powerful module system than *\n", "you will also likely find the performance characteristics of your * code more intuitive than * because of * s lazy evaluation\n", "* has more momentum these days but there are plenty of good parsing libraries for * as well including the peg parser generator aurochs menhir and the glr parser generator dypgen\n", "* has higher level bindings to llvm than * the * ones provide some interesting type safety guarantees and * has by far more libraries to use 1700 packages on making it easier to glue together components\n", "the reason i wanted to investigate this was because both c and * were significantly faster than * for this program\n", "i would just use * but * s syntax is so much better than * s and * is pure and has cool features such as type classes\n", "as others have pointed out * s learning curve will be lower than * s\n", "in dependently-typed languages like * it s probably more useful than in *\n", "on contrary * is more c-like do not require explicit enabling of script running accepts relative paths case sensitive and loosely typed both are imho advantages for scripting language compared to *\n", "the inclusion of * code into a batch file is simpler than * and the translation of a small code segment from vbs to * is not problematic\n", "asp with * is 100 times better cleaner simpler nicer than * and makes my job a joy rather than a * head ache\n", "...i suggest doing all of the scripting from within the * file and avoiding the use of .cmd .bat files completely if you can as * is much more readable and powerful though i prefer using the * language instead but that s just me\n", "when writing code in * as i am wont to do as i have never been a fan of asp.net and * is infinitely more elegant than * you can call upon the arguments collection\n", "yes * was once much more feature-rich than * but later revisions of the language * 2001 * 2005 system* etc.. have cherry-picked most of the interesting features and there is far more robust toolchain support for * and its variant these days in addition to it being the dominant language in use in the us in my experience * is only used here when dealing with extreme legacy blocks and in academic contexts partially due to the tools support mentioned previously\n", "* is more popular in europe and * is dominating in the us\n", "my experience is that designers can use whichever they prefer usually and most agree that * is easier to use and the code is shorter fact than equivalent *\n", "pacoblaze was written in * which like adam said less common than *\n", "by these numbers and only these numbers * seems to be more widely-used than *\n", "i read somewhere that * s macro service is more powerful than * s\n", "yes they are different but you can hardly say that the * version is less capable than the * version\n", "especially as * is becoming more and more of a distant memory and the * language takes on a life of its own in conjunction with the core .net framework advancing\n", "fortunately * finally ended all that and is completely pixel based you can still alter you viewport scaling but .net seems to handle that much better than *\n", "also developing enterprise application is such new languages java c# * rubby is easier that * because they rely on frameworks every body can write c# java code that function but it requires tricks good practices and some of imagination to write * strong and rehusable code\n", "if you don t already know * there s little point in learning it now - your time could be put to much better use by learning * c#\n", "however i ve noticed that running the * tools is becoming more and more painful over time so i m looking at the possibility of migrating this code to * 2008\n", "quite apart from the fact that the language * is far more feature rich than * the fact that you have developed in * means that you have made extensive use of the .net class libraries including system.security.cryptography that you give as an example\n", "none of the .net libraries are there and there are some syntax differences as * is more strict than * is\n", "* is a better language than * use its com capabilities to save you from writing endless sketchy * code\n", "* appears much more complex then * and the learning curve is tough\n", "i assume the same control in * would be datagridview and i m fairly sure that you can probably make it look better than in * but if you want really good looking ones you might want to look at thirdparty grid controls\n", "getting your project migrated to * is certainly easier when you keep the old * controls\n", "avoiding them by modifying * is lot easier than fixing the issues in *\n", "can i safely assume that * result is more precise than * and discard the * result completely\n", "biggest of all is that adding new features to your * application is more expensive than it would be if the application was in a better language like c# or *\n", "* and *s are more expressive than * which means here that you can capture more complex relations for instance you can also represent the link between sets of things *s subclassof or use transitive properties hasancestor\n", "* is a more advanced language than *\n", "* provides more mechanisms for asserting shapes of * graphs as does new work on * shapes\n", "* has more structure than *\n", "* is richer than languages such as * schema *s\n", "just for the record the tipc addressing * is several years older than distributed *\n", "* is faster than * for most of the benchmarks on languages benchmark game\n", "* methods tend to be more fine-grained than * functions so that may be a good place to begin\n", "common * is an image base language although usually to a lesser extent than *\n", "but i read in this post that group by on union are not possible yet it mean that * is less powerful than *\n", "* seems much more clear to me than * and in general it seems that the guys in neo4j are going with *\n", "neo4j and * is still faster and obviously this has no effect on the * queries on neo4j but that might be just a issue with the * implementation for neo4j\n", "in this case a traversal-oriented approach is best maybe * is better since * doesn t allow you to specify traversal order\n", "recently we noticed that * queries run faster than * so we decided to convert our queries\n", "* is much more convenient than creating an activex on * or c# vb.net\n", "* is more verbose than * here\n", "while * syntax looks more related to shell syntax like bash or tcsh * is actually more closely related to * or php or ruby\n", "it is written in * which is a language somewhat simpler than * but broadly in the same family and not difficult to learn\n", "i know that * performs better for some regex but will the * performance really be this bad in comparison\n", "* is no better nor worse than * ruby python or any other scripting language in this regard -- they all do basic file operations with equal aplomb\n", "in * it s better to say * a decimal number like 32.98 is written 32 98 slash is used instead of point\n", "fortunately * 2.1 has a better alternative since it s supports the built-in calendrical types from * 1.3\n"], "app": ["* is more tightly coupled to the orm than * but there are methods that you can define in a * resource to specify how to handle create read update delete\n", "i recommend to take a look on * which turned out to work even nicer than * it helps you also with things like versioning your api and mamange multiple endpoints nicly\n", "edit i found out that * was proposing query throttling but everywhere people say that * is better than *\n", "- similar to * but i ve had better luck with *\n", "dealing with a * cluster is often simpler then dealing with a * cluster\n", "but keep in mind that in many cases being * or not * is no problem and not all * applications are by definition better than * ones\n", "do you have any situation where * is more appropriate than *\n", "for certain kinds of transactions a * session may perform slightly faster than a * session\n", "while a lot of development has been done with * connections to solve most problems sometimes it s just simpler with * connections\n", "or in short * is better than *\n", "service to build drools knowledge and get session i prepared a * engine lighter than the * one\n", "a * service is typically harder to develop and scale than * services\n", "in ejb3 there is no such thing as * is better than * session beans\n", "btw * is really more fast switching than * in ios.\n", "* is nicer templating tool and it was created by * and its designed to work cross language originally which can be forked from git - *\n", "its just a name they choosed it because * provides more than * for example web site modules\n"], "framework": ["personally i think * is much better suited for mocking the unmockable and i prefer a combination of * for my own interfaces and classes and * for framework and externalities like file i o gui db connections etc\n", "this is another reason why i d prefer rhinomocks and * over * * uses the older expectation style whereas rhinomocks and * both support the arrange act assert approach where you specify you expected interactions as assertions at the end of the test like this\n", "for general testing * is a more well-established product while * is focussed on tests written using bdd methodology behaviour driven design\n", "you can use * which is quite better than *\n", "i suspect * doesn t have quite as flexible a structure it s smaller and lighter than * but a quick look at the * manual to see how behaviors components helpers and the vendors folder may be helpful\n", "* is newer more feature rich and heavier than * * is designed to have a much smaller footprint so you will most likely find yourself creating functionality in * to match cake s\n", "i have been reading about * but it seems a bit more complicated than *\n", "in my opinion it will probably be easier to integrate with * although someone more experienced with * might prove me wrong\n", "in my view * seems much more lighter then * but i never used either one so i can t judge\n", "* has the lower learning curve overall so i would recommend it over *\n", "* is considered slower than * but you can tweak it to enhance speed\n", "why do people say * is somewhat harder than * for people new to mvc\n", "i personally use * which probably falls in to the heavy framework category but is at least much lighter than * and lighter than zend too i think\n", "i have seen a lot of post where they are claiming that * is much better than * but looking at the differences i have seen that the widget support is not there in *\n", "or would a tool like * be better suited than * in this case\n", "since apple has decided that * is no more and * appears to only support prores 4444 and 422 flavors how are developers supposed to write modern software that can handle 4444xq 422lt and 422 proxy\n", "* seems to have a bigger community than * maybe it s just my point of view\n", "i think * produces a bit uglier code than * but i m afraid to choose * because it s changing constantly and i will be stuck with the current version if it breaks backward compatibility\n", "it fills the gap between * and * more powerful than * and easier to use than *\n", "i did some reading on * and it seems to be able to do what i m thinking of although at a much lower level than *\n", "web2py may be young but the mailing list has 2000 messages month which is similar to * and far more than *\n", "compare the very active * tag on stack overflow with that of pylons or * though and i d argue getting started is simply easier with * irrespective of anything to do with code\n", "it s very heavyweight and not fully featured for forms so prism or * works better as these are designed for forms from the ground up but if you do use * for forms its easy to go native if you need\n", "you cannot use mocks in conjunction with * it s better to let * provide the context you need here\n", "you can do it with * but works better in 32bit * framework\n", "i think your code has no problem except that * has deprecated legacy promise methods success and error of http after version 1.4.4 you should use standard then method instead if your * depends on higher * version\n", "the docs for * 2 are clear user-friendly and much less intimidating than * 2 docs\n", "i ve only done one experiment with * material myself and i wasn t experiencing any real performance issues at the time but i did read some people writing about it being slower than plain *\n", "it s probably overkill for what you need but * is an mvc framework and it doesn t look any more heavyweight than * or trimpath s junction\n", "i have worked pretty heavily with both flavors of the gwt * libraries though i ve spent more time with * recently\n", "* makes use of bindings better than * currently does\n", "* has a better data store api than the one * has\n", "like bruz says * is probably more freeform at the data layer than *\n", "considering the lack of windows 8 love that * is getting support being dropped apps won t be sellable on the app store -- i d go with * -- it s better than * anyway -- the only down side is that you can t make xbox apps with it\n", "* is more popular because it was there first therefore more articles about it on the web and better tooling and because most programmers don t care about or need the advanced features that * offers\n", "from what i have read on here i here that * is more popular over *\n", "* is more widespread * has the most features but mstest has more manpower behind it\n", "developers community it might seem that * has a larger community of developers but during my career with * i ve found no bottleneck of having a question without an answer\n", "according to my experience * is easy to use but it has some pros and cons too every framework has but i used * on some projects and i think * is much more better than *\n", "how can i connect a method and not a command with a binding from the * to an attached event to ask in a more general way with * micro\n", "with * it is even easier since you just need to bind a property on your * to selecteditem\n", "with this in mind customizing the css of a * app is significantly easier than * for the simple reason that you control the markup\n", "* probably has more resources than *\n", "i would say * would be easier over * as the default ui elements look really good\n", "this is only a guess and is not based on actual performance testing probably * will be doing better than *\n", "it should be mentioned that * provides many more features for smart stubs spies than * so both can be used together\n", "the thing that makes * a better choice than * spies is that it is capable of programming spies expectations withargs ... .called.\n", "we started experimenting with * on smaller services and kind of like it more than *\n", "2 * a bit more structured than * but you have a basic app up within 10 mins and if your familiar with mvc design its a great way to develop portals incredibly quickly\n", "i have found one benchmark in which * is faster than * and another benchmark in which * is faster than *\n", "i am currently looking at * and while its more complex than * the documentation is much more informative and therefore understandable than cakephp s\n", "so latest * 2.0 is better than * according to this benchmarks\n", "personally i d say * might have the edge as it encourages convention more than * would\n", "* has a higher learning curve than say * and cakephp\n", "* is not better than * express the big thing that differs is the structure of it\n", "so what makes * significantly better than *\n", "* is more direct and simpel to use if you start to learn java * has more features but maybe is more complex\n", "i know this can be achieved with * but in my experience it is easier with *\n", "in case if you have flexibility to choose another testing framework you can try with * which has bigger feature set than *\n", "if you have to do a lot of this honestly * is more flexible but you can absolutely get it done in *\n", "to be perfectly honest i * is way more popular than * at least here where i work and live\n", "if you re doing non-unit testing * might be a better option than *\n", "* offers you more options and possibilites how to run your tests and in which order especially something * can t\n", "here is what it would look like with * it s a little more contrived with * since you can t pass parameters directly to test functions\n", "firstly i am not sure how to properly use multi-thread with * last time i tried i had no success anyway i have had better results with *\n", "* is more flexible than * and have multiple advantages like support for parallel testing for example\n", "* is much friendlier to this paradigm than * though\n", "* has more capabilities and can be helpful with integration tests * is more focused on unit tests\n", "isn t * supposed to a better than *\n", "* strives to be much more configurable than * but in the end they both work equally well\n", "edit it seems * has more printed books as references compared to * on amazon\n", "if you are familiar of using * it is easier to switch into *\n", "if there is a * extension or similar framework that provides a better solution than * then please let me know\n", "* is more low-level comparing with *\n", "i m new to sever-side programming.some people told me that * is more suitable for beginners like me than *\n", "* has a templating language of it s own it looks easier than * s\n", "since * seems to be much lighter than * i would suggest that you take a look at *\n", "* certainly is far better than using plain * refer the link posted by damo a couple of answers above\n", "* is more powerful with * but not necessarily richfaces or icefaces for they mostly just extend the component set which is anyway fall down to standard html components when rendered by *\n", "* is a web ui framework whereas * is a more general web application framework that integrates not just * but conversational contexts workflow jbpm and object persistance preferably ejb3\n", "well for that you ll need * that is better integrated with * and * does not handle file uploads that actually everyone use so you have to put also icefaces that actually are better managed by maven that you currenty are not using... neverending story\n", "* seemed a bit easier than * and i started to do a hello world * app with this tutorial\n", "* is much more mature than * web api\n", "though * looks more mature than * web api i m still a bit confused\n", "building restful services with * is much simpler than with * in my experience\n", "is * better than *\n", "you could argue that the * style is simpler and you can do it in * too it just isn t optimal but keeping the state only in the server has many advantages\n", "if you actually need dao s this is something that comes out-of-the-box in * and put partly in * roo but there is also a great addon for * roo hades addon that does a great job at this maybe even better than *\n", "* looks more natural when developing applications in scala however from what i read it seems to support fewer test scenarios compared to * and it s also less mature\n", "* has been around a lot longer than * and is much more actively maintained because of it s much larger contributor base\n", "but a friend told me to begin with * as it s simpler and will help me when i start learning * as * is more complicated than *\n", "* has a really great albeit smaller than * community and there are a lot of extensions available for common web-app extensions in the extensions directory\n", "current task looks like * is ok for it since it is smaller and simplier than *\n", "i m building an application in both bottle and * to see which i am more comfortable with as * is too much batteries included\n", "either will do the trick but bottle or in my preference * will be faster as it is much more lightweight than *\n", "* is very batteries included meaning that it comes with much more out-of-the-box than say * and to me a large part of that the user auth system\n", "* is more focused on simplicity instead of functionality while * has more functionality\n", "i read that * for beginner is better than * because educational reasons at the same time * have * oscar\n", "both frameworks are fairly easy to implement * is much easier than * imo although * has a built in authentication layer that you can use albeit more difficult to implement in a client server scenario like you need\n", "but if the use of mongodb is a must then i suggest that you reconsider using * in the first place because mongodb has a better integration with * through mongoengine\n", "our team use * as our frame before but now we use * as our frame because it is more light than * but we still use * template.\n", "if you are looking for the latter then * is a micro framework that is considerably smaller than *\n", "performing this asynchronous testing is actually possible in * but is handled better in another javascript testing framework * js\n", "* is clearly more bdd focused than * although i could see doing bdd with * by describing the tests in a behavior-oriented way\n", "* is older and have more extensions dbunit * etc\n", "first its not a bad idea to use * to satisfy your requirement the uniqueness of node and added advantage compared to conventional technologies like apache-php is clearly explained in this following video why * is better .the notion of node being just used for advanced or complex applications is wrong you can use node for building applications which are very simple to anything of huge proportion.it would be a not so comfortable task for a node beginner to code without using any frameworks but by using this web application framework called * you need not code from scratch and its very easy to setup html pages using its simplified html templating language called jade and route requests also you can even use your html pages if you are not willing to use jade for rendering the views of your application .here are the series of tutorials which would help you tutorials on beginning with * basics of *js\n", "comparison between * vs * - why is * voted better than *\n", "* s a much older library than * so you could expect that it would have many more features\n", "1 split those tests to unit and acceptance and use a tool like * to help you do acceptance which is way more elegant than * for this kind of test\n", "* is more of a modularity framework and * is more of a mvvm framework i know both have overlapping features but it would be great to take best features from two frameworks when they are combined\n", "* is rather faster than *\n", "i d totally go with * unless one dependency * is better than three * jinja2 and werkzeug\n", "* is slightly easier to grasp but * is the best in my opinion at least so if you want to start learning and using a framework start with the one you re going to use when you ll be a master in tdd\n", "subjective * provides much nicer code coverage reports than *\n", "* is more popular and up to date as * hasn t had a new release for some time though for testing webforms it s still very useful as * does not have good support for that\n", "i found * was even easier than * to set up\n", "in my opinion this is a more elegant solution than jsf and i think * s ioc container makes it more powerful than *\n", "* middleware is much simpler and less hacky than * middleware due to the way middleware flows in a stack-like manner\n", "it shows that * is faster then other framework but as this question is about * and restify * is faster than restify\n", "i should also say that i have the token at ctx.request.get authorization * based i think it s something like req.header authorization with * in all routes\n", "* doesn t provide this kind of thing out of the box - it s designed to be a little more low level than *\n", "see this blog when you have 10000 request * performs better than *\n", "* is more powerful verstile but to get started with it i feel you have to be a better php developer than you do to get started with something like *\n", "i am using * 2 and i see more than one * method that takes an idictionary as a parameter for the html attributes\n", "i like * but the amount of gpu memory * use is larger than * i test in resnet-50 with *-memonger\n", "thus i think * is more suitable for intranet and takes less time to develop your app while * is better for more complex gui or unstable connections where additional roundtrips matter\n", "* makes ui testing really easy and useful with lots of great apis that are less complex than *\n", "* arguably has more better documentation than * see plone.org products * as well as my book professional plone 4 development\n", "the good news is that * content types are more lightweight than * content types and doing raw listing by iterating over folder.contentitems in your template should not be that expensive\n", "variety of supporting widgets is probably the single area in which * is still stronger than *\n", "* s ajax support is far less verbose than * s\n", "even though * has better capabilities i prefer * due to *s complexity overhead and lack of ui for control api\n", "* the actionbean approach doesn t look much better than *\n", "i ve found * to be really effective and surprisingly lightweight....it aims to be more lightweight than *\n", "i have no concrete figures on that but from my own experience i d estimate that instrumented tests are around 100-400 slower * seeming to be faster than ms *\n", "* is more often compared contrasted to * in that it offers a set of facilities outside of moq and or rhinomocks sweet spot\n", "overall * is more flexible than * and a great base to build a web application and api on\n", "i ve came to * from * which was a little bit bigger documentation and easier to understood but as far as i found out many programmers say that * are alot better than *\n", "but if * has a bit too much bloat for you maybe you can try * which is a bit less bloated than * started as a fork\n", "but * offers far more than just doing away with the need for your own writables although that is in my view a considerable plus it offers fairly efficient serialization the choice between serializing against generated entity classes like * requires or using a so-called genericrecord structure instead and not having to have tagged data\n", "performance i did some test with simple game similar to swing copters and found that game created with * consumes 15-20 more ram on ios device that the same game created with * but then i used apportable to run * game on my android device and found it almost not playable\n", "i use * and * together but the language syntax of * makes more sense is semantic as * when testing for request expectations\n", "* s is better * s appadmin is for administrators only\n", "i think you ll find that * is even easier to learn and use than rails and *\n", "and * is more lightweight than * rails whatever on pretty much all counts\n", "to answer klochner both seems quite popular but ruby is not a language that i am familiar with and * seems more heavy and complex to me than *\n", "i prefer * because there are more conveniences built into the environment than offered by * but * is much newer than * and hindsight always makes it easier make new implementations better\n", "having said that * has a lower initial learning curve than * as it was specifically designed as a learning tool\n", "anyway the most important issue is that * is easier than * pylons php and rails\n", "* s admin is better and more customizable than * s appadmin\n", "* has more focus on simple is better than complex but * has more focus on explicit is better than implicit\n", "as i understand it * supports gae better out of the box than *\n", "the * cms is a great php framework better than * the most popular at the moment but its documenation lacking\n", "thus i suspect when people say that * is much faster than * it is because of the loading and updating delays but the actual test execution time appears to be very similar\n", "* has better support for parameterized tests than *\n", "sriwantha * is a simpler framework than *\n", "if you have a full version of visual studio 2008 rather than the express edition it integrates the inbuilt * much better than * does and cruise control also supports *\n", "* is faster as compared to *\n", "nonetheless i tried to compare the sum of all test speeds and in some cases * is faster and in other cases * is faster\n", "for example * offers more assert methods than *\n", "from my experience * is much slower than *\n", "the best testdriven.net disables all instrumentation that * does so it makes * blazing fast - much faster than * for example\n", "various people told me to go with * since it s better than * apparently i have no idea and it also has very good support in resharper which i m using\n", "* uses an older less capable version of the * platform for its videoplayer\n", "also * has little bit better benchmarks than *\n", "btw why do you want to use * it looks to me less powerful than *\n", "* seems to have an overall nicer syntax than * like the strongly-typed way the former deals with passing parameters to a constructor of a faked class\n", "personally i really like * which is fairly unusual but does make getting things right an awful lot easier than *\n", "i suggest that you to move * which has a better api or even to * whose protocol is even simpler\n", "for the record * as of today supports more complex scenarios than * that s why the initial learning curve is steeper\n", "in * when is it appropriate to render your game content using more than one *\n", "i would advise you to try * it is very easy to learn much easier than * and it let s you re-use many existing components as well\n", "i m in the hate it part so anything i said is biased plus in our test prototypes developing in * was faster than *\n", "before i am using * but i found out that * is much better than * and it has a lot of features\n", "i understand that * is what s hot right now but i ve never played with it and am not sure if learning * is more time-effective vs using * which i know pretty well but just doesn t excite me any more\n", "if you ve been using * then you already know it is better than *\n", "in my personal benchmarks * is undeniably faster than * due to lazy loading\n", "unfortunately i m pretty sure you ll not find any packages or projects that migrates a joomla web site to * or maybe * which is much older than *\n", "i am new to * it s good for coding but it is not much faster than *\n", "i d suggest having a look at * which is much closer to http semantics than asp.net * is\n", "the later version of * makes things easier by integrating with the * lifecycle as a runner\n", "* + monogame --- monogame s performance seems only slightly lower than * can build to most platforms\n", "* is more popular and has more tutorials then *\n", "also take a look at * as this has lower overhead than * and works with * forms\n", "while * has much more sophisticated widgets than gwt you still can t use * in conjunction with it which is why i rejected using *\n", "the consensus seems to be that * is easier to use but that * has the advantages that come from being open source easy to customize merge with other code community etc\n", "i would recommend * as it is in my opinion equally or even better than * and it is free\n", "but on the other hand although new the * package is actually more complete imo than *\n", "* would make things even simpler than *\n", "i already know that * is a more heavy weight approach in contrast to *\n", "both give you the ability to implement things in a variety of ways which can be confusing but * provides more of the code that you would have to write yourself in * as standard which for me personally is more important for rapid prototyping than the wealth of * examples available\n", "* is larger than * but thanks to expires cache-control this only matters on the the first load\n", "as wuliwong said sinatra and * are way less complex than *\n", "sinatra and * are not automatically faster than *\n", "but i don t know anything about sinatra and * is the footprint and speed really that better than *\n"], "editor": ["i had previously used * 3 for a couple days and may have come to the conclusion that it is better than * at actual html css coding\n", "macvim * is much thicker whereas * is slicker and sophisticated\n", "but i ve found that * 2 has some features i like more than * and also tm v2 which is in beta\n", "you can customize * and i think you will like it better than *\n", "if vim seems too much by the moment i think that * is better than *\n", "textmate isn t known to perform well on large files but * supposedly performs better than * on large files and yet supports legacy textmate syntax parsers\n", "personally i m using * right now which i find easier than * for searching and navigating the code but everyone has their taste\n", "* or webstorm are far more accessible than * so it usually happens with their editor rather than mine\n", "lately i have used * a bit more than *\n", "this is the one thing i think * does better than *\n", "on unix like environments * is more native and you can use slime which is usually available as a os package or as a separate download for *\n", "* is a better * for macs though that won t help you with solaris\n", "i feel like * is so much better than *\n", "as it happens my choice is * but just about anything which is more advanced than * ought to be able to do this\n", "on windows machine i would probably go with * personally i now use programmers * 2 however it does not support a spell checker and i don t really thinks it s better than * by any measure\n", "you might want to try * - it has an inbuilt tutorial and some people like me find it easier over * no flames pls\n", "that said modifier keys are important in * even if less than in *\n", "i ve used * for 10+ years but never really into * scripting always subjectively beliving that this was one area where * was weaker than *\n", "in * it s much more difficult to run a subprocess than it is in * so in * you need to have a separate running idris repl\n", "cut and paste in * takes more steps than in * iirc\n", "for example * s macro shortcut f3 and f4 is easier than * s qq and q\n", "maybe not productive in the same way - i d say * is quicker for editing files * is better at doing everything else again i would personally say things like flymake-mode vcs bindings are such are quicker to use than the * equivalent\n", "it is worth learning both because * is better than * at editing certain languages and doing certain tasks and vice versa\n", "* is more powerful than * it s scripting engine is far more flexible and there are far more scripts modes and the likes built around *\n", "i realized that * would load slower than * but this seems ridiculous for a fresh install\n", "and i tend to think that after a moderate amount of customisation of either one * will still start up faster than *\n", "i am starting to understand that even though * is more powerful than * * is at least 10 times easier to use less keystrokes and requires way less modifications\n", "on today s machines that s a non-issue but if you ever find yourself dealing with older gear it s my experience that * is far more likely to work on a wonky terminal than * is\n", "there are definitely some advantages using external editors however * is ten million times better than *\n", "since * is much older than the extensible * as opposed to the relatively non-extensible vi it has a much larger collection of extension modes covering almost any purpose you can imagine\n", "i have found that * has better plugins for providing some of the more ide-oriented capabilities but like boltclock said * is really just a powerful text editor and does not try to be a one-stop-shop ide\n", "i think * is equal to or better than *\n", "i have tried with * 2 and it work very very good better than * p\n", "* 3 needs much more time several seconds more then * before the opened file shows up and i suppose it is because * does some pre-evaluation of the file content like detecting areas suitable for folding there are fold triangles available depending on indentation of non-white characters in the file\n", "in studio 3 much of this sort of functionality is still coming as * is going more of a * bundle route for a great deal of their features which i think is really cool\n", "i prefer * because it s a little more customizable than * but they re both great options and lighter than dreamweaver\n", "* which is often recommended are even more broken than * 2 which i find to be pretty good actually\n", "* is more powerful and * is worth the price tag\n", "i like the idea of the of editing inside the terminal and like the key bindings of * but the text highlighting in my * is much worse than in *\n", "why * uses more memory and takes more time to start as compare to * editor\n", "though similar in ui and ux * performs significantly better than * especially in heavy lifting like working with large files complex snr or plugins that do heavy processing on files buffers\n", "plus copy as rtf for * has more recent updates than sublimehightlight for *\n", "* has better github support out of the box but * has a several git packages\n", "* has better performance than *\n", "i tried a few ides on ubuntu and it just didn t seem right - * is lightweight and i actually enjoy using it more than * on os x\n", "it looks like * is slower than *\n", "when i m in a hurry i use * purely because it is quicker than * edit\n", "by the way if you like minimalistic approach there is also * editor which is my personal preference for doing small bits of code it s even more lightweight than *\n", "i know * does that but * is a more complete tool than * so i cant switch to that\n", "if you re just going to use * the same way you use * don t bother - * is better than * at being *\n", "if you are on linux eg ubuntu you may try * for ease of use with some plug-ins but to handle very large files you re better off with *\n", "i find * has an easier time dealing with vectors because they re first class objects while in * they re actually a combination of a vector mask and a colour fill\n", "i have * 8 as well as * cs3 on my windows pc but i m more familiar with *\n"], "ide": ["i had previously used * 3 for a couple days and may have come to the conclusion that it is better than * at actual html css coding\n", "however i do not know if * has a comparable option like that as it has less functionality than * or even intellij\n", "if you re focussing on pure client code then i find * to be an excellent javascript html ide - even better than *\n", "consider using * canvas now ga which is an added-value iframe with more security and easier integration with * apis than raw iframes - see\n", "i think * is better than * for 8-years old\n", "i like the auto-complete feature of * but from my experience it is slower than *\n", "in studio 3 much of this sort of functionality is still coming as * is going more of a * bundle route for a great deal of their features which i think is really cool\n", "my c * is faster than my embedded * function block in * environment but when i use it in rt-lab the embedded is faster\n", "we sort of settled on it but later found * and liked it better than *\n", "i like the * ide even better than * but i m not sold on installing and using mono s compiler just yet nor do i know if it can even handle the latest vb.net c# language features\n", "* is more of a replacement of an ide for mac and linux in windows the recommended thing is to use visual studio or *\n", "webstorm + pycharm + * + phpstorm though to be fair * has more features than * atm\n", "another alternative that people might mention is * which is from jetbrains but its closed-source not well supported and whilst it might look nicer than * it has more or less the same features but is much more resource-heavy and laggy so i d pass on that\n", "it looks like * is slower than *\n", "for that purpose i want to transform the * model into a c version and launch it from a * script so that the process would be much faster than opening * environment\n"], "application": ["odd that * is more tolerant than *\n", "if you would like a unified front-end for * and opentsdb you could consider grafana which has support for both * and opentsdb but less functionality than * in regard to *\n", "* focuses more on logs and adhoc search while * focuses more on creating dashboards for visualizing time series data\n", "* is more of visualization only while * is for searching the logs is that right\n", "* has a stronger syntax than html and is easier to convert to * this way\n", "if you are targeting android you can use firefox for android by developing a webapp that has native * support and because of it will be much faster than * or other javascript solution\n", "in addition the need for polyfills for * complicates matters further as they may handle the interaction differently as can be seen in the sample below when using the button to load *\n", "for load testing * is better option but you have quite enough funding then go for loadrunner * rational performance tester and for cloud try blazemeter\n", "since * is a bit more complete than * when it comes to features you could define separate issues with custom field for your tasks\n", "research showed me that * is simpler to use over * so i decided to use * but have no idea how to install it.can anyone please tell me what are the steps you need to take in order to install * bug tracking system in a small company to track website mobile portal bugs\n", "i ve read that * contains less project management tools than *\n", "i have been trying out * to see if i like it better than *\n", "i have found * to be more reliable than * or loadui\n", "i think you ll find that your team will like either trac or * more than * or mantis\n", "why * is better than *\n", "imo * is better than admob especially when using their * ads\n", "i understand * is more of a * clone but retrospectiva seem to support agile methodologies via a nice plugin\n", "* handles multiple projects and sub projects far nicer than *\n", "for next projects i m going to try * seems more clean and hipe than *\n", "i d recommend * like the other posters as it is more complete than *\n", "* is an open source ruby on rails application that supports multiple projects much better than * and seems to be much easier to administer\n", "we ve recently switched from * to * where i work and i think i like it a little more than * and use the wiki functionality almost everyday\n", "the authors of * are trying to create a better * than *\n", "i wound up going with * and it s way better than *\n", "* handles multiple projects and sub-projects right out of the box and overall seems nicer than *\n", "we found * to be a better than * simply because it is easier to use\n", "* was written to be a better * than *\n", "nobody has ever accused git of being easy-to-use no * for example although i hear it s coming so you might be better off with * beanstalk\n", "the compare dialog of * is more about file and with git you have to compare two master branches not just two commits of the same branches both pointing to the same * central repo\n", "so basically when * is more about how objects will behave themselves during application running the * is more about how you write your code before application running\n", "* s issue *king is little better than * s...i know a lot of folks love * but i find it very inflexible\n"], "browser": ["as you can see in the image * is running a lot longer than *\n", "for comparison 0.68 usage means this outdated * release is more popular than the current and previous versions of * the penultimate version of safari on ios and ie 9 or 10\n", "note i recommend using * - it is much faster than * as it doesn t have memory leaks and comes with a built-in ad blocker\n", "especially in * there is much more green in the painting than in *\n", "* probably is more complete to manage canvas than * but the problem is always to exclude the finger touch if i m using the pen\n", "now this works fine in * and safari and i have had to use assitional css settings for firefox but ie and * both display my ribbon div about 25px higher than in * or safari\n", "also nice to know is the fact that the latest version of * and also * don t know since when but longer than * supports userscripts out of the box no need to install any add-ons\n", "since you noted thoughts on other browsers would be helpful * s kiosk mode seems more powerful than * s\n", "on linux * displays text about one pixel higher than * and opera\n", "i have too problem with text in the * is bigger maybe bolder as in * .\n", "in * there is more files download 47 than in * ie 42\n", "* may be sniffing the document s encoding with more flexibility than * is\n", "also for animations * chromium behaves much better that is why i use it for development but do my general browsing in *\n", "in * it s less noticeable but in * it s very noticeable\n", "in * the button should be a tad smaller than in *\n", "* extensions are considerably more limited than * extensions \u00e2 \u00e2 they can only hook the behavior of the browser in certain predefined ways\n", "with * it was very easy i just grabbed the apk from their ftp server run the adb install command one would think it should be even easier with * but it s really not\n", "my guess is * is caching more agressively and thats why you are seeing worse load time on *\n", "btw * is less close to w3c specs than * de 42+ i d opt to start using * for your initial testing and then test it in ch to detect quirks\n", "in * the input button has more padding than in *\n", "i use * for development as i find it runs faster than * and ie so it is a bore to guess where the icons are\n", "update3 now it works here which means that i couldn t fully reproduce my bug to show it to you but in general the problem is that the height of 5x5 table in * is less from * on 22px which is 22px gap between table container and a table itself\n", "* is slower than * in javascript\n", "this does not seem to occur in safari or ie and a similar permission error occurs sometimes in * but is reproducible more often than not in *\n", "the idea is that if they are using ie then they must install * frame and if they are using less than * 4 or opera 11.5 then they must upgrade their browser not not sure if the way i am doing that is correct\n", "in * the button is wider than in *\n", "this is due to the simple fact that * has been in the extension business longer than * or ie\n", "first just a heads up you may want to try firebug+firepath on * which is a more handy tool than * s developer tool\n", "i usually use * s developer mode which imho already gives even more details than *\n", "* is more forgiving or you could call it less compliant * less so\n", "using * even it s slower than * it s still more respectful of privacy\n", "i would like this function to work in * ie * etc but at the moment it only works in * and older than * version 49\n", "* has like 40px less width than * in columns which is causing problems\n", "* handles these better than compared to *\n", "i think from my tests perhaps * has more strict standards than * about cookie manipulation\n", "and additionally the algorithm that * uses is better than the one in * at least for handling the resizing of text\n", "even then * s fonts look thinner than in * or ie\n", "however if thats the case does this mean * is faster in execution than *\n", "* has a bigger time difference yet * is the one with the gap in the animation\n", "i have been trying to do this in * webextensions but if it s easier with * i will try it that way instead.\n", "because of how * s plugin system works development mode in * is much slower than in * or safari see here for more details\n", "it depends on the browser its definitely true for ie and * but seems slower on *\n", "suffice to say ie and * start having problems at larger heights than does *\n", "* is more picky about characters that are set in uris than *\n", "you can see if you look at the bottom and right hand edges of both * lines up perfectly but * seems further in both directions and i cannot work out why either in firebug or * dev tools\n", "when i run my http web server on google * it gives more 324 error than in *\n", "in * the font appears to be 1px smaller than * and ie and i cannot see why\n", "2 install the * extension there s also one for * but the * one is more reliable -- so if you re a * addict like i am then use both\n", "my question is similar the same page in my pc renders fine * * but the same one on a server rendered smaller by * * ok\n", "it works in * because * is more lax about this security restriction and * happens to be more strict on mixed-content errors\n", "i guess * is smarter about me being careless than * is\n", "here is a simple performance test showing that in * filling is faster than clearing i am not sure what goes on with * and canvas nowadays but in * clearing is many times faster than filling both significantly faster than *\n", "ps i ve noticed that in * situation is better than in * but new line still starts beneath tag\n", "phantomjs achieves a better accuracy than * slightly lower than * but in around half the time of *\n", "so i wonder the benchmark is also influenced by the installed extensions or * is really so much higher than * in performance\n", "* is just faster than * which just faster than ie at bit-wise operations\n", "when i posted this on facebook someone said that since * is open source project developers optimized math.min but * didn t since * is just a modification of chromium but beside that above statement is not quite right that makes no sense because that doesn t explain the reason why * s and * s math.min a b performs in similar speed and * s math.min a b and * s performs in same speed because if * is faster than * then * s math.min a b should be much slower than * s\n", "i believe the error might be how * and * handles these multiple times included jquerys and it might be that * uses the older and * newer version\n", "or does this mean * is less secured on that point than *\n", "it s clearly visible in * and is far more subtle yet also distinguishable in *\n", "ellipsis still wraps in * but is more user friendly in * by adding the .\n", "and also does anyone know why is * so much slower than * in 3d rendering\n", "the performance in * is best less so in * and ie\n", "also * has a great tool that allows you to edit css on the fly which i find more useful and quicker than using * s extensions\n", "also it does appear that * consistently handles this better than ie or *\n", "why is * so much slower than * on my laptop\n", "the results varied from a browser to another * 4.0b12 is faster using but * webkit and opera is faster when using\n", "i have tried * and it better than * crash issue is not always happen but not solved this issue\n", "although * is a better browser for developers than * cause it gives you more tools to work with\n", "* renders passwords smaller than *\n", "in my experience * is sometimes more lenient than * but i would definitely test in both\n", "the logs only seem to work with a * browser which is a laugh as usually * is better at running google apps than *\n", "if you are able to enforce browser usage i find that * on android preserves line breaks when copying and pasting much better than *\n", "* is just more forgiving for some mistakes then *\n", "* s parsing may be more strict than * is at having things like trailing commas as specified by the standard at as stated in danilo celic s answer\n", "but * keeps being less responsive than * or ie\n", "what * displays is about 5 inches higher than what * displays\n", "svg performance in * is slower than in webkit * and ie10\n", "in general i have found * to be more finnicky than *\n", "i just found out that if you re using * you trigger antialiasing at 49px or higher however with * it s set at 257px or higher\n", "any ideas why * is apply more spacing than * ie\n", "also about * i know still less than * and i m not sure about how it innerly manage resources among threads and if it is even possible to achieve what i want but if possible i d need to do the same work with * threads\n", "but in * the left-collumn gets a much bigger height than in *\n", "also * s map function is up to 2x slower than * on my machine\n", "they use iframes in * which seems better but in * they do this by putting manually defined span and font tags\n", "also * 4 has hardware accelerated canvas that is marginally faster than ie9 and a lot faster than *\n", "try your current setup in * * typically has a narrower minimum viewport width and try something like min-width 600px in * and your styles should be applied as expected layout.css will be applied when the viewport is at least 600px wide\n", "* is easier and better than * in finding the element from the webpage\n", "tldr in * filter is slightly faster in * that s the opposite\n", "i am checking it in * and * and see that in * spacing between letter is larger than in *\n", "however a sdp object local description by * does not contain datachannel at all and moreover the sdp is much shorter than * and less information bundled\n", "* is a bit more strict than * here\n", "this doesn t happen in * and is less frequent in * than in ie\n", "i m sticking with * debugging of my angular 2 app outside of vs code as its user experience is better than * especially when working with typescript files so i ll stick with that for now unless i can figure this out\n", "* is lightning fast when you use the dom api but vastly slower using the .innerhtml operator by a magnitude 1000-fold slower however * is worse than * in some areas for instance the append test is much slower than * but the innerhtml test runs much faster than *\n", "it works fine even for italics but i m aware that the user s browser is being asked to make a best-guess here and have noticed that * will make individual chars appear slightly fatter than * when i do things this way\n", "better use * even thought * is not slower than * for once probably the tracing for the image comparison pays off yay\n", "* is more technically correct in this case as it outputs the state of the object at each point in the loop whereas * is apparently waiting until the end of the loop to output each console.log but i m not aware of a standards specification that covers the console host object\n", "* renders longer input fields than * and ie\n", "i inspected the range object in both * and * and then noticed that * s range object is far richer than * s\n", "based on what you have provided i cannot tell if * actually does load faster than *\n", "the * console gives more information than the * console\n", "this is because in ie and * the footer link text is larger than in * and safari therefore the margins that i ve set up for the icons do not work\n", "often * is understanding more thing then it should and * is bringing you the reality back in your face eheh\n", "* has a more advanced plugin than the * extension but both work\n", "i m seeing a strange issue on windows in * the framerate is almost 2 times lower than in * on mac * and * have similar framerates\n", "font-face bold in * is bolder than in *\n", "in * this might be handled a little nicer than * but rather than completely redraw an element you should try to append only what you need\n", "* on nexus 7 is a bit better at producing reasonable sample rate readings but the updating of the display is even more sluggish than *\n", "on my computer * performs much better than * on these tests using jsperf\n", "i m on a mac os x 10.8.2 running * 18.0.2 - it actually runs the game faster and smoother than my * 25.0.1364.99\n", "in * it is appearing higher than the original in *\n", "currently with the 10px top padding the cells in * look taller than in *\n", "i ve ran into out of memory errors on * with canvas heights greater than 8000 * seems to handle much higher at least to 32000\n", "the reason this is happening is because * renders the select box as a taller element than * and the container of the blue text is getting caught on the select s container element because it s now sticking out lower than the others\n", "the position of the list in * is always higher than that of * no matter how i padding or margin the list\n", "apparently * is pickier than *\n", "i guess * is a bit more forgiving than *\n", "* and ie9 require a proper domain to run from presumably because they are more strict than * in the way they associate the localstorate object to a domain in * it doesn t need to be a domain as such\n", "that happens because pixels size in * is bigger than in *\n", "i m trying to add a ribbon to a page using css3 linear-gradients but the rendering in * looks a lot less pleasant than its * or ie alternative\n", "found that the issue stemmed from using the * webdriver which apparently has much higher security than its * counterpart\n", "i want to set my own time limit rather than use the browser s default i believe * s is much longer than * s\n", "while the rest of the browsers report the correct width of the document * reports a smaller one example at screen resolution of 1920x1080 ie * and safari reports 1920 while * reports 1903\n", "* s default textbox includes more padding than ie *\n", "* produces more space compared to *\n", "i ve tested the sample on * and it s a bit slower than * but usable\n", "no and there won t be any time soon because * s add-on api is more restrictive than *\n", "safari and opera work with the * setting but * and ie display the iframed page larger than * causing part of the text to be cut off\n", "use * network in development tools and check your requests sometimes it just sends options request in cross origin i insist on * because it s network tool is much more detailed than * and safari\n", "in * it seems more or less ok but in * when i first tried it it should give me not logged in my console\n", "* gsap performance is still much worse than in * but * gsap does still lag every few repeats or so while in * the css animations do not\n", "pd note that * s developer tools are better and more complete than * developer tools but in essence are for the same purpose\n", "in * it takes some more time compared to * safari\n", "even if you give the inputs a attribute * renders them wider than *\n", "it seems * applies some formatting to render better than *\n", "and of course the results - if they are reproducible - might suggest that * is faster than * or that * just prioritises timeouts over dom events\n", "* is extremely slow for your code path but grep seems to be 50 faster than array.filter here making it 900 slower than the * run\n", "also ie and * seems to work better than *\n", "i have just noticed a site i am working on looks different in * than other browsers saf * everything is more saturated in * even a background-color rgb\n", "notably this doesn t happen in all browsers * renders more smoothly than ie and * for instance but is there any way i can make those white lines stop appearing when the user zooms in\n", "i ve been trying to sum up values over a swipe and see how different browsers report values and they vary a lot with safari reporting order of magnitude bigger numbers on almost all platforms * reporting quite more like 3 times more than * * being balanced on the long run but quite different among platforms on small movements on ubuntu gnome nearly only +3 or -3 seems like it sums up smaller events and then send a big +3\n", "* seems to animate the element quicker than * does and so while a duration of 1s is enough for the animation in * * needs it to be 2s to be slower and show the effect\n", "the same word in * look wider than in *\n", "i built a site and the problem is * display font-size 1px bigger than *\n", "after looking into the issue with the inspection tools of both browsers it seems that * is making the #main_nav_bar ul 10px wider than *\n", "the funny thing is that for abc_def property * is actually much faster than * and ie as i expected\n", "maybe * is more lenient when it comes to illegal characters in the url than * or something like that\n", "given these last two complications i am leaning towards a browser plugin as the solution probably * since low-level http stuff seems to be better supported than in * but i am wondering if anyone has an idea for a more cross-browser-y solution and or if there is something out there that might provide a good api for this kind of thing\n", "using the same data * does in less than 5 seconds what took ie and * 10 to 15 seconds to accomplish\n", "if we remove the font-size it appears properly in * but shows up smaller in *\n", "on stable versions of * the permissions show allow and it still won t connect even with * works older versions of * work\n", "for example if you have a text size of 15px well * makes a larger 15px than * does\n", "bad buffering can also be a result of a slow computer because statistics show that * is better for a normal-fast computer and * works best on slow computers\n", "i suspect that this may be the case because ie and * need to know about the content of the div earlier than *\n", "in my experience * will be a lot faster than * to debug huge js files\n", "* text is 1px lower than in * and ie\n", "here the working header request with * bigger than * request\n", "* which is more standards-compliant than * doesn t allow this\n", "also why does * perform way better than * on this benchmark\n", "in * the green div is bigger than in * i really don t know what is the problem i think in * it displays as it should but in * and ie9 it displays different\n", "why height in * is bigger than * of input\n", "* is more tolerant when it comes to image headers then ie and *\n", "most likely your post value has one or more characters in it that are breaking the html of the page and ie * are being a bit more forgiving than * is\n", "my * adds more chopping to video playing itself * plays the video much better\n", "in * it s much better than * but still not as black as ie\n", "as you can see ie 8 is about 5 times slower than * 3.6 and almost 20 times slower than * 9 at least when using sunspider tests\n", "* is probably easier than * these days\n", "open up the fiddle in both * * to see what i m talking about - in * the positioning of the background image is much lower than in * safari\n", "in * typeof is slower than the other two but in * it is the fastest\n", "* is clearly less secured it deliberately allows something that * locks down\n", "i know different engines render fonts differently and but the issue i m having is that * renders the font higher than * - at the size i am displaying the font this is very noticeable 3 or 4 px - which on a button means they re totally misaligned\n", "apple s safari applies almost no cross domain restrictions to files opened locally but * is much more strict about what it permits with * somewhere in the middle\n", "on * it s significantly faster to do this using 1 0 but on * it s slightly faster to do this using bool\n", "arabic default font in * is larger than it is in *\n", "* provides more detailed information about the ajax errors even when * doesn t say anything\n", "maybe * is working faster than * try adding a wait with expected conditions\n", "in * the render of new tiles and the panning is laggy this is not the case when using maps.google.com so it s not an issue of * being better than *\n", "as * s v8 is dramatically faster than * s spidermonkey at the moment these things are constantly in flux pick the forward loop as it s faster on the slower engine\n", "* encodes more characters than *\n", "that means * is more than 7x faster than * here\n", "i ve found that the font-size in * is a bit larger than in *\n", "in my testing * is nicer it pops-up the unresponsive alert whereas * apparently doesn t care\n", "for my website i noticed that tooltip delay in * was much higher than in *\n", "i need to do the same condition but for less than * version 46 and for less than * version 44\n", "obviously * is more persnickety whereas * defaults to moving and sizing the printout as necessary\n", "ie * higher than baseline * on baseline\n", "the trouble is choosing a good value for x since for this particular page * is so very much faster than * which is faster than ie\n", "thus i think * is perhaps more right but other developers at * think otherwise\n", "ie8 is the same and * is much better but i ve migrated away to * now so would like to stick with the one browser if possible\n", "the reason * is slower than * is that the devmode plugin runs in a sandbox so calls and data have to cross the sandbox boundaries\n", "the issue that i encountered was that * was giving me height about 300px more than the * ie\n", "in my experience * has better javascript performance than *\n", "in ie8 and * it runs even faster than * in general and this slow down never happens\n", "so why is * less efficient than * and ie\n", "do you have any idea why * loads javascript function much slower than *\n", "i m taking a quite educated guess here that * is more forgiving with the irregular syntax than *\n", "* takes almost 3 times longer than *\n", "i am not concerned about the fact that * runs faster as browser js implementations will vary so much as the wide spread of results encountered in * that makes getting an accurate result impossible\n", "* sends back and html collection that is longer really better imo than * ie or chromium\n", "right now * is faster than * sunspider tests so your statement it loads faster in * is not really correct\n", "it looks like it shows for * more-so than * but it might help\n", "* - good a bit slower than *\n", "update just tried it on * 30 and it did not experience the same slowdown in a worker thread but it was slower than * when run in the main thread\n", "is it because * has much better javascript support than *\n", "this is sporadic and i see it happening most of the time with * 4.0.1 and 5.0 and to a lesser extent with *\n", "performance is browser and device dependent for example * handles objects better than arrays while * prefers arrays\n", "but i guess * i have version 10 should be much faster than * 3.6\n", "in * it seems that this is 1px lower than in * and safari\n", "* handles this better than * does but neither exactly the way i want\n", "though from a design perspective it may be easier to simply add the extra 5px to the width designing for the worst case browser to prevent wrapping in * which is worse than extra space in * ie\n", "is this due to * being more strict than *\n", "it looks like * is smaller in your screenshot there so * could just not be at the defined break-point yet\n", "* extensions have much more power than * and have wider access to browser s internal api\n", "in * and other browsers the background is much whiter and brighter than in *\n", "we use * though which i believe uses more ram than *\n", "this makes * 50x faster than * and 70x faster than safari is there any known reason for that\n", "* allocates lots of memory during that preloading up to 20-30 times more than * or safari do and even twice as much as ie\n", "* is more flexible in this sense than * which is why it works there\n", "by highlighting the shape of the two elements you can see that in * left the button is 2px taller than in * right\n", "spidermonkey * is slower 50 of * max speed but the speed is consistent\n", "why in * text smaller left than in * and opera right\n", "* shows it better than * firebug\n", "it seems that in * ie the line-through style is a bit lower than * i am not sure if this is because of the implementation of different browsers or something\n", "it s just a matter of preferences and browser implementation eg * works faster with brackets while * works faster with the dots\n", "rendering without buffering on * is faster than * so i m actually not sure why * is having such a problem with drawimage\n", "it is also proper browser behavior * is just stricter about it than * is\n", "the most interesting thing i noted is that certain test combos in * are much quicker than even *\n", "* is reporting the missing key with a higher severity than * is so i want to eliminate that as a possible cause\n", "my menu links seem in * correctly but in * my menu links are 1 px smaller than *\n", "now when clicking a time less than 1 millisecond will be displayed however it obviously takes nearly a second on my computer until the changed color actually is displayed where btw. * seems to be faster than *\n", "support exists in * and my test just confirmed this\u00e2 but the handle is a little less noticeable than in *\n", "i have encounter a problem with * that is similar to an older issue with * at this url scrolling blocks javascript execution in *\n", "evidently * debugger firebug is better than * debugger\n", "as you said * is faster than * so the webdriver is trying to interact with the dom before when elements are not yet visible exist\n", "so * is better than * - but both suck in that regard\n", "what s up with * that the debugger behaves less conveniently than *\n", "use * rather than * - * with dev mode is much slower than *\n", "* is slower than * which boats one of the highest javascript engines a modified version of webkit\n", "in * it seems .prototype is faster * shows no difference between the two although generally performs slower than *\n", "* is even slower that *\n", "actually your code doesn t work on * because he is less forgiving than * about errors\n", "for example using renatoargh s test * is faster with option 2 * with option 1\n", "i d say that * is correct in being stricter than * here even though i m not entirely sure the base uri has changed and this new uri should be used for the relative uri #symboltype1 too\n", "* dev tools are by far better than * ie whatever imho\n", "most noticeably if you look or * * and then internet explorer 9 you ll notice that the terms and conditions are slightly higher than in * or * and thus slightly touching the main content area\n", "it s not the first time that the plugin for * works better for me than the one for *\n", "graph beeing cut in * is a known issue * does not respect some print css and works much better with * not all versions still\n", "i had a hiccup in * but found a fix after figuring out * is a bit more picky than * when defining svg attributes\n", "if * seems to finish earlier than * then that is the freezing glitch in action\n", "* thumbnail 4 times smaller than on *\n", "this is trickier to work around and you should file a * bug describing the situation and where it s slower than * but you could potentially reduce the amount of buffer uploads by looking into instancing or using uniform arrays instead of updating vertexes for positions textures\n", "i ve found that * is greatly faster with imacros than *\n", "another alternative for javascript ajax is writing a * add-on easier than * or embeding a web browser within your application\n", "* works a bit better than * but the settimeout just seems to delay the final result being shown rather than delaying each step\n", "i have been working with linear parsers lately and noticed the performance in * v37 was much slower than in * v30\n", "i ve learned partly by trawling this site that the * security is fussier and the app loads correctly without errors in * and ie but i can t find any resources that are loaded from a non https source\n", "of late * has had much better performance than *\n", "install firebug * version is better then a * one\n", "i found programming * extensions easier than * but i couldn t come across something similar to xpcom in *\n", "what we can see is that regardless of raw hardware power * seems to run up to three times faster than edge and also significantly faster than * all updated to the latest verion\n", "transparency is also an issue however * seems to handle all three better than *\n", "* is stricter than * when it comes to loading data from your local filesystem\n", "* can get away with more than * before aborting\n", "when i ran the test individually with a timer * actually performed better than * hope this helps\n", "if i remove this code the width of green image in * becomes smaller but it s still bigger than necessary about 100px the * images keeps unchanged\n", "my knowledge of * is better than * so my apologies if i missed something\n", "the * apis are currently experimental hence these tools are likely to be better developed under *\n", "on your screenshot div width in * is bigger than in * and google-chrome\n", "only * and * seem to have this issue * even worse than * but i don t care that much about *\n", "in * it goes little bit lower than in *\n", "* has even fewer as far as i know and * has none\n", "the problem with this code is that it doesn t quite work on * and works even worse on *\n", "* just provides far more access to its own internals and system to the extensions so its technically possible to do more with them than with * widgets or google-chrome extensions\n", "it seems to be slower in google-chrome and * but is significantly faster in *\n", "but if firebug don\u00e2 t enabled after launch * \u00e2 time equal 2ms that faster than * and google-chrome and difference between empty filled array disappears\n", "for example i ve read that * and ie will fix framerates slower than *\n", "for example in the classic browser share example if the * is at 45 i want to be rendered inside the pie distance -40 may be and where the slice is less such as * at 6 - i want it to be shown outside with a connector\n", "update under linux gentoo amd64 it s the same - * reneders slightly larger fonts than * but nothing that looks odd\n", "a lot of people use iphones ipads and * is literally the only option even * is more like * in disguise... so it s quite a portion of users who are suffering from this issue\n", "from testing this in * and * it seems * is more forgiving in that it parses the style string and puts the right style in place for you but * does not\n", "i also have .js files being redirected to javascript engines as well for main.js in * it tries main.v8.js in * main.nitro.js in firefox main.gecko.js\n", "my ipad 1 * js benchmarked 38 times slower than * on my pc\n", "so if something works on * it s more likely to work straightaway on * more than it is on firefox - but that s just a family resemblance at the end of the day you ll still have to test each as every webkit browser product and version still uses a different version of webkit\n", "it s not even a webkit issue unless * s got a newer version than *\n", "if i try to do a google search for website loading slower in * than in * i get a lot of results about how * is slower than *\n", "in any case vorbis clearly has the most coverage * has more of the market than * now opera is about half of * and obviously firefox is huge and it doesn t really have the strong opposition that theora has\n", "this seems to me like a bandwidth error or something like that originally i ve got the error when i played with the html 5 audio api and if i loaded the audio file 10-15 times sequentially then i ve got the error but now i ve discovered that i get the error without the audio api too just by reloading the site a lots of times also * gives me the error much faster than * wtf\n", "i think * renders the moves better than *\n", "* also uses an earlier version of webkit than the current * so pages should be checked in both browsers\n", "* is more secure than ie or *\n", "* makes child block s height larger than *\n", "* is more funny than * i can easily make * cache my page but * does not\n", "it also gets broken even more in ios * which is an older version of *\n", "the browser does not matter though * gets way more consistently working results than *\n", "* 5.1.10 6534.59.10 middle handles a smaller viewport but in sort order with a smaller viewport computes new image sizes even smaller than *\n", "okay * ios is more strict than * android when it comes to this all fine but it still needs to enable me to allow the connection through\n", "the * controller bar is the quicktime bar which is smaller and dark so the movement is less noticeable than * which has a big blue progress bar\n", "* comes in at just under 41ms performing better than * but still not great\n", "* renders open sans bolder than in * so you would need to apply a lighter font weight for * open sans google web fonts rendering in *\n", "dus anyone knows if there is something wrong with my json or if * is harder to get than *\n", "i guess firefox and * handle huge numbers of elements better than *\n", "ios * is more ios * than * itself\n", "* is worse than *\n", "* still uses the older version while * uses a more current one\n", "the one used by * and is slower than mobile * s nitro javascript engine\n", "* 5.1 still renders smoother than * but it is now clear that google has done much improvement\n", "in * the background of my menu navigation drop-down menu s is much wider than in * firefox\n", "* will display fonts without a specified size significantly smaller than in *\n", "* also is susceptible to this same issue although it does a significantly better job than * at getting the realtime api re-connected\n", "conclusion diff1 is faster in firefox opera and * diff2 is faster in ie and *\n", "i read somewhere that * has more stringent requirements on cross domain scripting - it and * share the same code base\n", "total width of button in * web inspector 6px larger than in * web inspector\n", "* has more of the market than * not and invitation for flame wars just a personal opinion without any weight -\n", "incidentally the scrolling on the windows version of * is fine albeit a little slower than ie * and firefox\n", "works in google-chrome firefox a bit weirdish blur effect on hover * ends look smaller * ends look smaller\n", "to me it looks like * gets it more right than * text is generally more around a middle line\n", "i just tested geolocation on * 3.6 and iphone * os 3.1.3 the result is interesting * is more accurate than *\n", "in ie and * fullscreen_block appears closer to the bottom than in * and google-chrome\n", "small in * is smaller then small in * so never ever use them\n", "i planned on using svgs for the entire site but with only 20-30 svg images of medium to high complexity used in the page and google-chrome already seems to be showing som jank and high paint times for scroll and * is even worse though * seems to do a lot better\n", "it works great in google-chrome and * haven t tested ie but i m sure it s somehow worse than *\n", "the service is still in beta trial and * conversion is working better than * one\n", "on * everything is slower than on * still the object property access is more than two times faster\n", "* behaves better than * but an error message \u00e2 \u0153one error in opening the page\u00e2 \u00e2 shows up in the status bar if you remove the iframe during the load event\n", "in * it renders significantly brighter than in * or google-chrome\n", "please especially test on * because it has some more problems than * and google-chrome\n", "that i gave to every link in the set of links home about us products contact and it seems that * is making that 1px margin much bigger than * or google-chrome and distorting it\n", "but i haven t yet figured out whether it s me writing sloppy code with * perhaps being more forgiving than * or if it s * or if it s jquery\n", "so to specify * greater than 20 * greater than 9.1 and ie greater than 9\n", "* is just better for web development and i prefer * overall\n", "it seems that ie and * are less strict than *\n", "in particular a font may be rendered quite differently between the various browsers and operating systems in current use - * and macos use more anti-alisaing than * or ie but ie9 has a new feature called cleartype which also affects font rendering\n", "i saw that the discrepancy was because in * the text element is taller than in * and includes a slight amount of whitespace on top that doesn t show up in * in * the top of the text element is exactly when the text starts\n", "in * we found that the dom level 0 took twice the time off the dom level 2 but was still four times faster than either * case\n", "it seems that google-chrome internet explorer or * are more strict than * on terms of security\n", "in * it is several pixels higher up than in * and google-chrome and significantly lower in opera\n", "font looks sharp in google-chrome * ie8 not as good as other 2 but less fuzzy than *\n", "google-chrome or * on a mac could be much faster than * on a pc especially with newer apis\n"], "operation": ["so we must show that a gradeschool * circuit is o log n times deeper than an * circuit\n", "however * is a more complex operation than * or shifting\n", "we don t actually * it s slower than simple * and as you can see we destroy temporary register t0 but don t touch s0 s1\n", "if * is slower than * then case 2 is slightly slower than case 1\n", "so the compiler can t make the optimization because it can t tell if you wanted the exact behavior where * is better or the implemented behavior where the scale of sum affects the result of the *\n", "the boilerplate code would * rapidly when the express get more complex than * of two terms\n", "you can try x1 c1 and then x1 + c1 but i don t think the * is much faster than * on todays cpus\n", "*ition * assignment has lower procedure than simply * operation\n", "*ition and * is worse as these have to be done in sequence of two operations and the second operation requires the first to have completed - this is not the case if the compiler is just producing two * operations on independent data\n", "adding and * logarithms of factorials then taking the exponential at the end is more reliable than * and dividing factorials directly\n", "similarly if you skip the five first elements your loop takes o n-5 time but that too is the same as o n because adding or * a constant is even weaker than * by a constant\n", "the logic is * by 2 whole number 0.1 2 0.2 and if it s bigger than 1 * and continue\n", "p is sometimes chosen to be 31 because not only is it prime but a compiler resolves it to a bitshift and a * which is much faster than a *\n", "* first field from the other and if the value is not greater than 0 * by -1\n", "* is faster than *\n", "programmers like to use this property to speed up programs because it s easy to chop off some number of bits but performing a * is much harder it s about as hard as doing a *\n", "is the same as because * has higher priority than *\n", "so in simple terms this should give you a feel for why * and hence * is slower computers still have to do long * in the same stepwise fashion tha you did in grade school\n", "using an extra variable to avoid the costly * and the resulting time was 18.9s so significantly better than the * with a statically known constant\n", "* is more mathematical if you like while the remainder in the c-family is consistent with the common integer * satisfying and this is adopted from old fortran\n", "since bit wise operations can be done very fast and * operations are relatively slow this type of * is much faster than doing a *\n", "python respects this definition whereas in most other programming language the * is really more like a reaminder after * operator\n", "a side effect of many * routines is the * - so in few cases should * actually be faster than *\n", "if you compute * a power of two using bitwise and is simpler and generally faster than performing *\n", "inverse * for 300 time take 1.422 seconde more than executing * sub and multiplication 10k time even the core of inverse * is build with same * and sub and multiplication functions and for this number it just do 150 time inside while help plz why\n", "* gives you a remainder which is why it s better than straight * in situations where you re number of elements can change\n", "the official tutorial on bitwise and * operators has more information about other related operators and * left shift right shift\n", "it ends up in a state of confusion...you basically cannot release the * of the table it keeps getting bigger and smaller as you * your mouse - but you can never let go and release it to get the size you want\n", "i reimplemented the mouse * press and release events for the inner widget in order to be able to * it inside its bigger parent with * drop\n", "i got a *gable object done with jquery ui and when i * it it s way slower than i * my mouse\n", "this is easy to implement with buttons select items click up or down buttons to * - just loop through and apply the * to each selected item but much more difficult with * reordering\n", "if * result is larger than 1 push the current transformer to the results array and * the current wattage from the total wattage\n", "matrix * is the easier one there are several matrix implementations with a * method in packages org.apache.spark.mllib.linalg and org.apache.spark.mllib.linalg.distributed\n", "* is the easier of the tasks just remember to * each block of one number with the other and carry the zeros\n", "* is slightly harder just * two scaled numbers and then divide by your scale factor\n", "* is slightly more complex as it needs an integer * followed by a scale back such as 0.72 2 becomes 72 200 becomes 14400 becomes 144 scaleback becomes 1.44\n", "if i make a mistake and * a number by 1.0 instead of 1 and i do not use any compiler optimization then my * will last much longer than * a number by 1\n", "implementing * is easier if you remember an shl operation performs the same operation as * the specified operand by two\n", "mathematically left shifting is the same as * a number by a power of 2 but as the operation is done only by shifting it is much faster than doing *\n", "* first is probably simpler than using floating point if you only want an integer result and if you know that the * will never overflow\n", "i need some help though i need each number in that list to be * from 27 then if the result is less than 33 * 94 then print the numbers as they were just with that sum completed how do i do this\n", "just take the difference and if it s negative * 2pi and then if it s greater than 2pi * 2pi\n", "provided a string i want to convert the chars from the string to an int * a value from another method getkey to this number and if the result is greater than 26 * 26\n", "to find all the pairs of integers x and y that sum to n when cubed set x to the largest integer less than the cube root of n set y to 0 then repeatedly * 1 to y if the sum of the cubes is less than n * 1 from x if the sum of the cubes is greater than n and output the pair otherwise stopping when x and y cross\n", "look at it this way based on your logic while x is greater than 100 * 5 while it s greater than 500 * 5 .\n", "we observe that for 7 nodes 1 2 3 5 6 8 9 we are getting further by 1 * 7 9-2 to the score for other 2 4 7 we are getting closer by 1 * 2\n", "sure that s probably compiled or jit d away but you should avoid * in performance critical code it s far slower than *\n", "but determining the digit and the carry by * is much more concise and for the larger factors also much more efficient when * a digit by 100 the result is on average 450 requiring 45 subtractions but two *s are sufficient for all factors\n", "i read about python following pemdas that is precedence of * is more than *\n", "while working with integer * it s better to * first and divide later to minimize the rounding error\n", "i presume that you know that using a * is a lot slower than * by decimal number 5 is always slower than 0.2\n", "note that i ve incorporated dshin s comment that * is faster than * however the performance improvement is about 90 removing the binary search 10 multiplication vs\n", "* of quaternion a by quaternion b is nothing more than * a by the multiplicative inverse of b\n", "perhaps it s the case that * is much more accurate than reciprocal plus *\n", "but in normal case it takes n 2 comparison so you half the height of tree but you * each merge with two so total running time is not better than * to 2 part\n", "these can be compared to * by 2 x left-shift or divinding by 2 x right-shift but it should be noted that a binary shift is much faster than a * operation\n", "according to agner s instruction tables a single fp * is slower than a single reciprocal op and a single * op\n", "more generally you can always just try * the base by itself a number of times no greater than the * and you are bound to find a cycle\n", "also integer * is less expensive so you may just do the divide first and calculate the * 10\n", "in general * is more costlier than * right\n", "in t-sql unary minus is made to be the same priority as * which is lower than *\n", "as in title why is * much faster than * in this example\n", "the addition and * are much more than * and division\n", "* operations and usually significantly faster than * and division\n", "addition * for the rectangular bound calculation is cheaper than *\n", "since * has a higher precedence than * you should subtract 0 to your digit character before multiplying it\n", "for floating point operations addition and * are harder than * and division so they may be slower or not again it depends on how much transistor real estate there is dedicated to the fpu\n", "this * operator occurs within the second brackets and so has a higher precedence than the *\n", "* is slower than *\n", "in * for doing powers of two bitshifting is usually a little clearer than doing * though choose whatever works for you\n", "since fp * shifts the smaller operand s mantissa until both operands have the same * you can add a certain magic number to force it\n", "the private * is always smaller than the * so you should be able to encrypt it using the raw rsa operation if you make sure to remove the prepended zero\n", "i must also add that designing the rsa key so that the private * is substantially shorter than the * to speed up operations is a security risk if the * is smaller than 29 of the * length then the key can be cracked\n", "so no choice of the public * for this * is better than 19 using the public * to decrypt will work for at least half of the messages when e\u00e2\u00b2 9 16 and in many cases for almost all the messages when e\u00e2\u00b2 1 16\n", "little wonder you get errors the * is normally shorter than the * which is always the same size as the key size\n", "the rsa private * may actually be shorter than the *\n", "edit as gregs points out in the comments you cannot be sure that the private * of the key you want to encrypt is smaller than the * of the key you want to use to encrypt with\n", "in rsa signing a message m means *iation with the private * d the result r is the smallest integer 0 and smaller than the * n so that\n", "1024 bit private * large number lower than the *\n", "when i generate rsa key pairs by openssl it seems like private key private * is always less than public key *\n", "the private * must not be longer than the *\n", "using the pow function and passing a * value is faster than computing the full * and then taking the * because the * can be applied to the partial products at each stage of the calculation which stops the value from getting too large 10 6 to the power of 10 6 has 6 million decimal digits with a * applied at each step the values never have to grow larger than the size of the * - about 13 digits in this example\n", "if the * is truly faster than the * then i expect somebody well-versed in byte code could explain why the load_fast for num is faster than the five operations for line 12\n", "and the value of this expression evaluated according to the precedence rules is 62 because * has higher precedence than *\n", "you probably already remember that * is higher precedence than *\n", "* is much harder than *\n", "* is a relatively complex operation and is likely to be slower than say * or comparison\n", "for integers * is harder than * may be slower than * etc but may still be very fast as long as there is sufficient cpu-power dedicated to it\n", "just because * has a higher precedence than * doesn t mean we need to perform all * in the expression before doing any *\n", "an expression like binds as not because of associativity but because 2 * has higher precedence that + 2 *\n", "it used to be that * was slower than * and programers used several tricks to avoid * but with haswell it seems that it s the other way around\n", "but that s not the case here since division and * have higher precedence than * and there are no parentheses involved\n", "* is cheaper than *\n", "isinstance g str and g.lower or g * is of higher precedence than *\n", "and has higher precedence than or so the brackets are optional - in the same way as * has higher precedence than * so\n", "though i was thinking the * is more simple than *\n", "of course * has higher precedence binds more tightly than *\n", "either way your example with the numeric expression would multiplying by 3 first because * has higher precedence than * or subtraction\n", "in any case if * is faster than * a better solution might be to use a table and index by it\n", "this is valid under normal arithmetic operator precedence rules because * has higher precedence than * +\n", "well we know it is the first one because of precedence - the binary * operator has higher precedence than the binary + * operator and is resolved first\n", "usually * has a higher precedence than * but the grammar you have posted has the reverse that might be part of your problem\n", "each operation takes a specific length and typically * will take more than *\n", "as * of ints has more overhead than simple *\n", "why with this grammar * have higher precedence than *\n", "since parentheses were used around the * but not the * we can infer that probably in this language * has lower precedence than *\n", "also * is faster than * and * is faster than division\n", "for example 1 + 2 3 is treated as 1 + 2 3 whereas 1 2 + 3 is treated as 1 2 + 3 since * has a higher precedence than *\n", "other cpus take three or four cycles to do a * which is a bit slower than *\n", "because * is faster than * and can be faster than shift\n", "* is not more difficult than repeated *\n", "on modern processors floating point * is generally slightly more expensive than * which is one reason why compilers will typically replace by x+x\n", "the * has higher precedence and therefore binds more tightly than *\n", "and has higher precedence than or just like * has higher precedence than *\n", "that is if you have then you are guaranteed that a happens before b and that b happens before c regardless of the fact that a is involved in an * which is lower precedence than a *\n", "the and operator has higher precedence than or just like * has higher precedence than *\n", "the reason for this is that and is strong than or it s like in math where * is stronger than * 3 5+3 15+3 18\n", "* is generally slower than *\n", "since * is more expensive than * you want to let the machine paralleliz it as much as possible so saving your stalls for the * means you spend less time waiting in the * loop than you would in the * loop\n", "trig functions should have precedence lower than * and higher than *\n", "for example 1 + 2 3 is treated as 1 + 2 3 whereas 1 2 + 3 is treated as 1 2 + 3 since * has a higher precedence than * +\n", "it s because * has higher precedence than *\n", "the same speed as * though still faster than *\n", "proposition when implemented in logic gates using the usual algorithms an integer * circuit is o log n times slower than an * circuit where n is the number of bits in a word\n", "for example since * has a higher precedence than * is read as not\n", "you expression is then 7 + 5 7 + 5 which is 7 + 35 + 5 as * has a higher precedence than *\n", "since * has a higher precedence than * the same convention is used\n", "the precedence relationship is the same * is higher then *\n", "just like it would be possible to come up with arithmetic expressions that could be written with less parentheses if * had a higher precedence than *\n", "i used instead of to convert the string to a number since * is usually a little faster than * and it s the more common way of performing that action see to force a string to be converted to a number add zero to that string\n", "* is more expensive than * subtraction and division is more expensive still\n", "division * has higher precedence than * subtraction and parentheses is required to do * subtraction before * division\n", "since * has more priority than * when you give a+1 to the macro it becomes 10 + 10 + 1 21\n", "based on the order of operations e.g where * is evaluated with higher priority than * push the operators and operands onto a stack\n", "i know that * operation is more trivial than * operation\n", "for example in the expression 1 + 5 3 the answer is 16 and not 18 because the * operator has a higher precedence than the * + operator\n", "on simple low-cost processors typically bitwise operations are substantially faster than division several times faster than * and sometimes significantly faster than *\n", "so in your case an expression like 3+2 5 would yield 25 instead of 13 because * is of higher precedence than *\n", "it is because * operator has higher precedence over the * + operator\n", "even if * is faster than * i think that you will lose more because of the branching\n", "it is well-known that the processor instruction for * takes several times more time than * division is even worse upd which is not true any more see below\n", "of course it is 10 because the * operator has a lower precedence than the * operator and so 4 + 3 2 always means 4 + 3 2\n", "in arithmetic books and computer software and more-expensive calculators this means 12+ 34 56 not 12+34 56 because * has higher precedence than *\n", "start with the number you want to reach and if it s divisible by 5 then divide by 5 because * by 5 results in a shorter solution than * by 3\n", "* has higher precedence than * + which is why 2+3 4 is interpreted as 2+ 3 4 both in c and normal math\n", "for example * is of higher precedence than * so 2 + 3 x 4 is equivalent to 2 + 3 x 4 not 2 + 3 x 4\n", "i don t understand why the division * in c++ is so much slower than * subtraction where the managed c# version is more reasonable to my expectations\n", "they state that the binary * operator has higher priority than the binary * operator +\n", "in arithmetic * has higher precedence than *\n", "* is more complex and you can reference the solution in the question efficient 128-bit * using carry flag\n", "* has higher precedence than * subtraction\n", "remember that * even with strings binds tighter than * so we must use brackets\n", "precedence rules specify priority of operators which operators will be evaluated first * has higher precedence than * pemdas\n", "if we look at the speed of operations * is not drastically slower than *\n", "this line works because of operator precedence * has a higher precedence than * + so it will be done first\n", "division and * have higher precedence than * so what this is actually doing is\n", "instead of computing the slower it instead computed x + x because * is faster than *\n", "associativity and precedence specify that the last two statements must be performed in that order since * has higher precedence than *\n", "if memory serves this is the same technique slide rules used although they also took advantage of with the idea being that * is easier than * but my exposure to slide rules is limited to an eccentric high school physics teacher and a cryptographic teacher using it to explain certain tricks with big number math\n", "* has a higher operator precedence than * so it s done before the two *s when calculating the value for a\n", "also remember * is much more expensive than *\n", "i would also be moderately surprised if the * actually was faster than the *\n", "that s akin to * has higher precedence than * so 3 sticks to 4 instead of 5 so the output is 17\n", "that s because the * oprator has higher precedence than *\n", "because * has a higher precedence than *\n", "not sure about this but * should take more time than * so it s slowing it down ex\n", "this is similar to operator precedence in mathematics where for example * has a higher priority than *\n", "so ideally i want to have approximate relative times of elementary operations execution like * typically takes 5 times more time than * exponent is about 100 *\n", "if * is slower than * instead of doing\n", "the * are the bottleneck of the calculation even though they may be one instruction a * takes longer than an *\n", "* has a higher precedence than * so it is evaluated first\n", "mathematics clearly defines the order of operations as giving * higher precedence than *\n", "which doesn t do what you want because * has higher precedence than *\n", "but i guess * is more computationally expensive than *\n", "for instance in arithmetic * has higher precedence than *\n", "yes pow is slower than * * is slower than *\n", "in technical terms the x * operator has higher precedence than the + * operator\n", "or has a lower precedence than just as * in mathematics has a lower precedence than *\n", "clearly ruby considers the * operator to be of a higher precedence than the * + operator\n", "m_expr can expand to a u_expr because unaries bind tighter than * operations and a_expr can expand to a m_expr because * operations bind tighter than * operations\n", "i assume that is parsed correctly because the two operators have different precedences meaning that associativity does not come into play and that your grammar correctly implements precedence although you should note that is a more standard example for showing that * has higher precedence than * since simple left-to-right parsing of gives the same result as your parser\n", "but in many cases * is faster than *\n", "* has higher operator priority than * in java\n", "* is nearly always a lot slower than *\n", "and as you hopefully knows * have higher precedence than * so the expression is equivalent to probably not what was intended by the macro writer\n", "my question is why do both integer and floating-point * execute faster than their * counterparts\n", "* is higher precedence than * and * is left-associative so this is equivalent to but knowing that only tells you that the first * will happen before the second * and that the * will happen before the second *\n", "if you think back to grade school you ll recall that * was harder than * and division was harder than *\n", "so every multiplicative-expression is an additive-expression but not vice-versa and this is what makes * bind tighter than *\n", "the difference is that in the second pattern the concatenation x followed by y in xy has higher precedence than the choice either x or y in x|y like * has higher precedence than * so the pattern is equivalent to\n", "i know the basics division and * higher than * and subtraction but i would have to look up something more esoteric\n", "for example if you had a class in which it would make sense to do * before * how could you make the * operator have higher precedence than the * one\n", "in the remote case those operations are not simplified assuming that there is a jit that maps the * and add opcodes in a 1 1 relationship to their cpu instruction counterparts in most modern architectures all integer arithmetic operations usually take the same number of cycles so it will be faster multiplying once than add four times just checked it * is still slightly faster than * 1 clock vs 3 clocks so it still pays using a * here\n", "for * the technique described at is a reasonably easy thing to implement and is better than serial *\n", "at the time this was faster because * was a lot faster than * but that s no longer the case\n", "note that the type cast has a higher precedence than * which is in turn higher than * 3 vs\n", "the * has a higher operator precedence than the * operator therefore it will happen before the *\n", "then you can process any length number using very few division remainder * operations which is important because they are much slower than *\n", "because the string formatting operator shares precedence with the remainder or * which binds more tightly than the + * operator\n", "the * has a higher precedence than *\n", "and keep in mind that the * has a higher precedence than * and subtraction\n", "note parentheses are redundant as division and multiplication have the same priority and * has higher precedence over *\n", "the * is much cheaper than other operations like * and division and array access\n", "the result of the * was better than the * the by 0.0070000 milliseconds over the course of 2 million or 200 000 iterations\n", "* can also cause a divide-by-zero and it has a higher precedence than *\n", "multiplication division and * have the same precedence and they all have higher precedence than * and subtraction\n", "division and * are indeed costly hardware operations whatever you do this is more related to hardware architecture than to languages or compilers perhaps ten times slower than *\n", "is the * really weaker than the *\n", "integer multiplication division and * are much slower than integer * and subtraction\n", "on a cpu with a fast multiplier * may only be on the order of 4 times slower than * but on normal hardware it s 16-32 times slower for a 32 bit operation\n", "can someone explain this behaviour * operator has higher precedence than * operator\n", "functionally a * will always take more time than an * because it combines a true * along with a true *ition step\n", "* is faster than mul but if you want to * two general values mul is far faster than any loop iterating * operations\n", "with extra braces because * has a higher precedence than * - assuming these are both percentage discounts\n", "where * binds more tightly than *\n", "then i think it would be the problem of precedence in most case they are left-to-right and i think * would be calculated first because in c * is more prior than * instruction by one level\n", "its the * that historically was slower than the *\n", "in the above example the instance of exprbinop* is a child of the instance of exprbinopmul although precedence of * is higher than precedence of * which results from the proper consideration of the parentheses\n", "i would like to * the pow in my evaluator with an higher precedence than * and divide\n", "* sub are cheaper than * better throughput and lower latency\n", "the * operation uses more clock cycles than the * on many processors\n", "as of a few years ago * was 3x slower than *\n", "for example fp * throughput is lower than fma or * on intel before skylake 1 vector per clock instead of 2\n", "* is still somewhat more expensive than * on modern computers and compilers go to some effort to replace them with one or two shifts+* instructions\n", "* and divide have higher precedence than * and subtract\n", "however * is faster than *ing even though less clock cycles are used to * verses * according to what my particular cpu s datasheet says about the instructions being used\n", "to give * and divide higher precedence than * and subtract you can do something like this example adapted from john levine lex yacc 2 e 1992\n", "moreover i would like to * the pow in my evaluator with an higher precedence than * and divide\n", "you can * higher and lower resolutions by * or dividing them by 2\n", "note that is equivalent to i 10 but much faster since * is around 10 times slower than *\n", "it appears that you consider * to have lower precedence than * and division when in fact it does not\n", "the reason is that the * is slower than *\n", "as i said this may increase the speed especially in an environment where * is more expensive than simple * but you would want to actually benchmark it to be certain\n", "the conditional test and * is typically less expensive than a * especially if the sum does not frequently exceed mod\n", "as you can see * is about an order of magnitude slower than *\n", "that is essentially the one case in which repeated * 0 or 1 times a special case of repeated * can be and commonly is but not necessarily faster than division-based *\n", "with regard to implementation it also takes advantage of a bit of a non-obvious property of r precedence rules actually this is true of other languages as well such as c c++ and java namely that unary negative is higher than * which is higher than binary * thus the calculation for is equivalent to\n", "i read in couple of blogs that in java * reminder operator is slower than *\n", "this is because * operator has higher preference than the * operator - in the first example you use are not using brackets therefore * takes place first you can change your code to\n", "i don t think they have a natural precedence unlike say multiplication and * being of greater precedence than * and addition because they can be built from * and addition\n", "without parentheses math.exp c b is executed first as * has higher precedence than * -\n", "in this case * has higher precedence than * parenthesis around the * or not\n", "because the * operator has higher precedence than *\n", "doesn t get evaluated the way you are expecting the * operator has higher precedence than the * operator\n", "it may not be the most elegant method but when you just need to convert something ad-hoc thinking of it as comparison and * may be easier than *\n", "this is called a strength reduction optimization because * is stronger slower more expensive than *\n", "that s because the * operator has a higher precedence than the * operator -\n", "in this since * has greater precedence than * therefore x 10 will execute first and here we are dividing two int irrespective of the fact that the variable where final answer is stored is a double so answer will be an int i.e 5 10 0 and then * of an int and double will be done here int will be promoted to a double\n", "the * operation binds tighter than i.e is evaluated ahead of the * so you are taking a square root of a negative number\n", "i am a bit suspicious of the performance because modulo tends to use * which is slower than your * operations\n", "* has higher precedence than * so in the first two examples only the second number is being divided\n", "* is similar using * of the base type and borrow instead of carry multiplication can be done with repeated additions very slow or cross-products faster and * is trickier but can be done by shifting and * of the numbers involved the long * you would have learned as a kid\n", "this is called a strength reduction operation because * is a weaker and cheaper operation than *\n", "this platform is probably not representative of your microcontroller but the test shows that on this platform the * is considerably slower than the *\n", "* has higher precedence than *\n", "remember multiplication * and remainder operators are all higher precedence than *\n", "hardware integer * is always slower than * and the gap in the relative latencies of these instructions continues to widen\n", "in the code we calculate 1.0 sum .. because a * usually is more expensive than a * and thus can gain some efficiency with that\n", "knowing that a * is much more costly than a *\n", "recently someone suggested to me that * is always more expensive than *\n", "integer * is much faster than *\n", "* is faster * is more accurate\n", "however in general one could expect that a * is a more expensive operation than a *\n", "on most processors * is slower than * for the same data types\n", "or is there something about * that is more convenient than * in programming\n", "* may be heavier than * but a commenter pointed out that reciprocals are just as fast as * on modern cpus in which case this isn t correct for your case so if you do have 1 x appearing somewhere inside a loop and more than once you can assist by caching the result inside the loop and then using y\n", "in fact if the intent is to divide by 22 10 or some other real value that isn t necessarily exactly representable in binary floating-point then half the times the * is more accurate than the * because it happens by coincidence that the relative error for 1 x is less than the relative error for x\n", "both operations are done down at the floating point unit fpu level and even in the world of integral alus the * circuit is a far busier place than a * circuit\n", "if the numbers are huge dividing x by b might be better\u00e2 * is usually slower than * but getting out of the huge-number domain early might help more than avoiding *\n", "can be fast or it can be awfully slow even if * is done entirely in hardware if it is done using a div instruction this instruction is about 3 to 4 times slower than a * on modern cpus\n", "* takes a lot longer than * - just do it with pen and paper to see\n", "since * is of higher precedence than *\n", "here s one idea which uses one * and one shift so it ll be faster than a * on most systems\n", "in all other cases * appears to be several times slower than *\n", "it is common knowledge that * takes many more clock cycles to compute than *\n", "i am pretty sure it is not possible to compute polynomial * more efficient than * and as you can see in the following table this algorithm is only 3 times slower than a single *\n", "according to stephen canon modern implementations favor taylor expansion over rational function approximation where * is much slower than *\n", "is * more expensive than * in c++\n", "* is always much more expensive than *\n", "i was always taught that * is slower than * but i have no real proof of this\u00e2 has anyone got an opinion on this before i start benchmarking and running test\n", "* is slower than * due to some reasons\n", "the cpu operation for float * is much more complicated than *\n", "removing * operations by passing through the inverse into the shader is another useful tip as * is typically slower than *\n", "if the latter yes floating point * is generally faster than *\n", "the reason for doing so is to reduce hardware cost as * is more expensive than *\n", "i would also suggest to replace terms like a l1 0.3e1 with as * is faster then *\n", "this solution has the disadvantage that if the other factor is not constant the compiler and you can t reasonably avoid the * int_max n to be done at runtime and * is normally more expensive than *\n", "the double_unit stuff is how random actually does it internally because * is faster than * see floating point * vs floating point *\n", "but the research i ve done so far all points to * being faster than *\n", "* is much more expensive than *\n", "* is about 10 times slower than *\n", "* by 5.0 is more accurate than * by an approximate 0.2\n", "* is one of a number of operations which as far as computational complexity theory is concerned are no more expensive than *\n", "t is not very important as long as alpha is small otherwise you will run into some rather weird nyquist issues aliasing etc. and if you are working on a processor where * is cheaper than * or fixed-point issues are important precalculate omega\n", "if * are o n 2 this is slower than long * for large numbers o n 2 vs o n 2 log n\n", "following advise i received * is cheaper than * i revised one code line and interestingly enough 71.2 dropped to 1.7 but the if statement just below shot up to 64.8 \u00e2 i just don t get it\n", "floating point * usually takes fewer cycles than floating point *\n", "i always thought a * is computationally cheaper than a *\n", "why does * take so much longer than *\n", "does * has higher precedence over * or it is other way round\n", "if a remains the same and b is changing say if your code is in a loop and it s clear that a does not change between two iterations for instance because it s a const variable then the original version can execute faster because * is cheaper than * assuming the compiler moves the computation of 1 .\n", "you always need to know the magic number here 0xaaaaaaab and the correct operations after the * shifts and or additions in most cases and both is different depending on the number you want to divide by and both take too much cpu time to calculate them on the fly that would be slower than hardware *\n", "* takes less time then * so you can try this\n", "iirc floating-point * is much less expensive than * so this might be faster than both\n", "both works but * is generally slower than *\n", "the intuition is that * is a more costly affair than *\n", "i read that * has has higher presedence than *\n", "i have heard * takes more time then * but beyond that i could not determine whether writing this in one line or multiple assignment lines was more efficient\n", "* is usually faster than *\n", "* is slower than * is generally - and definitely using regular expression matching is going to be slower than * is..\n", "in many processors integer * is vastly faster than integer *\n", "for * things are a little more complicated than * see\n", "but since * is pretty expensive i think that this is even worse than 2 *\n", "* though is an iterative process in logic the implementations you see on educational sites verilog vhdl are simply doing the same thing we did with log * in grade school but like * it is much simpler than grade school you pull down bits from the numerator in the long * until the number being checked against the denominator is equal to or larger basically the number can either go in only zero times or one times into the next number under test unlike decimal where it can be between 0 to 9 times\n", "the tostring should be slower than parse since * is generally slower than *\n", "* is much faster than *\n", "since you re resizing the window make sure to assign the w and h values not as numbers but as products or dynamic numbers * is faster than * but you can also use *\n", "as a rule of thumb * is faster than * on all cpus\n", "i found out that integer * is much slower than * unfortunately\n", "* is usually significantly faster than *\n", "the * should perform somewhat better than *\n", "easiest way is to simply recognize that * is nothing more than the * of the dividend y and the inverse of the divisor x\n", "as to why * is faster than * and when the divisor is fixed this is a faster route\n", "* is less expensive than * so\n", "on modern processors float * is a good order of magnitude slower than float * when measured by reciprocal throughput\n", "it s just as fast as going the opposite direction if not faster given that * generally takes longer than *\n", "* is far easier and faster for a cpu to do than *\n", "which one is faster is indeed a cpu-specific issue or at least how much faster is cpu specific yes * is typically seen as slower than *\n", "in some of the academic literature implied * is interpreted as having higher precedence than *\n", "similar to pmg s solution but still faster because * is faster than * -\n", "i picked c 1 1 8 for this example simply because it is exact in ieee-754 floating-point representation and typically * is much faster than *\n", "* is per se slower than * however i don t know the details\n", "in usual programming practice one wouldn t bother and simply multiplying by the floating-point representation of 180 \u00ef because * is so much faster than *\n", "* has worse latency than * or addition by a factor of 2 to 4 on modern x86 cpus and worse throughput by a factor of 6 to 40\n", "it has to do with the fact that * is itself done by means of binary shifts and additions - far fewer than with *\n", "i used * for both operations because * is typically faster than *\n", "on some machines * is much slower than * but on most machines j multiplies and j divides will run a lot faster than 2 n-2 * and one *\n", "yes * is usually much slower than *\n", "i wonder why everybody missed that * is much faster than *\n", "most optimizing c compilers optimize it out to a * operation which is much faster than * it can be done only if the divisor is constant though\n", "floating point * is faster than * so if speed is relevant\n", "* is more expensive than *\n", "it is well known that integer * is slow operation typically several times slower than integer *\n", "on many machines particularly those without hardware support for * * is a slower operation than * so this approach can yield a considerable speedup\n", "formally it means * cannot have a complexity worse than *\n", "* is faster than * see fog s tables\n", "i do not want to know when or if to use shift operators in my code i am interested in why * is faster than shifting bits to the left whereas * is not\n", "* is about 20 faster than *\n", "i haven t benchmarked any of this code but just by examining the code you can see that using integers * by 2 is shorter than * by 2\n", "change the half to 0.5 and you should be golden for the math part also * is faster so use it instead of * when possible\n", "is it possible that the * is six times slower than * and\n", "also addition is faster than * and * is faster than *\n", "according to this author integer * can be 40 times faster than integer *\n", "from the performance side float * is faster than * but i don t think that in the gui code it can create significant difference\n", "in a 64 bit application this code will be a lot faster than in a 32 bit application in a 32 bit application multiplying two 64 bit numbers take 3 * and 3 additions on 32 bit values - however it might be still faster than a * on a 32 bit machine\n", "it will be much slower i don t have benchmarks but i would guess at least an order of magnitude maybe more decimal will not benefit from any hardware acceleration and arithmetic on it will require relatively expensive * * by powers of 10 which is far more expensive than * and dividion by powers of 2 to match the exponent before addition subtraction and to bring the exponent back into range after * *\n", "from what i read on the net * is usually easier to compute than *\n", "so * is always a bit worse than *\n", "integer * is about an order of magnitude slower than * on current cpus.\n", "but i wonder why is * actually slower than *\n", "first of all * is faster than *\n", "* is faster for unint8 than * in your case\n", "if you think back to grade school you ll recall that * was harder than addition and * was harder than *\n", "* algorithms are slower than * algorithms in most cases\n", "the compiler or the jit is likely to convert the first case to the second anyway since * is typically faster than *\n", "this can be a major clock-cycle saver since * is often much faster than a * operation\n", "and * may be slower than * or may still be fast\n", "therefore i conclude that * is faster than *\n", "even simpler and probably even faster because * is faster than * is dav s answer which is the most natural algorithm.\n", "the reason to do this is because even though there is an integer * instruction div idiv in the instruction set it s typically very slow several times slower than *\n", "* is inherently a much slower operation than *\n", "for the *-to-* case you are assuming that * is faster than *\n", "if you are sure that a floating point * is better than a floating point * then\n", "because * is often much slower than * if performance is critical you might keep a table with powers of ten and their reciprocals\n", "usually * is a lot more expensive than * but a smart compiler will often convert * by a compile-time constant to a * anyway\n", "on many processors integer * is faster than integer *\n", "* is a lot more expensive than *\n", "thus python should interpret this like 12 2 i.e 6 since precedence of * is more than *\n", "* and square roots for huge number of bits are not much more complex than *\n", "your friend has a point a * actual * not just writing in c is slower than a *\n", "* is generally on the order of 10x slower than * on most processor families\n", "as hroptatyr mentioned the * is quite fast and it s much faster than *\n", "this because 1 x is simpler than y x and * is faster than *\n", "well if it is a single calculation you wil hardly notice any difference but if you talk about millions of transaction then definitely * is costlier than *\n", "* is faster than * so the second method is faster\n", "if you continue to use your method of performing this task then you need to manually check if the * of the two lower order decimal digits has caused a carry by checking if the result of the * is greater than 10 and if it is * 10 from the number and then add 1 to the higher order digit calculation\n", "it s possible though that software could mess things up by making * slower than * - but that s unlikely\n", "the * case is going to require a little more work than * in this code\n", "but i d think bignum * is a little slower than bignum *\n", "a111 * is equal or better than *\n", "this is a hold over from older compilers and interpreters on old chip architecture that would do * slightly slower than *\n", "the only way it would be broken up differently would be if * had a higher precedence than * like multiplication does\n", "here it is conceivable that * is slower than *\n", "i was thinking that there could be an issue if the result from the * is bigger than what 15 bits can represent 32767 or if i get a negative number in the *\n", "multiplication and * operators have higher precedence than * and subtraction in c++ same as in scientific notation\n", "* has a higher precedence than * ergo\n", "* has a higher precedence than * or subtraction so it s really this\n", "for example an * is typically much faster than a *\n", "if you are doing physical simulations things like * or square roots are going to be way more expensive than *\n", "this happens because the * operator has higher precedence than the + * operator\n", "knuth writes that fibonacci search is preferable on some computers because it involves only * and subtraction not * by 2. but almost all computers use binary arithmetic in which * by 2 is simpler than * and subtraction\n", "i remember it says something like * takes much much more time than *\n", "generally the * is more costly than * i think but not much difference in this case\n", "best example the * it an an * are both o 1 but usually the * takes far more cycles time to execute than the *\n", "multiplication and * have a higher precedence than * and subtraction\n", "the * operator has a higher precedence than the * operator + so you need to enclose the sum with brackets before dividing\n", "to start with i need multiplication and * to take higher precedence than * and subtraction\n", "the * operator has a higher order precedence as the * operator\n", "* is performed by repeated subtraction therefore needs more level of subtract logic making * slower than *\n", "for example on most 32 bit systems 64-bit * is faster than 32-bit * modulo\n", "it could be done via * which is much slower than * or it could be translated into a bitwise and operation as well and end up being just as fast as the version\n", "2.the * by 2 can be done by bit - shift operation is it really slower than *\n", "the * operator has a higher precendence than the * operator so your function is calculating 1 1 + e -x\n", "and * has larger complexity than *\n", "the * and subtraction is okay because the types of a and b force them to be performed using floating point arithmetic - but because * binds more tightly than * and subtraction it s like using the brackets above only the immediate operands are considered\n", "note that * has a higher precedence than *\n", "since * has a higher precedence than * 5 2 gets evaluated as a integer * returning 2 as an integer\n", "the term is apparently not an exact measurement as it is clear that a double-precision floating-point operation is going to take longer than a single-precision one and multiplication and * are going to take longer than * and subtraction\n", "in * to that the crossing off may be less work than a * don t know about python it is for c arrays\n", "i need to find out that how much * operation is faster than * operation in a gpu\n", "so if your code has tough data dependency problems * is about 12 times faster than *\n", "the * has higher precedence than the * so what you re calculating is sumaverage1+ sumaverage2 5 which is integer * which is probably not what you want\n", "so even disregarding that * is more expensive than * and multiplication we see that the number of operations the sieve requires is much smaller than the number of operations required by trial * if the limit is not too small\n", "performing * on this slightly larger type will pretty much always be faster than doing * or modulo on the type itself\n", "the first difference is that * is much more expensive than *\n", "it is true that * and modulo a * operation is slower than *\n", "as far as i know the * is more complex and slower than other operations like * so is my code incorrect then\n", "multiplication and * are higher precedence than * so they get done first - before the implicit conversion to string for concatenation\n", "an * is faster than a * and a multiplication\n", "finally we all know that multiplication and * have higher precedence than * and subtraction so we can remove the extraneous parentheses so this turns into\n", "with careful optimization however you can make * 61 times faster than *\n", "multiplication and * have higher priority than * and subtraction\n", "note that the * operator has a higher precedence than * and division just like in mathematics\n", "* is even easier as you dont have to line up the decimal points you just do the math on the significant digits and simply add the *\n", "as int * gets larger taking powers might be faster than *\n", "however with really very small parameter 2 in your case * is faster than *\n", "this is analogous to the way you can compute * using successive squaring much faster than by repeated *\n", "the misunderstanding is that incrementing the * is not faster than doing a *\n", "however naive * will get slower and slower as the * increases\n", "btw a * search done with removing i is much faster than a * search\n", "this tiny overhead on add is vastly outweighed by the savings on lookups since all programmers should know and understand that * compares are vastly slower than * especially with unicode - the cpu can t just do a block compare of data but must check each pair of characters specially even using a table look-up this is vastly slower\n"], "protocol": ["you can also use * it is a lot simpler than *\n", "* is more of a handshake done with the server while * is the actual stream coming in once the handshake is done and you start streaming\n", "what happen when * is disabled in an router and when packet size greater than * how the router fragments that packet\n", "any device in the path of communication between the sender and receiver whose * is smaller than the packet will drop such packets and reply the sender with * destination unreachable datagram too big message containing the device s *\n", "in short as an authentication protocol * is far more secure out of the box is de-centralized and will put less load on your directory authentication servers than * will\n", "one might want to define * access to more than one * server\n", "* is more pythonic than * or shudder soap\n", "anything that you do with * is more or less equivalent with * and neither is really anything but an implementation detail of your soa work\n", "* is a more efficient protocol than *\n", "* 2 is even better than * and check this article for a use case regarding *\n", "in fact with optimizations like * you might find that a tls-secured connection actually performs better than plain *\n", "in fact in some ways * is better than *\n", "but since * is less secure than * why isn t it the other way around\n", "but as i understand it * disallows the more secure * domain credentials if they re available\n", "* is complex to set up and even though it generally is considered faster than * this is only true when you reach a certain limit of simultanious users on your site\n", "i understand that * has better performance than *\n", "* could be considered as a better option than *\n", "for a low traffic site the huge tokens that * send across the network actually makes it slower than *\n", "* is not better than * in any way but it does something different\n", "how * is better then *\n", "as i understand websockets are on top of * and have higher latency than * that underlies webrtc when for example sending binary data between server and browser that also could be 2 peers in webrtc\n", "plus once * becomes more common * slow down won t really account for anything much\n", "i m using keep-alive so i think the * handshake is more or less totally out but i hope to move to * soon so i don t really know how that helps after the initial handshake\n", "if we assume that you live in a poor coverage area and your phone and your tower are constantly dropping the signal then re-establishing a * connection is no worse off than re-establishing a tcp connection modulo * handshake\n", "push log files to a central location * is faster than * the windows * command can be automated with -s scriptfile\n", "you will notice that the * header has more fields than the * header and many of those fields will be populated by information from the handshake\n", "it may be that the kernel heuristics for servering * connections is more aggressive than for * sockets since * connections require more state and more continuous processing than do * sockets\n", "for instance zeromq can leverage * multicast to run faster than any * protocol but the application programmer doesn t need to learn a new api\n", "* is way better then * for that\n", "as an additional note my suspicion is that you d need to indulge yourself in some pretty sophisticated benchmarks before you could conclude that * is actually going to have higher performance than * for web services\n", "* is extremely faster than * which is suitable to stream a user s voice input\n", "instead of implementing all these over * it is much better just to switch to *\n", "in some applications * is faster better throughput than *\n", "* is more popular in nat punching because provides much better results than *\n", "* is a slower more reliable protocol than * is\n", "* has bigger overhead than * because it needs to add more data to your payload but you are guaranteed that your data will be received in it s destination in the order you sent it and not corrupted\n", "* is connection less but at the same level as *\n", "that among other things is why * is considered more reliable but slower than *\n", "for example * has much more flags window-length syn ack etc - and also starts and ends a connection in a very stable way - the three way handshake - while all * has is source ip dest ip length source port dest port and checksum\n", "c++ is not my first language and this is small part of code i can t figure out i ve chosen * because it is always much simpler than *\n", "you ve struck lucky with the requirements - because you re going from * - * it s actually a lot simpler than doing * - *\n", "* is actually expected to work better than * in lossy networks or congested networks\n", "* is much faster then * but * has flow control and guaranteed delivery\n", "a heartbeat is by nature a connectionless contrivance so it goes that * connectionless is more relevant here than * connection-oriented\n", "i am confused why * throughput is bigger than *\n", "like matzi suggested * gives you lower latency and lower packet overhead as the header is smaller than * but on the downside the delivery of the packet to the destination is never guaranteed ie\n", "the fact that * s header size is less than * s is because is a simpler protocol that needs less header space that s all there is to it\n", "don t think of it as * is faster and * is slower because that s just wrong\n", "the problem is that * creates bigger packages of data while * uses 8 kb of data blocks\n", "tldr * ip is more reliable than * but not a 100 iron-clad guarantee that nothing will ever go wrong\n", "* communication requires much less overhead than * due to the number of messages exchanged\n", "the reason * is faster than * is because there is no form of flow control or error correction\n", "btw i concur that * is far more appropriate than * in this case\n", "2 * needs more processing at network interface level where as in * it\u00e2 s not\n", "* just has a smaller overhead than * but that comes at the cost of reliability\n", "this is the reason why * is much faster than *\n", "* is not always faster than *\n", "because there is no confirmation on * packets it s slightly faster than *\n", "* is really faster than * and the simple reason is because it s non-existent acknowledge packet ack that permits a continuous packet stream instead of * that acknowledges a set of packets calculatd by using the * window size and round-trip time rtt .\n", "normally a server wouldn t need to know the client s address beforehand but * s knottier than * the more usual stream-oriented approach to socket communication in many ways\n", "a * stack is considerably simpler than a * stack\n", "+ consider that the implementation of * stack is much more complicated than * more instructions are executed there\n", "* mounts are more reliable and you know you have a network problem much faster than with *\n", "as far as * goes i think * is more generally used protocol for more data-centric requests like chat or things that require packet integrity * tolerates packet loss to lower latency\n", "or is there any specific scenario where * is better than *\n", "i think * will perform better than * gcdasyncsocket in your case video transfer\n", "scenario where * is better than *\n", "* has less overhead than * and is therefore faster\n", "but there are some cases especially in iot domain * is more popular than * for its bigger transport overheads\n", "if they are connected over the internet you could try to use the examples for * but * has more overhead than *\n", "it is worth nothing that in a link where * and * are sharing the bandwidth * is better behaved than * in that it will try to limit itself to avoid congestion\n", "moreover * has more processing overhead than *\n", "the key question was related to what kind of situations would * be the better choice over *\n", "if the data is critical you should go for * which is slower as compared to * which in fact doesn t guarantee the packets will arrive in order or even if they d arrive or not\n", "so assess the situation the development cost of a * transport is higher to significantly higher than * and to some degree you are re-inventing *\n", "i was going through internet and so and understood that web sockets are encapsulations to * which by itself is slower than * ofcourse at the cost of reliability but i couldnt find much info if websockets or * would be ideal to implement such a server\n", "because of * requires connection and provides security it is slower than * and therefore it should not be preffered during a video streaming\n", "* is certainly going to be more reliable than * since * doesn t guarantee packet delivery which is probably why you application is hanging on the receive\n", "you could get them to do a * multicast within a lan environment to identify the programs using protocol messages then have a stored cache of each other s identity and then use * to connect and do main exchanging of messages which is more reliable than *\n", "instead you can use * and implement your own scheme for verification of data that is less stringent than *\n", "* is more of a fire and forget whereas * maintains a connection state\n", "i ve considered that * is more suitable for sending a series of discrete data sets but i need the reliability of *\n", "note that there are exceptions to the above - for example * generally traverses firewalls better than * which may be blocked due to security to traffic policy reasons so voip speech may sometimes be sent over * for part of its journey at least\n", "does * always perform better than *\n", "the reason i asking this is because i read * is slower than * because * ensures order of packets\n", "it was introduced since the nat traversal for * is much more complicated than *\n", "* is much slower than * but when the two machines are not on the same lan * is not reliable\n", "in doing so the tradefoff is that * becomes slower compared to *\n", "the problem with using * is obviously that it is a lot slower than *\n", "* communication is connection less as compared to * which need a connection\n", "* will almost always provide better performance than * at the cost of reliability\n", "i know * is a safer choice but let s assume i can only use * and i need to ensure i can send packets over at a high rate with no missing packets what should i do\n", "for example i read an experiment in which a stream of 300 byte packets was being sent over ethernet 1500 byte mtu and * was 50 faster than *\n", "* is significantly faster than * and is why it is or was used for video and various things back in the day\n", "* gives smaller latency with many many issues to discuss here of course * gives bigger latency\n", "this was surprising for me as it is well known fact that * performs better than *\n", "this was surprising for me as i expected * to perform better than *\n", "* - more reliable than * but this comes with some overhead there is a distinct connection a better match for games which require less frequent data transmission such as turn based games as is your game\n", "-- in which scenario configuration would i get * to perform better than *\n", "also see this other so answer about the misconception that * is always faster than *\n", "if you were attempting to beat the performance of * by shifting to * keep in mind that part of the reason you get lower performance with * is because * tracks and redelivers the lost packets for you\n", "* is slower assures data arrival * is faster data corruption may be possible\n", "getting much more information is needed in the packet header for connection less like * but why the header size of * is less than *\n", "i m aware of the differences in general the facts like * is more accurate while * is more fast\n", "* lends itself to real-time less latency than *\n", "* sockets- guaranteed delivery bigger payload than * cumbersome to setup for web based solutions\n", "* is faster than * and the simple reason is because its nonexistent acknowledge packet ack that permits a continuous packet stream instead of * that acknowledges a set of packets calculated by using the * window size and round-trip time rtt\n", "* has a much lower overhead than *\n", "as a general rule * is faster than * due to less protocol overhead\n", "* is less reliable on a wide area network but in a closed environment of a vm talking to its host you can safely skip all the * reliability stuff\n", "* should be much faster than * because there are no acknowledge and congestion detection\n", "also if you have very limited memory processing resources it is worth bearing in mind that * is a less costly protocol as it avoids a lot of the overheads * incurs due to its inbuilt connection management\n", "i assumend that the transmission using * have to be much faster than using * but in fact my tests proved that the * transmission is about 7 to 8 times slower than using *\n", "i know * is better to send file but i have a homework about sending file via * protocol\n", "from experience i can tell you * is about 10-15 faster than * on dedicated and *-tuned networks\n", "the downsides are that it is unreliable messages can be dropped or corrupted therefore you may want to add some safety and that some isp may restrict * more than * test yourself to be sure but usually there is no problems\n", "only when packets can be discarded unordered can * be faster than *\n", "in practice this means that * is better suited for continuous transmission of data whereas the more lightweight * can be used when reliability isn t important\n", "in a native application i would use * for the most data player position ... because it s way faster than * and it s uncritical when it is lost\n", "* scales better than * because of reduced states that need to be maintained in the operating system\n", "i used iperf on two linux machines to send data using both * and * i found that * performs better than * average 65 better\n", "keep in mind that implementing * traversal is easier than *\n", "note that * is more difficult to work with than * because packets are not always guaranteed to be delivered\n", "one can say * has a lower overhead than * because its packets have a smaller header and therefore take less bandwidth to send the payload the data\n", "i don t think you should make the assumption that * is faster than *\n", "* is way lighter and faster but somewhat less reliable than *\n", "i know * is faster than * for various reason\n", "if the network between the two point have a very high quality * is absolutely faster than * but in some other case such as the gprs network * may been faster and more reliability than *\n", "certainly * has more overhead than *\n", "there is a perception that * is faster than * but i think it depends on the situation - take a look at this discussion for some further discussion on speed reliability etc between * and * go down through all the high scored answers\n", "* is also more work than * if you need reliability which is built in to *\n", "* windowing is more expensive than raw * but if you use * to go faster and add a custom loss-recovery or seqno ack resend manager then that may slow you down again\n", "while * has less network overhead than * it generally relies on you the developer to come up with your own mechanisms for flow control fragmentation handling lost packets etc.\n", "i read in a case where a stream of 300 byte packets was being sent over ethernet 1500 byte mtu and * was 50 faster than *\n", "* is slower than * and you ll have to mitigate that in realtime multiplayer\n", "for some requirements * is better for some *\n", "maybe one of you guys already sees a problem in the code snippets or have any other suggestion or hint for me why my * transmission is slower than *\n", "i did some research and found that * may be more suitable in this case because * hole punching works much better than * hole punching\n", "if your client connections are more or less permanent and not too many clients are connected at the same time * is only slightly worse than *\n", "but it sounds like you want to do nat traversal over * which is a harder problem than *\n", "http is an application layer protocol which could be encapsulated with a protocol that uses * providing arguably faster reliable communication than *\n", "hello to all i am developing an application that needs to send a image via the * socket.i know that * is a better protocol but playing with kryonet in java i have learnt that * is better for this type of application.i have this small class that i have made\n", "* is much better than * in terms of reliability\n", "we know * is better suited for this but the hardware development decided it s got to be *\n", "if i d directly say that * is faster comparatively than * that it is used for such applications\n", "some protocols are more complex because what s needed are some but not all of the features of * but more than what * provides\n", "i know that in practice this would only happen with a great amount of connection given that processing time of an * connection is faster than * but it could potentially happen\n", "use socket for * and datagram for * its a lot faster than * but less connection oriented\n", "what is that key feature in * that makes it have much much higher throughput than *\n", "also sending receiving data over * is much simpler than over * and it does not require any connections\n", "* is simpler protocol than * and you can still simulate features of * using *\n", "i was expecting that * would be faster but * is on average two times faster than *\n", "if you re more interested in latency and small amounts of data then something * based could be better than * but you d need to build extra logic for ordering the messages and retrying the lost ones\n", "alternatively it can be used over * which is less hungry than *\n", "is sending packets via an established * connection after all hand shaking has been done a method to be faster than *\n", "in my experience * based code is generally less complex than * based code\n", "first of * s datagram is simpler than * s one\n", "theoretically * should be be 30-50 faster than * because it s missing the extra trip for the ack and has a smaller header overhead however in reality there are many cases where * would outperform * just because of congestion control\n", "why the header size of * is less than *\n", "it seems like * will more efficient than *\n", "-- does * always perform better than *\n", "but with the * protocol in particular this is easier than for *\n", "* is subject to higher latencies than * as it requires the client to send back packet confirmations\n", "* is generally faster than * as it does not have to do the overhead checking of consistency that * must deal with\n", "what i have thought of so far is that * is going to be more reliable than * and in rmi corba we want network reliability\n", "* protocol is unreliable but much much faster than * which is most commonly used for communication\n", "you can use * as well but if you are dealing with firewalls it is probably going to be simpler with *\n", "4 * is a slower than *\n", "generally speaking * has less overhead than * allowing you to receive more data but this is not a strict rule and is almost negligible in this context\n", "* is reliable but slower than * while * is not safe and i have to implement my own fault-handling codes\n", "since loosing some packets doesn t matter but speed latency is crucial * is much better than *\n", "and there are no handshakings required * are pretty much faster but less reliable than *\n", "the decision on yours the * protocol used for connection oriented network that is more secure than *\n", "* as you know * is faster than * even if * may miss some\n", "* has to do a lot of error checking to ensure that your packets don t get dropped and so * is much slower than *\n", "* streaming for audio can be less helpful than * rtp as you d have to turn off nagling\n", "i m trying to avoid *client because * is faster but would this work in * since it s streamed\n", "actually we could say that * is a higher level protocol compared to * because * includes some advanced features which might be useful .\n", "if you can t afford lost packets then * is probably a better option than * since it provides that guarantee out of the box\n", "please note however that this architecture implements * which is much slower than * and will not work for any type of fast-paced data intensive games but should accomplish your goals given your description above\n", "as such traversing a nat through * is much easier than *\n", "in a congested network yes * will send its packets faster than * this is because * takes then congestion into account using a mechanism called congestion control\n", "i am using * because it is much faster than * but sometimes i need the know for sure if the packet reached to the other side in my program i can not use * at all so i am sending ack packets\n", "in general the * protocol manages the available network bandwidth better than the * protocol\n", "when writing your server bear in mind that the sequence of events for a * socket is much harder than for a * socket since as well as the normal socket and bind calls you also have to listen and accept\n", "yes * is much much lighter than *\n", "the package is bigger than * s package but smaller than * s package\n", "but when i used iperf on two linux machines to send data using both * and * i found that * performs better than * for 10mb of data\n", "one often finds the argument that * is faster then *\n", "most importantly you can easily supplement * with some reliable delivery hand-shaking that s less overhead than *\n", "we propose to use * over * since * is faster than *\n", "* is faster and requires less bandwidth than *\n", "* is a bit slower than * but more failsafe\n", "short answer if you can tolerance with any packet loss * is better otherwise *\n", "at my company we have found memory mapped files to be much faster than loopback * ip for communication on the same box so i m assuming it would be faster than * too\n", "* socket is even more likely than * socket but both work\n", "for this particular application sending simple data chunk to the client from an index given by the client * will not perform any better than *\n", "in that sense reliable * cannot be faster than *\n", "* packets are easier structured than * packets but sacrifice security for their size\n", "also note that it is easy to implement your own stack on top of * that performs worse than *\n", "* sockets have much lower overhead than * because packets are not acknowledged by the recipient\n", "if you care a lot about efficiency or really need tens of thousands of connections then implementing your specific protocol in * will always be better than *\n", "with * its slightly slower than * and has more features\n", "i suppose this is one of the reasons for the misconception that * is slower than *\n", "try to increase timeout value * is slower than *\n", "* is quicker than * but if you re using quickfix you ll be using *\n", "apart from that * packets by themselves are not slower than * packets and data transfer with a simple * connection can be faster than with a simple * connection because flow control and reliable transfer is already integrated and you don t have to reinvent everything again and often worse\n", "* port scanning is possible but it is harder than * scanning\n", "if you can do everything with * it is lighter than *\n", "what s currently baffling me is in my results * finishes almost 2x faster than *\n", "i though that * was faster than * but do you think that * will be faster due to the congestion\n", "* is significantly easier do you really need * btw\n", "* ip is supposed to be more reliable than * ip see this comparison\n", "* is far better at transferring large quantities of data but when the network fails it s more likely that * will get through\n", "also remember that dns requests can use * if the request or response would need more than 1 * packet\n", "in gaming especially fpss * tends to be the chosen protocol because it s much less chatty than *\n", "* is faster than * because packets are sent without guarantee of delivery nor order\n", "the strange thing is that when streaming is done via rtsp unicast * generates both sender reports and receiver reports but when streaming is done via * multicast only sender reports are generated\n", "* protocol is more complex than http or * form example\n", "it is optimized for downloading larger files where the setup overhead is amortized over the size and number of downloads http is very light-weight you can communicate to an http server using * much easier than * especially before passive * and is designed around html -- the concept that in the course of your navigation you will be visiting many different servers and grabbing only a couple of files at a time from each\n", "yes i know * is better than * but right now i m stuck with *\n", "* is more general than * and is generally used for command and control\n", "i am working on * socket programming and i have to stop the transmission in application if requested data is more than * value\n", "when send a * datagram larger than the * size only the last fragment of the * datagram is putted out to the destination\n", "* packets greater than the * size of the network that carries them will be automatically split up into multiple packets and then reassembled by the recipient\n", "to send large blocks of data via * you need to chop them up into pieces smaller than the * for the network segment across which you re transmitting them\n", "* uses datagrams chunks of data which are received whole on the other side unless the size is bigger than the * but that s a different story\n", "what would happen if my * package is larger than *\n", "if * payload size is bigger than * size * will silently segment the packet\n", "if there is network congestion rate limiting or traffic profiling or if the * message size is larger than the *\n", "ever since i did sockets programming on a pdp 11 it s been the case that ip fragmentation will take care of the case where an ip datagram such as a * datagram is larger than the * for the segment allows\n", "in real life * packets size usually is equal or less than * size\n", "basically while sending * packets larger than * ip fragmentation can occur if it s supported on your platform but not all platforms support it\n", "note that * packets bigger than the * s at every hope between your hosts will be split by ip\n", "my lwip can send * packets to pc but my pc would fail to reassemble when the * packets are larger than *\n", "ideally your * frames are smaller than the * for your architecture say 1500 bytes so the messages won t get chopped up in transit\n", "if you send a * datagram larger than the * it will be fragmented\n", "they are easily generated for * simply by making the datagram bigger than the *\n", "now if you re intending to use a remote filesystem with ofs which is the primary use-case you have to first install the relevant remote filesystem packages on the os you re using then use for example if we ve got * which is the newer name for * samba\n", "an * packet has a header that is 20 bytes and is probably going to be slightly slower than *\n", "in fact * especially the ttl excceeding message has even less limitations than * on nats for the error message can be sent from every corner of the internet and routers with nat cannot be aware that these messages are not the true ones\n", "in addition seeing * being slower than * doesn t necessarily mean * isn t deprioritized---it might mean bandwidth is insufficient to hit the limiting threshold\n", "regardless the * protocol is more simplistic in nature can handle orders of magnitude more client connections than * for the same memory utilization uses less bandwidth on the wire doesn t require authentication although you can add this feature etc\n", "and also don t forget - * much more customizable than *\n", "you are right that using * is probably better to use for something like this or even an existing protocol like *\n", "if you are using linux check out netdiscover this uses * i think * is lower level than * udp and with java you can only create apps from * udp and above\n", "it would appear from your question that the period of the * message is shorter than the * refresh time\n", "almost all * * providers allow you to forward calls from an attached did telephone number to more than one * device so your request could be satisfied by a basic account on your friendly neighbourhood * provider\n", "* is more flexible than * an application can configure the level of security it needs\n", "there is a limitation on creating virtual hosts for name based virtual host while using * 443 port so if you want to have more than one * port enabled you will need ip based virtual hosting\n", "as last resort resolution i don t suggest this for security issues using * is always safer switch your registry to use http instead of *\n", "it could be a sni problem if you use any kind of load balancer * proxy or more than 1 * certificate on the same ip\n", "you could always use * that will work both on http and * websites but loading a * resource is slower than loading a http resource because of the encryption and * handshakes\n", "since * proxy is in theory nothing more than a * tunnel i thought i could give that property another try\n"], "os": ["* is more consistent and reliable because it is enterprise while * is geared towards desktops and personal computers\n", "in this respect * is less desirable on a server than rhel or * which stick to more mature versions\n", "this is because your * system has newer system libraries than your * one\n", "is there anything obvious in * that would otherwise be making sfphpview- render run slower than *\n", "i believe that * is better than * when it comes to mono as it is much easier to setup and seems to be better supported\n", "if your system * is older like * wheezy for example your glibc version will be older than the required one\n", "personally i develop on the windows but deploy on * where couldn t find the scrapyd package at all at the time i was working on it and noticed that performance of scrapy is considerably worse than on * box so you might reconsider your target\n", "it is widely used to have a separated tag with the postfix -alpine in it to indicate that alpine * is used which is a much smaller base-image than the * image\n", "it s true that the * compatibility exists but i ve found that earlier mac machines does not have the propper hardware and you experience some lacks in memory and graphics when upgrading more than one *\n", "both commands works in the same way only difference is * list installed output maybe bigger than * -qa because * will show package dependencies also in its output\n", "i strongly suggest either of the first two options over the latter option as the latter option does not always play nicely with the way * and * handle transactions when more than one * are involved\n", "* makes it easier to maintain groups of machines without having to manually update each one using *\n", "note that centos software versions are older than * s but versions of * software are newer than * s versions\n", "i m testing some simple benchmarking calculations on win7 and * * 16 to compare the timings and being wonder win appears to be much faster than *\n", "* however is less forgiving and has a filesystem that is case sensitive at least my dev * version does but i guess it is the default for *\n", "also i would recommend doing a dual boot to * it s much easier to work with opencl in a * cli fashion\n", "although if you aren t interested in using adobe cs you can use * distro which is easier than other * distro and quiet popular so you won t have any problem finding solution\n", "even if you re on * it s much easier to get a precompiled version sudo apt install r-cran-rgl on * if you have the appropriate cran repositories set up\n", "also very particular that this should be done on centos or amazon * which makes things worse for me as i have been on * for long\n", "one one * distro fuser -n tcp 3000 will report a process if i own the process yet on another * distro i think centos it won t report the process even if i own it\n", "i am new at a firm and i was given a project that was on amazon * ami now we need to transfer project on another server and because i am more familiar with * than with amazon * ami i was wondering if there much difference and will project work perfectly\n", "see but if you are using a * distro there may be shortcut instructions that make it simpler under * for example there are shortcuts in\n", "you can use alpine * docker image it is very light and is better than both * and centos image to be used as the docker\n", "* is getting closer but there are still numerous things with * that will keep the grandmothers of the world from using it\n", "i don t know why arch * is slower than * on your machine\n", "sometimes a * distribution contains far more than an operating system but is informally referred to by a single name such as * and so the line between what the operating system is the * kernel and standard libraries perhaps and the applications that merely ship with that operating system the gnome and kde environments on * is pretty gray\n", "i would give you more info except a ip aliasing on * 7 is more involved than i like much easier on * and b i m not familiar at all with configuring nginx very easy on apache\n", "i want test unix-like operating systems on historicial computers like commodore amiga atari st and i386 cpu and run posix compatible apps like pkgsrc x window system and blackbox wm for 40mhz higher versions * 1.5 is best os for those systems better than * but it is not posix-compatible\n", "* is more similar to * than it is to watchos although they all have some similarities\n", "since * 10.10 is newer than * squeeze if you can do it on squeeze you can certainly do it on *\n", "recompiling * kernels is harder -- it will require working with * build tools\n", "i believe * is smaller * wheezy smaller still or even alpine for tiny start point\n", "* has nicer frontend and could be more suitable for windows emigrants while * is more for backend guys\n", "this is because * 15.10 uses a newer version of libc and libstdc++ which is not available on * 8\n", "as for * being more stable than * for using as server it can be true in very rare occasions where the package is very obscure\n", "* is far less conservative than * so you will get closer to the bleeding edge\n", "i m in * wheezy which is much more recent than * 10.04\n", "* heavily relies on python scripting and generally consumes more resources than *\n", "the main advantage of the * image is the smaller size \u00e2 it clocks in at around 85.1 mb compared to around 200 mb for *\n", "we recently have migrated redmine from a server which was running under * 5.5 with the same ror environment the same load the performance was a way better than on * 7\n", "he says he uses * and is less familiar with * and so i am posting here\n", "note that * software versions are older than * s but versions of opensuse software are newer than * s versions\n", "be aware that the bourne shell in * is more capable than on *\n", "just a tip but from personal experience i ve found that * works much better on low-end hardware than a modern * distro does\n"], "format": ["the atom * option seems to load faster than the * one fwiw\n", "as you noticed yoou cannot create an * campaign *ed by more than oone *\n", "the specification of atom * offers more value than the * one with internationalization content types and other things and every modern * reader supports it\n", "for example if your screen is 600 pixels wide and if the * * string takes more than 600 pixels to display you will not be able to see the end of your * *\n", "google does this because their * api can parse more than *\n", "if your service already has an * * things are even easier with the * reader integrated in the buzzbox api\n", "you d gain compatibility and durability because * is more defined things will change less but if the * doesn t include what you need it won t help you\n", "you could use the * format which is more common than * and allows true grayscale images\n", "jpg * is slower to draw than a *\n", "not only do * files have natural support for transparency they are also smaller than * files\n", "is not simple scale or crop but to be able to rotate scale and crop every single sprite and draw it in the exactly order to compose the final hight resolution image in a backbuffer then save it in * and make some copies in lower resolution as *\n", "note that the * format is much more complex than * since it allows compression etc\n", "rebuild a new * format in-memory data which is much more smaller than current * data and send the new * format data by socket to remote server\n", "i have a sample wpf app here and wondering why * is loading faster than *\n", "if a * file is newer than the corresponding * file or the corresponding * file doesn t exist then i want to run a bunch of commands to convert the * file to an * file and copy the tags across\n", "it s possible for * software to make this a lot shorter with * but these calculations are hard and not everybody implements it\n", "however * files if stored properly are not significantly larger than * files because since windows vista * files can store *\n", "if the latter is what you want you could use * which is somewhat easier than the * format\n", "there s a post on the subject on the birt world blog here specifically relating to xls emitters although the tribix emitters mentioned should also enable output to * a microsoft format readable by word that is much more concise than *\n", "2 * seems a little better than * but not much\n", "today * is much more popular than * so if you re writing files outside of your own data store * would be a more common choice and you d need to work through nsimagerep to get there\n", "* \u00e2 any bit depth any compression lossy or lossless everything including the kitchen sink \u00e2 and no better than *\n", "the resulting * compression may produce a file size larger than your * compression\n", "jpg or * should get you smaller than *\n", "the resulting file from this * approach is smaller in size than a * file and i guess may rescale better\n", "i suspect the computational demands of * decoding are probably considerably less than * and if dsp gets you excited taking the time to figure all this stuff out is 100 worth it even if the flash route possibly leads to disappointment\n", "also your * looks more like a * tab separated instead of comma separated\n", "* is smaller than *\n", "i also know that it can deal with * better than * and ogg\n", "regearding your comment i also know that it can deal with * better than * and ogg that is not really the case\n", "an * file is nothing more than a text file listing * and or other format digital audio files to be interpreted by player software as a series of audio files to be played in succession\n", "it is even slower since i could only upload * which is way bigger in size compared with * and opus\n", "for using a fileformat i thought * uses much less memory than * because all the formats are based on * but just compressed\n", "if you are still having problems jdk 8 has the ability to play * files which are significantly smaller than * you may want to try this\n", "either way applying gain and or attenuation to time-domain sample data as in a * file is much easier than trying to apply these effects to frequency-domain data as in an * file\n", "question i\u00e2 m seeing some compromise in * quality my converted * is lower file size when compared to * but my audio quality is little poor than * wonder if i can increase the quality of the * file\n", "* files are about 3 times larger than * files so it would need 1.8gb additional space to do the conversion\n", "ok i am new to audio with unity but despite reading all the unity posts regarding audio adding 2 short .* clips i heard * was smaller than * to my app has added over 200mb\n", "i understand that * is much smaller but it has worst audio quality when is compared to * files\n", "now i assume you are worried your techno might not read a compressed * which should be smaller than a * from my memories\n", "if you ask if a uncompressed * which contains pcm data is better than * then yes but the question sometimes is how much this better really matters to the human ear and how much postprocessing you have to perform on that data\n", "you should definitely pick * because they are about 10x smaller than * files of the same duration\n", "* loads much quicker than * and can be integrated with the google maps api as a kml layer\n", "one reason to use * it is sooooo much better than *\n", "i ve heard that * decompression requires much more memory than * decompression\n", "by the way i would suggest creating * self-extracting archives instead of * self-extracting archives as with * compression the exe file with the right switches for best compression using additionally also solid archive options could be much smaller than with * compression\n", "i found the production of * much better and easier than * because all windows * encoders i tried are not really good and stable whereas pretty much every tool can natively output *\n", "convert it to * 10-30 smaller than * on average\n", "it might help to reduce your * file sizes smaller oh and i believe -depth 8 can only be used for * images\n", "* compresses much better than * and allows more colors at the same time\n", "* has a wider color pallete than * and * is properitary while * is not\n", "for example * has better support for transparency than * or jpeg\n", "one thing to note is that * supports a smaller palette than * - only up to 256 colors\n", "i m not sure if this matters but the * is significantly larger than the * files\n", "wewtaco i noticed that your * file has wider dimension than the * file and i am guess that could be a reason the black bars are showing up\n", "* gives you better alpha result than *\n", "if your * files are coming out larger than equivalent * files it is almost certainly because your source image has more than 256 colors\n", "many people don t know about 8-bit * which is usually better than * in size.\n", "* is a newer format and often better than either jpeg of * - especially for screenshots\n", "while * is definitely better that * occasionally there is a use case for needing to stay in * format\n", "also if i change all to * is not bigger and alos i am using prawn pdf outputting these images so cant use *\n", "paul points out that * compresses static line art better than * for nearly every situation\n", "* is smaller because it s based on an colour palette of 256 colours rather than the separate rgb values for each pixel or group of pixels in jpg and *\n", "* images are always compressed lossless but their compression algorithm works better than competition *\n", "as a general rule * is never worse and often better than * because of superior compression\n", "since that appears to generate index-color * files which are smaller than the * files that doxygen generates\n", "the * format is substantially less capable than *\n", "icon size indexed * is often smaller than the same *\n", "according to wikipedia the * format provides better compression than *\n", "animated * is better than * if we re focused on file size \u00e2 achieving a smaller file size was one of the reasons the a* format was designed\n", "it will always be a web format which basically comes down to jpg * and * with * being very unlikely because of its limitations * can contain 256 colors at most and is generally larger than *\n", "a 8-bit * shim is smaller than the same dimension 1 pixel * and everything will still work as planned\n", "there might be some edge cases where * is slightly better because the * format may have a slightly larger overhead from metadata but it s really not worth the worry\n", "you can then use imagecopy to insert each * image including the background and image* to generate * output which is better for line art than jpeg offers better compression than * and can support more than 256 colors\n", "but keep in mind that the * color palette is way smaller than *\n", "but in that regard it is replaced by * which is generally smaller supports alpha transparency where * pixels are either fully transparent or fully opaque and most importantly * images are limited to 256 colors\n", "* achieves better compression than * because it applies a pre-filtering step before the lossless compression deflate roughly equivalent to lzw. see wikipedia s explanation of * filtering\n", "indexed * less than 256 colors is actually always smaller than * so i use that most of the time\n", "jpg and * work well for most applications but the files will be larger than * for very simple graphics\n", "i used * because its file size 2.1kb was considerably less than * or jpeg in this case\n", "just press save and give it a name and that photoshop image will be saved into a transparent background * file which presents more colors and it s smaller than a * file and is as good as a jpg\n", "if * isn t smaller than * then your software may be saving it poorly - look for * optimisation progams like *out and *nq\n", "* vorbis is better quality per meg than * plus no licensing legal issues\n", "of those three * would usually be smaller than *\n", "moreover * vorbis is better then * at all bitrates\n", "in general * achieves better compression than * which is a plus for things like download size bandwidth resource usage etc\n", "ie s * is slower than other browser s *\n", "i used ppm * files as they are simpler to write and more portable than *\n", "the only thing i can suggest is that you use * format which is even easier than * for you to read from\n"], "database": ["i read in some blog that * performs at least as good if not better than * while also offering more complex types like mongodb would\n", "* looks more fancy and advanced but not as popular as * and is not supported on heroku\n", "using * that is supposed ti be faster than * for depth i m seeing a slow performance\n", "as you can see the * result is way longer then the one from *\n", "the number of requests * could serve is consistently 3 to 5 times lower than *\n", "i found that * is too slow at least much slower than * even on relatively small 150k datasets when searching records by text pattern despite the presence of indices\n", "using a database system such as sqlite or mysql that follows the * principles is much more easy as the database system guarantees * atomicity of the transactions isolation and durability\n", "however the isolation part of * sounds more like * model in particular the sequential * model\n", "* is a more up-to-date version of * despite the low version number\n", "* supports no more than 100 levels of nesting for * documents\n", "* supports no more than 100 levels of nesting for * document.\n", "a document in * is more or less like a json structure * to be specific\n", "so if your document * is larger than 16 mb * throws exception\n", "* supports no more than 100 levels of nesting for *\n", "the * becomes even more annoying to work with when exporting data from mongo to another db platform this is the case when dealing with big data that is collected and you want to merge it with some properties from the back office * this means a lot of pain you need to transform the binary objectid to a string in order to join with the id in different platforms that do not use * representation\n", "* stores everything in memory anyway and works in a similar vein being a key-value based system however i believe * is more flexible as it allows for storing * objects within themselves\n", "the distinction between int64 and int32 in * is more about * storage size\n", "basically * supports no more than 100 levels of nesting for * documents\n", "* may also be a more stable option in the linux environment especially now that the fetch code has been re-written in java as of development release 0.2-0 on r-forge its performance is on par with if not better than *\n", "* takes longer than *\n", "now the speed of sql server interaction with r has affected because * is slower than * but its not too bad\n", "regarding * it s more or less just * so to connect you can use these libraries from the * wiki\n", "due to many improvements to * and that * has more features than vanilla * my suggestion would be to use a c++ http library to communicate with *\n", "when the data is on disk * is faster than * cause it has a better disk representation\n", "because it seems you re going to deploy a cluster i think * is the better choice unless you re willing to pay for the enterprise edition of * to support clustering\n", "i think that * www.*.com is better than * and additionally has better licensing\n", "* is more similar to pouchdb *\n", "* more than * but that s neither here nor there\n", "according to the * which i gather * is based on documentation for sequence manipulation functions it should return the value most recently returned by nextval in the current session.\n", "* and other similar solutions should work a bit better than * depending on your data sets and use cases\n", "* looks more like a memcache server with a persistence layer powered by * and maybe it does not fit your needs\n", "i d like to add that * is a faster and more scalable option than * the 2.0 version introduces views at a high level it s a distributed memcached membase server merged with * but of course more sophisticated than just mashing them together\n", "* btw also uses binary replication mechanism which will be more efficient than * as long as the * protocol is not utilized for bidirectional data exchange and conflict resolution\n"], "dbms": ["i read in some blog that * performs at least as good if not better than * while also offering more complex types like mongodb would\n", "* looks more fancy and advanced but not as popular as * and is not supported on heroku\n", "using * that is supposed ti be faster than * for depth i m seeing a slow performance\n", "as you can see the * result is way longer then the one from *\n", "the number of requests * could serve is consistently 3 to 5 times lower than *\n", "i found that * is too slow at least much slower than * even on relatively small 150k datasets when searching records by text pattern despite the presence of indices\n", "* supports some more security features than * for example integration with gssapi or kerberos for logins last i checked * didn t have these\n", "* is already slower than * up to a certain point it is actually faster when you have a ridiculously large database\n", "* is much more similar to oracle than * is\n", "* will always be a little bit more mature than *\n", "from how i understand it * is a more correct database implementation while * is less correct less compliant but faster\n", "either * more proven than * for such huge data\n", "the only reason i was considering * was that some research suggested * has much better support for changing schemas along the way than *\n", "if i were able to upgrade the server s versioning of * to 5.5 would innodb be a safer bet than *\n", "triggers in * have a syntax a bit more complex than * because they execute procedures as the action\n", "for example pyqt is already available for python 3 as well as 2 and you can use * a splendid open-source sql database engine much more standard than * via py-*\n", "* gets much better performance and this is coming from a former * partisan\n", "* i am told can be optimized to do faster reads than * but both are pretty ridiculously fast in terms of # transactions sec they support and it doesn t sound like that s your problem\n", "in fact this presentation which still refers to an older incomplete version of * s opengis support suggests that with proper indexing some * geospatial actions may actually perform better than * postgis though i m sure that s up for debate\n", "all that said * is much more acid compliant than * it handles fks just as you re needing and i would generally recommend it based on what you ve expressed in your post\n", "i am using * btw which can do more than * incase that changes things\n", "why * is more capable than others * etc. on django\n", "then * is much better than *\n", "it seems * is more forgiving with this than * but in every case you use a reserved word you should escape it\n", "explain in * is way more useful than in *\n", "as for reliability i think that * is more reliable especially when compared to * using myisam - innodb is a lot better here\n", "in your case * may be a better option than * because your query is going to likely be against secondary indexes\n", "* is more compliant but if you re comfortable with * and you re using an orm you should probably use that\n", "if you are looking for location based queries in relational databases * is more matured compared to *\n", "* is probably more often offered by shared hosting providers * is probably a little more powerful\n", "* is better than * in many ways\n", "honestly though * scales much better than *\n", "in general * knows more tricks for how to optimize complicated queries than the * optimizer does but it also relies heavily on your having given the optimizer enough data to work with\n", "i d have said that * is more security aware than * supporting roles more authentication methods ... but that the database itself has generally a very limited impact on the security of an application\n", "* specifically has gotten easier to manage while * has lost some of the simplicity that gave it an advantage without picking up enough features that really matter\n", "* is more than capable of serving your needs as well as alex s suggestion of *\n", "traditionally * has had fewer security issues than * but they are both doing very well on that\n", "i just recently switched databases to * which has given me a slew of problems although i must admit i like it a lot better than *\n", "i cannot propose any db not knowing your specific needs but if you want to use a free software which excludes oracle and you re not already experienced with * you should try * which is more powerful than *\n", "this is a weak point that iirc * can handle better but with * you have to work around that by reverting the changes yourself in case of rollbacks\n", "if you want open source * is much smarter than * as well\n", "* is stricter to the sql standard than * is\n", "* is faster than * s innodb\n", "i really like * s indexes which are far better than * s\n", "some say * is much better for bigger projects while others think just go with *\n", "an efficiently configured * is better than a badly configured * and vice-versa\n", "i feel * is much more mature and robust than *\n", "i had mentioned that in our rails application all select queries dropped below 100ms after switching to * whereas some of the complex joins generated by activerecord would occasionally take as much as 15s or more with * 5.1 because of nested loops with inner table scans even when indices were available\n", "you might look at * as i find it a bit easier to manage and maintain as i feel some aspects are more logical than *\n", "may be * takes less time than *\n", "anyways * is bad and on longterm especially if you are enough good for java i suggest you to use some better db with * you were really satisfied i think\n", "* is much more complete and solid and will much better support complex queries and their optimization while * may shine in terms of retrieval speed for extremely simple queries\n", "if you need spatial data capabilities postgis with * is better than *\n", "unfortunately in * select count is often slower than * to which it often get s compared to\n", "this is ancedotal but the * servers i ve managed have always been much less troublesome than * which likes to randomly crash once in a while occasionally corrupting a table on the way down\n", "i know * could be considered more mature than * with regards to locking thanks to mvcc - can i use row-locking or some other feature in * instead of the token field\n", "and * has fewer experienced administrators than the big databases and * which i believe contributes to the reputation\n", "i did a simple performance test and i noticed * is slower than *\n", "the query optimizer in * is more advanced than in * and copes with complicated statements much better especially when it comes to sub-selects\n", "* is more permissive and allows the non-standard use of distinct but * throws an error\n", "while * is less popular than * most of the serious web hosting supports it\n", "is * a better option than * for partitioning tables by date\n", "i wonder why * s single insert statement is completely faster than * s when autocommit is turned on\n", "* mariadb is slightly worse than *\n", "b use indexes - * has bigger repertoar of indexes then * so use it - there are gist gin indexes\n", "in my cases * was better than * * do not completely support unicode\n", "i suggest * it s more capable has more features and better support for complex queries and datatypes than * and has a lot of tuning options\n", "* license bsd is undoubtedly more simple than * s\n", "i would recommend * for a beginner as it has far fewer surprises than *\n", "do you find rails with * is slower than * knowing that it produce more query on the background\n", "poor performance from * has more to do with it not being smart and automatically creating an optimized plan like sql server * or oracle would\n", "i was told that * is a better choice than * for displaying hierarchical data so i installed * and i m ready to go\n", "i hear * is more robust and doesn t crash like * does in these situations\n", "* is way better than * in nearly every respect\n", "i d also recommend * over * if you are going to have nested comments as * does hierarchical querying better than *\n", "i just checked the timings using * 5 and they are slightly worse than *\n", "the other question is that what i am hearing from our group leader is that * is better than * when working with coordinates\n", "i totally understand the error and assume that the * implementation is less sql conform than the * implementation\n", "* is older than * so it might have influenced them\n", "as i said * is far superior and i hate mucking with * s bizarre bugs and i think that overall * performance is probably better than * for any even slightly complicated query\n", "however people often argue that * is cleaner and easier to use that *\n", "* is more widely supported and a little easier to use but * has some very cool features and functionality that s worth taking a gander at\n", "following the first answer it appears that * is more compliant to sql standard than * so it needs a group by clause for each selected column you want to display with your aggregated function\n", "drupal 7 * 5.0.15 or higher with pdo * 8.3 or higher\n", "i also personally believe that * has better handling of complex queries that include sub-selects and the like which most * users used to avoid\n", "some people were saying that * is better for security purposes whereas * is becoming more feature rich.\n", "looks like * is a little more compliant than * so try this instead\n", "* is a bit more restrictive than *\n", "while * has a larger user base * is gaining more an more popularity ever since implementing several crucial features that were missing in earlier versions\n", "* has better support but the support by * depends on the used storage engine\n", "* requires more tuning than * to achieve optimal performance\n", "* is picky pickier than * -- all fields in the select list when using distinct must be present in the order_by and group_by clauses\n", "and a wiki for why * is better than *\n", "* with the optional hstore module might be better than * at this.\n", "* run 4x faster than *\n", "* has more established support for this but * has played catch up in the last year or so and has a working method of this in the latest versions\n", "* is more sql compliant than *\n", "* seem to better than * in terms of speed\n", "* is worth learning and much more advanced than *\n", "* is much better suited for data warehousing compared to *\n", "some recent tests we did showed that * does perform faster than * and we believe the table partitioning feature in * will be very important with a table in our database we foresee to grow into 100 million rows and more in production\n", "i found that * 9.3 has better capabilities for json than the * versions i am using\n", "since * is a lot more sane than * there are not that many tricks to report on\n", "while * is more famous for serious enterprise-quality database where preserving your data is critical i recommend *\n", "now i m not sure if i d say * is generally better than * -- there are certainly things that * does much better and so it certainly has its uses -- but these are a few things i absolutely love about it\n", "there is also * its a bit more robust than * and is free just the same\n", "i would need a scalable database so probably * would be better than *\n", "there are workloads where * is better and there are workloads where * is better\n", "* is far more powerful and scalable and doesn t have * s silly limitations and gotchas\n", "* is stricter about conversions than * is and generally will throw an error rather than try to convert a string to an integer if it doesn t look like one\n", "in other words is * better or worse than * to handle unicode etc\n", "given * s reputation for doing things better than * or at least as good as i daresay that * would demonstrate similar performance if properly used\n", "what i am hearing from our group leader is that * is better than * when working with coordinates\n", "generally speaking i find * lends itself to 24 7 operations better than *\n", "fyi * scales better than * on multi-processor overlapping requests from a review i was reading a few months back sorry no link\n", "in most regards * is slower than * especially when it comes to fine tuning in the end\n", "* is also a lot better imo than * and is the recommended database to use with django according to a lot of the people close to django\n", "if you want to use sql i strongly reccommend * it seems to deal with large databases and frequent writes a lot better than *\n", "the question is is * somehow more resistant than * to sql injection attack under the perl dbi and why might this be the case\n", "* is not less complicated that * -- they re the same thing\n", "however * s sql features are far more advanced than * s and * has a tendency to silently ignore things you tell it to do - especially in a default installation and if you rely on a foreign key to be created that might be a very unpleasant surprise\n", "it s a shame * isn t more popular than * since it supports exactly this feature out-of-the-box you d only have to share one sequence object between tables.\n", "for these ultra simple queries * can be slower than * - * has richer planner that works better on more complex queries but on trivial queries is slower\n", "i ve found that * is in my expirience is slower as *\n", "though * is more popular than * but instagram is using * maybe due to these reasons\n", "does this affect * harder than *\n", "* supports recursive queries in the form of recursive common table expressions which make querying heirarchical data easier than in * and also give better performance\n", "i did some benchmarking 3 years ago may be stale... which showed that on large datasets basically * fulltext is 10-100x faster than * and xapian 10-100x faster than * but not integrated\n", "not only does * have a far more flexible indexing than * but the table approaches are very different also meaning the appropriate indexing strategies are as different as the tactics are\n", "i am aware that * interpretation of the sql standard is stricter than * and that consequently this type of query won t work...and have read a number of posts on stackoverflow and elsewhere on the subject - but none of them seem to be the definitive answer on this subject\n", "ps you can also migrate to * it s smarter than * when choosing right indexes\n", "in my personal openion * is slower than * and mongo db\n", "is * better than * for such purpose\n", "but in * it is ok and in * it is wrong and ask for the other fields besides site_id either in a group by clause or in a aggregation function i know that * is stricter on sql than * so i must select the site_id in the query object of msg_published but in pure sqlalchemy i can do like this\n", "* is easier than * but it doesn t really matter either way\n", "* s version is apparently marginally faster than * but lacks some of the more advanced spatial features therefore it s pretty much limited to finding records that match a certain range of coordinates\n", "also you might take the time to compare * and see if there is something about it that meets your needs as well or better than *\n", "* is a little more strict than * about type conversion and does not let you implicitly cast convert between numbers and strings\n", "does that mean perhaps rails team favor * slightly more than *\n", "according to my own experience * run much faster than * especially handling big tables 1.4 gb lineitem table in my case\n", "with correct locking for safety reasons and heavy concurrent use * performed better than *\n", "with django it is easy to use * instead of * so i tried it with the same query and same data in db * is much faster that * x10 more faster while using inner join analyse shows it uses indexes unlike *\n", "according to the * which i gather * is based on documentation for sequence manipulation functions it should return the value most recently returned by nextval in the current session.\n", "* and other similar solutions should work a bit better than * depending on your data sets and use cases\n"]}